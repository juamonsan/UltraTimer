
UltraTimer_Demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000026e0  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  080027a0  080027a0  000037a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080027d0  080027d0  00004010  2**0
                  CONTENTS
  4 .ARM          00000000  080027d0  080027d0  00004010  2**0
                  CONTENTS
  5 .preinit_array 00000000  080027d0  080027d0  00004010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080027d0  080027d0  000037d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080027d4  080027d4  000037d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  080027d8  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b0  20000010  080027e8  00004010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000c0  080027e8  000040c0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00004010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007a5f  00000000  00000000  00004038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000015f6  00000000  00000000  0000ba97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008e0  00000000  00000000  0000d090  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000006e3  00000000  00000000  0000d970  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000ed1c  00000000  00000000  0000e053  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009d3d  00000000  00000000  0001cd6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005c16c  00000000  00000000  00026aac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00082c18  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001fb0  00000000  00000000  00082c5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  00084c0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000010 	.word	0x20000010
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002788 	.word	0x08002788

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000014 	.word	0x20000014
 8000104:	08002788 	.word	0x08002788

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000226:	f000 fbe3 	bl	80009f0 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800022a:	f000 f887 	bl	800033c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022e:	f000 f99f 	bl	8000570 <MX_GPIO_Init>
  MX_TIM3_Init();
 8000232:	f000 f91b 	bl	800046c <MX_TIM3_Init>
  MX_TIM1_Init();
 8000236:	f000 f8c1 	bl	80003bc <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  /* Blue Start */
  HAL_GPIO_TogglePin(LED_Red_GPIO_Port, LED_Red_Pin);
 800023a:	4b3e      	ldr	r3, [pc, #248]	@ (8000334 <main+0x114>)
 800023c:	2102      	movs	r1, #2
 800023e:	0018      	movs	r0, r3
 8000240:	f000 fee6 	bl	8001010 <HAL_GPIO_TogglePin>
  /* Eyes on*/
  HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8000244:	2390      	movs	r3, #144	@ 0x90
 8000246:	05db      	lsls	r3, r3, #23
 8000248:	2108      	movs	r1, #8
 800024a:	0018      	movs	r0, r3
 800024c:	f000 fee0 	bl	8001010 <HAL_GPIO_TogglePin>
  HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8000250:	2390      	movs	r3, #144	@ 0x90
 8000252:	05db      	lsls	r3, r3, #23
 8000254:	2110      	movs	r1, #16
 8000256:	0018      	movs	r0, r3
 8000258:	f000 feda 	bl	8001010 <HAL_GPIO_TogglePin>

  /* Display OFF */
  HAL_GPIO_WritePin(Display1_GPIO_Port, Display1_Pin, GPIO_PIN_RESET);
 800025c:	2380      	movs	r3, #128	@ 0x80
 800025e:	0099      	lsls	r1, r3, #2
 8000260:	2390      	movs	r3, #144	@ 0x90
 8000262:	05db      	lsls	r3, r3, #23
 8000264:	2200      	movs	r2, #0
 8000266:	0018      	movs	r0, r3
 8000268:	f000 feb5 	bl	8000fd6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Display2_GPIO_Port, Display2_Pin, GPIO_PIN_RESET);
 800026c:	2380      	movs	r3, #128	@ 0x80
 800026e:	00d9      	lsls	r1, r3, #3
 8000270:	2390      	movs	r3, #144	@ 0x90
 8000272:	05db      	lsls	r3, r3, #23
 8000274:	2200      	movs	r2, #0
 8000276:	0018      	movs	r0, r3
 8000278:	f000 fead 	bl	8000fd6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Display3_GPIO_Port, Display3_Pin, GPIO_PIN_RESET);
 800027c:	2380      	movs	r3, #128	@ 0x80
 800027e:	0159      	lsls	r1, r3, #5
 8000280:	2390      	movs	r3, #144	@ 0x90
 8000282:	05db      	lsls	r3, r3, #23
 8000284:	2200      	movs	r2, #0
 8000286:	0018      	movs	r0, r3
 8000288:	f000 fea5 	bl	8000fd6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Display4_GPIO_Port, Display4_Pin, GPIO_PIN_RESET);
 800028c:	2380      	movs	r3, #128	@ 0x80
 800028e:	0219      	lsls	r1, r3, #8
 8000290:	2390      	movs	r3, #144	@ 0x90
 8000292:	05db      	lsls	r3, r3, #23
 8000294:	2200      	movs	r2, #0
 8000296:	0018      	movs	r0, r3
 8000298:	f000 fe9d 	bl	8000fd6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DisplayL_GPIO_Port, DisplayL_Pin, GPIO_PIN_RESET);
 800029c:	2380      	movs	r3, #128	@ 0x80
 800029e:	0119      	lsls	r1, r3, #4
 80002a0:	2390      	movs	r3, #144	@ 0x90
 80002a2:	05db      	lsls	r3, r3, #23
 80002a4:	2200      	movs	r2, #0
 80002a6:	0018      	movs	r0, r3
 80002a8:	f000 fe95 	bl	8000fd6 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(DispA_GPIO_Port, DispA_Pin, GPIO_PIN_SET);
 80002ac:	4b22      	ldr	r3, [pc, #136]	@ (8000338 <main+0x118>)
 80002ae:	2201      	movs	r2, #1
 80002b0:	2120      	movs	r1, #32
 80002b2:	0018      	movs	r0, r3
 80002b4:	f000 fe8f 	bl	8000fd6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DispB_GPIO_Port, DispB_Pin, GPIO_PIN_SET);
 80002b8:	4b1f      	ldr	r3, [pc, #124]	@ (8000338 <main+0x118>)
 80002ba:	2201      	movs	r2, #1
 80002bc:	2180      	movs	r1, #128	@ 0x80
 80002be:	0018      	movs	r0, r3
 80002c0:	f000 fe89 	bl	8000fd6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DispC_GPIO_Port, DispC_Pin, GPIO_PIN_SET);
 80002c4:	4b1c      	ldr	r3, [pc, #112]	@ (8000338 <main+0x118>)
 80002c6:	2201      	movs	r2, #1
 80002c8:	2110      	movs	r1, #16
 80002ca:	0018      	movs	r0, r3
 80002cc:	f000 fe83 	bl	8000fd6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DispD_GPIO_Port, DispD_Pin, GPIO_PIN_SET);
 80002d0:	2380      	movs	r3, #128	@ 0x80
 80002d2:	0059      	lsls	r1, r3, #1
 80002d4:	2390      	movs	r3, #144	@ 0x90
 80002d6:	05db      	lsls	r3, r3, #23
 80002d8:	2201      	movs	r2, #1
 80002da:	0018      	movs	r0, r3
 80002dc:	f000 fe7b 	bl	8000fd6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DispE_GPIO_Port, DispE_Pin, GPIO_PIN_SET);
 80002e0:	4b15      	ldr	r3, [pc, #84]	@ (8000338 <main+0x118>)
 80002e2:	2201      	movs	r2, #1
 80002e4:	2102      	movs	r1, #2
 80002e6:	0018      	movs	r0, r3
 80002e8:	f000 fe75 	bl	8000fd6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DispF_GPIO_Port, DispF_Pin, GPIO_PIN_SET);
 80002ec:	4b12      	ldr	r3, [pc, #72]	@ (8000338 <main+0x118>)
 80002ee:	2201      	movs	r2, #1
 80002f0:	2108      	movs	r1, #8
 80002f2:	0018      	movs	r0, r3
 80002f4:	f000 fe6f 	bl	8000fd6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DispG_GPIO_Port, DispG_Pin, GPIO_PIN_SET);
 80002f8:	4b0f      	ldr	r3, [pc, #60]	@ (8000338 <main+0x118>)
 80002fa:	2201      	movs	r2, #1
 80002fc:	2140      	movs	r1, #64	@ 0x40
 80002fe:	0018      	movs	r0, r3
 8000300:	f000 fe69 	bl	8000fd6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DispDP_GPIO_Port, DispDP_Pin, GPIO_PIN_SET);
 8000304:	4b0c      	ldr	r3, [pc, #48]	@ (8000338 <main+0x118>)
 8000306:	2201      	movs	r2, #1
 8000308:	2101      	movs	r1, #1
 800030a:	0018      	movs	r0, r3
 800030c:	f000 fe63 	bl	8000fd6 <HAL_GPIO_WritePin>

  /* Start PWM */
//  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);

  int mode=0;
 8000310:	2300      	movs	r3, #0
 8000312:	607b      	str	r3, [r7, #4]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  switch (mode){
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	2b00      	cmp	r3, #0
 8000318:	d1fc      	bne.n	8000314 <main+0xf4>
	  case 0:
		  HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 800031a:	2390      	movs	r3, #144	@ 0x90
 800031c:	05db      	lsls	r3, r3, #23
 800031e:	2110      	movs	r1, #16
 8000320:	0018      	movs	r0, r3
 8000322:	f000 fe75 	bl	8001010 <HAL_GPIO_TogglePin>
		  HAL_Delay(500);
 8000326:	23fa      	movs	r3, #250	@ 0xfa
 8000328:	005b      	lsls	r3, r3, #1
 800032a:	0018      	movs	r0, r3
 800032c:	f000 fbc4 	bl	8000ab8 <HAL_Delay>
		  break;
 8000330:	46c0      	nop			@ (mov r8, r8)
	  switch (mode){
 8000332:	e7ef      	b.n	8000314 <main+0xf4>
 8000334:	48001400 	.word	0x48001400
 8000338:	48000400 	.word	0x48000400

0800033c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800033c:	b590      	push	{r4, r7, lr}
 800033e:	b091      	sub	sp, #68	@ 0x44
 8000340:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000342:	2410      	movs	r4, #16
 8000344:	193b      	adds	r3, r7, r4
 8000346:	0018      	movs	r0, r3
 8000348:	2330      	movs	r3, #48	@ 0x30
 800034a:	001a      	movs	r2, r3
 800034c:	2100      	movs	r1, #0
 800034e:	f002 f9ef 	bl	8002730 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000352:	003b      	movs	r3, r7
 8000354:	0018      	movs	r0, r3
 8000356:	2310      	movs	r3, #16
 8000358:	001a      	movs	r2, r3
 800035a:	2100      	movs	r1, #0
 800035c:	f002 f9e8 	bl	8002730 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000360:	0021      	movs	r1, r4
 8000362:	187b      	adds	r3, r7, r1
 8000364:	2202      	movs	r2, #2
 8000366:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000368:	187b      	adds	r3, r7, r1
 800036a:	2201      	movs	r2, #1
 800036c:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800036e:	187b      	adds	r3, r7, r1
 8000370:	2210      	movs	r2, #16
 8000372:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000374:	187b      	adds	r3, r7, r1
 8000376:	2200      	movs	r2, #0
 8000378:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800037a:	187b      	adds	r3, r7, r1
 800037c:	0018      	movs	r0, r3
 800037e:	f000 fe7f 	bl	8001080 <HAL_RCC_OscConfig>
 8000382:	1e03      	subs	r3, r0, #0
 8000384:	d001      	beq.n	800038a <SystemClock_Config+0x4e>
  {
    Error_Handler();
 8000386:	f000 fa1d 	bl	80007c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800038a:	003b      	movs	r3, r7
 800038c:	2207      	movs	r2, #7
 800038e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000390:	003b      	movs	r3, r7
 8000392:	2200      	movs	r2, #0
 8000394:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000396:	003b      	movs	r3, r7
 8000398:	2200      	movs	r2, #0
 800039a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800039c:	003b      	movs	r3, r7
 800039e:	2200      	movs	r2, #0
 80003a0:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80003a2:	003b      	movs	r3, r7
 80003a4:	2100      	movs	r1, #0
 80003a6:	0018      	movs	r0, r3
 80003a8:	f001 f984 	bl	80016b4 <HAL_RCC_ClockConfig>
 80003ac:	1e03      	subs	r3, r0, #0
 80003ae:	d001      	beq.n	80003b4 <SystemClock_Config+0x78>
  {
    Error_Handler();
 80003b0:	f000 fa08 	bl	80007c4 <Error_Handler>
  }
}
 80003b4:	46c0      	nop			@ (mov r8, r8)
 80003b6:	46bd      	mov	sp, r7
 80003b8:	b011      	add	sp, #68	@ 0x44
 80003ba:	bd90      	pop	{r4, r7, pc}

080003bc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	b086      	sub	sp, #24
 80003c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80003c2:	2308      	movs	r3, #8
 80003c4:	18fb      	adds	r3, r7, r3
 80003c6:	0018      	movs	r0, r3
 80003c8:	2310      	movs	r3, #16
 80003ca:	001a      	movs	r2, r3
 80003cc:	2100      	movs	r1, #0
 80003ce:	f002 f9af 	bl	8002730 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003d2:	003b      	movs	r3, r7
 80003d4:	0018      	movs	r0, r3
 80003d6:	2308      	movs	r3, #8
 80003d8:	001a      	movs	r2, r3
 80003da:	2100      	movs	r1, #0
 80003dc:	f002 f9a8 	bl	8002730 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80003e0:	4b20      	ldr	r3, [pc, #128]	@ (8000464 <MX_TIM1_Init+0xa8>)
 80003e2:	4a21      	ldr	r2, [pc, #132]	@ (8000468 <MX_TIM1_Init+0xac>)
 80003e4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 4000;
 80003e6:	4b1f      	ldr	r3, [pc, #124]	@ (8000464 <MX_TIM1_Init+0xa8>)
 80003e8:	22fa      	movs	r2, #250	@ 0xfa
 80003ea:	0112      	lsls	r2, r2, #4
 80003ec:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003ee:	4b1d      	ldr	r3, [pc, #116]	@ (8000464 <MX_TIM1_Init+0xa8>)
 80003f0:	2200      	movs	r2, #0
 80003f2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 50;
 80003f4:	4b1b      	ldr	r3, [pc, #108]	@ (8000464 <MX_TIM1_Init+0xa8>)
 80003f6:	2232      	movs	r2, #50	@ 0x32
 80003f8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003fa:	4b1a      	ldr	r3, [pc, #104]	@ (8000464 <MX_TIM1_Init+0xa8>)
 80003fc:	2200      	movs	r2, #0
 80003fe:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000400:	4b18      	ldr	r3, [pc, #96]	@ (8000464 <MX_TIM1_Init+0xa8>)
 8000402:	2200      	movs	r2, #0
 8000404:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000406:	4b17      	ldr	r3, [pc, #92]	@ (8000464 <MX_TIM1_Init+0xa8>)
 8000408:	2200      	movs	r2, #0
 800040a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800040c:	4b15      	ldr	r3, [pc, #84]	@ (8000464 <MX_TIM1_Init+0xa8>)
 800040e:	0018      	movs	r0, r3
 8000410:	f001 fa74 	bl	80018fc <HAL_TIM_Base_Init>
 8000414:	1e03      	subs	r3, r0, #0
 8000416:	d001      	beq.n	800041c <MX_TIM1_Init+0x60>
  {
    Error_Handler();
 8000418:	f000 f9d4 	bl	80007c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800041c:	2108      	movs	r1, #8
 800041e:	187b      	adds	r3, r7, r1
 8000420:	2280      	movs	r2, #128	@ 0x80
 8000422:	0152      	lsls	r2, r2, #5
 8000424:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000426:	187a      	adds	r2, r7, r1
 8000428:	4b0e      	ldr	r3, [pc, #56]	@ (8000464 <MX_TIM1_Init+0xa8>)
 800042a:	0011      	movs	r1, r2
 800042c:	0018      	movs	r0, r3
 800042e:	f001 fd35 	bl	8001e9c <HAL_TIM_ConfigClockSource>
 8000432:	1e03      	subs	r3, r0, #0
 8000434:	d001      	beq.n	800043a <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 8000436:	f000 f9c5 	bl	80007c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800043a:	003b      	movs	r3, r7
 800043c:	2200      	movs	r2, #0
 800043e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000440:	003b      	movs	r3, r7
 8000442:	2200      	movs	r2, #0
 8000444:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000446:	003a      	movs	r2, r7
 8000448:	4b06      	ldr	r3, [pc, #24]	@ (8000464 <MX_TIM1_Init+0xa8>)
 800044a:	0011      	movs	r1, r2
 800044c:	0018      	movs	r0, r3
 800044e:	f002 f90d 	bl	800266c <HAL_TIMEx_MasterConfigSynchronization>
 8000452:	1e03      	subs	r3, r0, #0
 8000454:	d001      	beq.n	800045a <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8000456:	f000 f9b5 	bl	80007c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800045a:	46c0      	nop			@ (mov r8, r8)
 800045c:	46bd      	mov	sp, r7
 800045e:	b006      	add	sp, #24
 8000460:	bd80      	pop	{r7, pc}
 8000462:	46c0      	nop			@ (mov r8, r8)
 8000464:	2000002c 	.word	0x2000002c
 8000468:	40012c00 	.word	0x40012c00

0800046c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	b08e      	sub	sp, #56	@ 0x38
 8000470:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000472:	2328      	movs	r3, #40	@ 0x28
 8000474:	18fb      	adds	r3, r7, r3
 8000476:	0018      	movs	r0, r3
 8000478:	2310      	movs	r3, #16
 800047a:	001a      	movs	r2, r3
 800047c:	2100      	movs	r1, #0
 800047e:	f002 f957 	bl	8002730 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000482:	2320      	movs	r3, #32
 8000484:	18fb      	adds	r3, r7, r3
 8000486:	0018      	movs	r0, r3
 8000488:	2308      	movs	r3, #8
 800048a:	001a      	movs	r2, r3
 800048c:	2100      	movs	r1, #0
 800048e:	f002 f94f 	bl	8002730 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000492:	1d3b      	adds	r3, r7, #4
 8000494:	0018      	movs	r0, r3
 8000496:	231c      	movs	r3, #28
 8000498:	001a      	movs	r2, r3
 800049a:	2100      	movs	r1, #0
 800049c:	f002 f948 	bl	8002730 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80004a0:	4b30      	ldr	r3, [pc, #192]	@ (8000564 <MX_TIM3_Init+0xf8>)
 80004a2:	4a31      	ldr	r2, [pc, #196]	@ (8000568 <MX_TIM3_Init+0xfc>)
 80004a4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80004a6:	4b2f      	ldr	r3, [pc, #188]	@ (8000564 <MX_TIM3_Init+0xf8>)
 80004a8:	2200      	movs	r2, #0
 80004aa:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004ac:	4b2d      	ldr	r3, [pc, #180]	@ (8000564 <MX_TIM3_Init+0xf8>)
 80004ae:	2200      	movs	r2, #0
 80004b0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 80004b2:	4b2c      	ldr	r3, [pc, #176]	@ (8000564 <MX_TIM3_Init+0xf8>)
 80004b4:	4a2d      	ldr	r2, [pc, #180]	@ (800056c <MX_TIM3_Init+0x100>)
 80004b6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004b8:	4b2a      	ldr	r3, [pc, #168]	@ (8000564 <MX_TIM3_Init+0xf8>)
 80004ba:	2200      	movs	r2, #0
 80004bc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80004be:	4b29      	ldr	r3, [pc, #164]	@ (8000564 <MX_TIM3_Init+0xf8>)
 80004c0:	2280      	movs	r2, #128	@ 0x80
 80004c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80004c4:	4b27      	ldr	r3, [pc, #156]	@ (8000564 <MX_TIM3_Init+0xf8>)
 80004c6:	0018      	movs	r0, r3
 80004c8:	f001 fa18 	bl	80018fc <HAL_TIM_Base_Init>
 80004cc:	1e03      	subs	r3, r0, #0
 80004ce:	d001      	beq.n	80004d4 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80004d0:	f000 f978 	bl	80007c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80004d4:	2128      	movs	r1, #40	@ 0x28
 80004d6:	187b      	adds	r3, r7, r1
 80004d8:	2280      	movs	r2, #128	@ 0x80
 80004da:	0152      	lsls	r2, r2, #5
 80004dc:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80004de:	187a      	adds	r2, r7, r1
 80004e0:	4b20      	ldr	r3, [pc, #128]	@ (8000564 <MX_TIM3_Init+0xf8>)
 80004e2:	0011      	movs	r1, r2
 80004e4:	0018      	movs	r0, r3
 80004e6:	f001 fcd9 	bl	8001e9c <HAL_TIM_ConfigClockSource>
 80004ea:	1e03      	subs	r3, r0, #0
 80004ec:	d001      	beq.n	80004f2 <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 80004ee:	f000 f969 	bl	80007c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80004f2:	4b1c      	ldr	r3, [pc, #112]	@ (8000564 <MX_TIM3_Init+0xf8>)
 80004f4:	0018      	movs	r0, r3
 80004f6:	f001 fac5 	bl	8001a84 <HAL_TIM_PWM_Init>
 80004fa:	1e03      	subs	r3, r0, #0
 80004fc:	d001      	beq.n	8000502 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 80004fe:	f000 f961 	bl	80007c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000502:	2120      	movs	r1, #32
 8000504:	187b      	adds	r3, r7, r1
 8000506:	2200      	movs	r2, #0
 8000508:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800050a:	187b      	adds	r3, r7, r1
 800050c:	2200      	movs	r2, #0
 800050e:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000510:	187a      	adds	r2, r7, r1
 8000512:	4b14      	ldr	r3, [pc, #80]	@ (8000564 <MX_TIM3_Init+0xf8>)
 8000514:	0011      	movs	r1, r2
 8000516:	0018      	movs	r0, r3
 8000518:	f002 f8a8 	bl	800266c <HAL_TIMEx_MasterConfigSynchronization>
 800051c:	1e03      	subs	r3, r0, #0
 800051e:	d001      	beq.n	8000524 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 8000520:	f000 f950 	bl	80007c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000524:	1d3b      	adds	r3, r7, #4
 8000526:	2260      	movs	r2, #96	@ 0x60
 8000528:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 500;
 800052a:	1d3b      	adds	r3, r7, #4
 800052c:	22fa      	movs	r2, #250	@ 0xfa
 800052e:	0052      	lsls	r2, r2, #1
 8000530:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000532:	1d3b      	adds	r3, r7, #4
 8000534:	2200      	movs	r2, #0
 8000536:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000538:	1d3b      	adds	r3, r7, #4
 800053a:	2200      	movs	r2, #0
 800053c:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800053e:	1d39      	adds	r1, r7, #4
 8000540:	4b08      	ldr	r3, [pc, #32]	@ (8000564 <MX_TIM3_Init+0xf8>)
 8000542:	2200      	movs	r2, #0
 8000544:	0018      	movs	r0, r3
 8000546:	f001 fbe3 	bl	8001d10 <HAL_TIM_PWM_ConfigChannel>
 800054a:	1e03      	subs	r3, r0, #0
 800054c:	d001      	beq.n	8000552 <MX_TIM3_Init+0xe6>
  {
    Error_Handler();
 800054e:	f000 f939 	bl	80007c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000552:	4b04      	ldr	r3, [pc, #16]	@ (8000564 <MX_TIM3_Init+0xf8>)
 8000554:	0018      	movs	r0, r3
 8000556:	f000 f9a3 	bl	80008a0 <HAL_TIM_MspPostInit>

}
 800055a:	46c0      	nop			@ (mov r8, r8)
 800055c:	46bd      	mov	sp, r7
 800055e:	b00e      	add	sp, #56	@ 0x38
 8000560:	bd80      	pop	{r7, pc}
 8000562:	46c0      	nop			@ (mov r8, r8)
 8000564:	20000074 	.word	0x20000074
 8000568:	40000400 	.word	0x40000400
 800056c:	000003e7 	.word	0x000003e7

08000570 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000570:	b590      	push	{r4, r7, lr}
 8000572:	b089      	sub	sp, #36	@ 0x24
 8000574:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000576:	240c      	movs	r4, #12
 8000578:	193b      	adds	r3, r7, r4
 800057a:	0018      	movs	r0, r3
 800057c:	2314      	movs	r3, #20
 800057e:	001a      	movs	r2, r3
 8000580:	2100      	movs	r1, #0
 8000582:	f002 f8d5 	bl	8002730 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000586:	4b51      	ldr	r3, [pc, #324]	@ (80006cc <MX_GPIO_Init+0x15c>)
 8000588:	695a      	ldr	r2, [r3, #20]
 800058a:	4b50      	ldr	r3, [pc, #320]	@ (80006cc <MX_GPIO_Init+0x15c>)
 800058c:	2180      	movs	r1, #128	@ 0x80
 800058e:	03c9      	lsls	r1, r1, #15
 8000590:	430a      	orrs	r2, r1
 8000592:	615a      	str	r2, [r3, #20]
 8000594:	4b4d      	ldr	r3, [pc, #308]	@ (80006cc <MX_GPIO_Init+0x15c>)
 8000596:	695a      	ldr	r2, [r3, #20]
 8000598:	2380      	movs	r3, #128	@ 0x80
 800059a:	03db      	lsls	r3, r3, #15
 800059c:	4013      	ands	r3, r2
 800059e:	60bb      	str	r3, [r7, #8]
 80005a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005a2:	4b4a      	ldr	r3, [pc, #296]	@ (80006cc <MX_GPIO_Init+0x15c>)
 80005a4:	695a      	ldr	r2, [r3, #20]
 80005a6:	4b49      	ldr	r3, [pc, #292]	@ (80006cc <MX_GPIO_Init+0x15c>)
 80005a8:	2180      	movs	r1, #128	@ 0x80
 80005aa:	0289      	lsls	r1, r1, #10
 80005ac:	430a      	orrs	r2, r1
 80005ae:	615a      	str	r2, [r3, #20]
 80005b0:	4b46      	ldr	r3, [pc, #280]	@ (80006cc <MX_GPIO_Init+0x15c>)
 80005b2:	695a      	ldr	r2, [r3, #20]
 80005b4:	2380      	movs	r3, #128	@ 0x80
 80005b6:	029b      	lsls	r3, r3, #10
 80005b8:	4013      	ands	r3, r2
 80005ba:	607b      	str	r3, [r7, #4]
 80005bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005be:	4b43      	ldr	r3, [pc, #268]	@ (80006cc <MX_GPIO_Init+0x15c>)
 80005c0:	695a      	ldr	r2, [r3, #20]
 80005c2:	4b42      	ldr	r3, [pc, #264]	@ (80006cc <MX_GPIO_Init+0x15c>)
 80005c4:	2180      	movs	r1, #128	@ 0x80
 80005c6:	02c9      	lsls	r1, r1, #11
 80005c8:	430a      	orrs	r2, r1
 80005ca:	615a      	str	r2, [r3, #20]
 80005cc:	4b3f      	ldr	r3, [pc, #252]	@ (80006cc <MX_GPIO_Init+0x15c>)
 80005ce:	695a      	ldr	r2, [r3, #20]
 80005d0:	2380      	movs	r3, #128	@ 0x80
 80005d2:	02db      	lsls	r3, r3, #11
 80005d4:	4013      	ands	r3, r2
 80005d6:	603b      	str	r3, [r7, #0]
 80005d8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, LED_Blue_Pin|LED_Red_Pin, GPIO_PIN_RESET);
 80005da:	4b3d      	ldr	r3, [pc, #244]	@ (80006d0 <MX_GPIO_Init+0x160>)
 80005dc:	2200      	movs	r2, #0
 80005de:	2103      	movs	r1, #3
 80005e0:	0018      	movs	r0, r3
 80005e2:	f000 fcf8 	bl	8000fd6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED1_Pin|LED2_Pin|DispD_Pin|Display1_Pin
 80005e6:	493b      	ldr	r1, [pc, #236]	@ (80006d4 <MX_GPIO_Init+0x164>)
 80005e8:	2390      	movs	r3, #144	@ 0x90
 80005ea:	05db      	lsls	r3, r3, #23
 80005ec:	2200      	movs	r2, #0
 80005ee:	0018      	movs	r0, r3
 80005f0:	f000 fcf1 	bl	8000fd6 <HAL_GPIO_WritePin>
                          |Display2_Pin|DisplayL_Pin|Display3_Pin|Display4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DispDP_Pin|DispE_Pin|DispF_Pin|DispC_Pin
 80005f4:	4b38      	ldr	r3, [pc, #224]	@ (80006d8 <MX_GPIO_Init+0x168>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	21fb      	movs	r1, #251	@ 0xfb
 80005fa:	0018      	movs	r0, r3
 80005fc:	f000 fceb 	bl	8000fd6 <HAL_GPIO_WritePin>
                          |DispA_Pin|DispG_Pin|DispB_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LED_Blue_Pin LED_Red_Pin */
  GPIO_InitStruct.Pin = LED_Blue_Pin|LED_Red_Pin;
 8000600:	193b      	adds	r3, r7, r4
 8000602:	2203      	movs	r2, #3
 8000604:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000606:	193b      	adds	r3, r7, r4
 8000608:	2201      	movs	r2, #1
 800060a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800060c:	193b      	adds	r3, r7, r4
 800060e:	2200      	movs	r2, #0
 8000610:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000612:	193b      	adds	r3, r7, r4
 8000614:	2200      	movs	r2, #0
 8000616:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000618:	193b      	adds	r3, r7, r4
 800061a:	4a2d      	ldr	r2, [pc, #180]	@ (80006d0 <MX_GPIO_Init+0x160>)
 800061c:	0019      	movs	r1, r3
 800061e:	0010      	movs	r0, r2
 8000620:	f000 fb4c 	bl	8000cbc <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED2_Pin DispD_Pin Display1_Pin
                           Display2_Pin DisplayL_Pin Display3_Pin Display4_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|DispD_Pin|Display1_Pin
 8000624:	193b      	adds	r3, r7, r4
 8000626:	4a2b      	ldr	r2, [pc, #172]	@ (80006d4 <MX_GPIO_Init+0x164>)
 8000628:	601a      	str	r2, [r3, #0]
                          |Display2_Pin|DisplayL_Pin|Display3_Pin|Display4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800062a:	193b      	adds	r3, r7, r4
 800062c:	2201      	movs	r2, #1
 800062e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000630:	193b      	adds	r3, r7, r4
 8000632:	2200      	movs	r2, #0
 8000634:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000636:	193b      	adds	r3, r7, r4
 8000638:	2200      	movs	r2, #0
 800063a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800063c:	193a      	adds	r2, r7, r4
 800063e:	2390      	movs	r3, #144	@ 0x90
 8000640:	05db      	lsls	r3, r3, #23
 8000642:	0011      	movs	r1, r2
 8000644:	0018      	movs	r0, r3
 8000646:	f000 fb39 	bl	8000cbc <HAL_GPIO_Init>

  /*Configure GPIO pin : B_Button_EXTI_Pin */
  GPIO_InitStruct.Pin = B_Button_EXTI_Pin;
 800064a:	193b      	adds	r3, r7, r4
 800064c:	2220      	movs	r2, #32
 800064e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000650:	193b      	adds	r3, r7, r4
 8000652:	2284      	movs	r2, #132	@ 0x84
 8000654:	0392      	lsls	r2, r2, #14
 8000656:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000658:	193b      	adds	r3, r7, r4
 800065a:	2202      	movs	r2, #2
 800065c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B_Button_EXTI_GPIO_Port, &GPIO_InitStruct);
 800065e:	193a      	adds	r2, r7, r4
 8000660:	2390      	movs	r3, #144	@ 0x90
 8000662:	05db      	lsls	r3, r3, #23
 8000664:	0011      	movs	r1, r2
 8000666:	0018      	movs	r0, r3
 8000668:	f000 fb28 	bl	8000cbc <HAL_GPIO_Init>

  /*Configure GPIO pin : A_Button_EXTI_Pin */
  GPIO_InitStruct.Pin = A_Button_EXTI_Pin;
 800066c:	193b      	adds	r3, r7, r4
 800066e:	2280      	movs	r2, #128	@ 0x80
 8000670:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_FALLING;
 8000672:	193b      	adds	r3, r7, r4
 8000674:	2288      	movs	r2, #136	@ 0x88
 8000676:	0392      	lsls	r2, r2, #14
 8000678:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800067a:	193b      	adds	r3, r7, r4
 800067c:	2202      	movs	r2, #2
 800067e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(A_Button_EXTI_GPIO_Port, &GPIO_InitStruct);
 8000680:	193a      	adds	r2, r7, r4
 8000682:	2390      	movs	r3, #144	@ 0x90
 8000684:	05db      	lsls	r3, r3, #23
 8000686:	0011      	movs	r1, r2
 8000688:	0018      	movs	r0, r3
 800068a:	f000 fb17 	bl	8000cbc <HAL_GPIO_Init>

  /*Configure GPIO pins : DispDP_Pin DispE_Pin DispF_Pin DispC_Pin
                           DispA_Pin DispG_Pin DispB_Pin */
  GPIO_InitStruct.Pin = DispDP_Pin|DispE_Pin|DispF_Pin|DispC_Pin
 800068e:	0021      	movs	r1, r4
 8000690:	187b      	adds	r3, r7, r1
 8000692:	22fb      	movs	r2, #251	@ 0xfb
 8000694:	601a      	str	r2, [r3, #0]
                          |DispA_Pin|DispG_Pin|DispB_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000696:	187b      	adds	r3, r7, r1
 8000698:	2201      	movs	r2, #1
 800069a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800069c:	187b      	adds	r3, r7, r1
 800069e:	2200      	movs	r2, #0
 80006a0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006a2:	187b      	adds	r3, r7, r1
 80006a4:	2200      	movs	r2, #0
 80006a6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006a8:	187b      	adds	r3, r7, r1
 80006aa:	4a0b      	ldr	r2, [pc, #44]	@ (80006d8 <MX_GPIO_Init+0x168>)
 80006ac:	0019      	movs	r1, r3
 80006ae:	0010      	movs	r0, r2
 80006b0:	f000 fb04 	bl	8000cbc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 80006b4:	2200      	movs	r2, #0
 80006b6:	2100      	movs	r1, #0
 80006b8:	2007      	movs	r0, #7
 80006ba:	f000 facd 	bl	8000c58 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80006be:	2007      	movs	r0, #7
 80006c0:	f000 fadf 	bl	8000c82 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80006c4:	46c0      	nop			@ (mov r8, r8)
 80006c6:	46bd      	mov	sp, r7
 80006c8:	b009      	add	sp, #36	@ 0x24
 80006ca:	bd90      	pop	{r4, r7, pc}
 80006cc:	40021000 	.word	0x40021000
 80006d0:	48001400 	.word	0x48001400
 80006d4:	00009f18 	.word	0x00009f18
 80006d8:	48000400 	.word	0x48000400

080006dc <HAL_GPIO_EXTI_Callback>:
	if (frequency == 0) return 0;
	return ((TIM_FREQ/(1000*frequency)));
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b082      	sub	sp, #8
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	0002      	movs	r2, r0
 80006e4:	1dbb      	adds	r3, r7, #6
 80006e6:	801a      	strh	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
	if(GPIO_Pin == A_Button_EXTI_Pin && state == true){
 80006e8:	1dbb      	adds	r3, r7, #6
 80006ea:	881b      	ldrh	r3, [r3, #0]
 80006ec:	2b80      	cmp	r3, #128	@ 0x80
 80006ee:	d10b      	bne.n	8000708 <HAL_GPIO_EXTI_Callback+0x2c>
 80006f0:	4b10      	ldr	r3, [pc, #64]	@ (8000734 <HAL_GPIO_EXTI_Callback+0x58>)
 80006f2:	781b      	ldrb	r3, [r3, #0]
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d007      	beq.n	8000708 <HAL_GPIO_EXTI_Callback+0x2c>
		HAL_TIM_Base_Start_IT(&htim1);
 80006f8:	4b0f      	ldr	r3, [pc, #60]	@ (8000738 <HAL_GPIO_EXTI_Callback+0x5c>)
 80006fa:	0018      	movs	r0, r3
 80006fc:	f001 f94e 	bl	800199c <HAL_TIM_Base_Start_IT>
		state = false;
 8000700:	4b0c      	ldr	r3, [pc, #48]	@ (8000734 <HAL_GPIO_EXTI_Callback+0x58>)
 8000702:	2200      	movs	r2, #0
 8000704:	701a      	strb	r2, [r3, #0]
 8000706:	e011      	b.n	800072c <HAL_GPIO_EXTI_Callback+0x50>
	}

	else if(GPIO_Pin == B_Button_EXTI_Pin && state == true){
 8000708:	1dbb      	adds	r3, r7, #6
 800070a:	881b      	ldrh	r3, [r3, #0]
 800070c:	2b20      	cmp	r3, #32
 800070e:	d10b      	bne.n	8000728 <HAL_GPIO_EXTI_Callback+0x4c>
 8000710:	4b08      	ldr	r3, [pc, #32]	@ (8000734 <HAL_GPIO_EXTI_Callback+0x58>)
 8000712:	781b      	ldrb	r3, [r3, #0]
 8000714:	2b00      	cmp	r3, #0
 8000716:	d007      	beq.n	8000728 <HAL_GPIO_EXTI_Callback+0x4c>
		HAL_TIM_Base_Start_IT(&htim1);
 8000718:	4b07      	ldr	r3, [pc, #28]	@ (8000738 <HAL_GPIO_EXTI_Callback+0x5c>)
 800071a:	0018      	movs	r0, r3
 800071c:	f001 f93e 	bl	800199c <HAL_TIM_Base_Start_IT>
		state = false;
 8000720:	4b04      	ldr	r3, [pc, #16]	@ (8000734 <HAL_GPIO_EXTI_Callback+0x58>)
 8000722:	2200      	movs	r2, #0
 8000724:	701a      	strb	r2, [r3, #0]
 8000726:	e001      	b.n	800072c <HAL_GPIO_EXTI_Callback+0x50>
	}

	else{
		__NOP();
 8000728:	46c0      	nop			@ (mov r8, r8)
	}

}
 800072a:	46c0      	nop			@ (mov r8, r8)
 800072c:	46c0      	nop			@ (mov r8, r8)
 800072e:	46bd      	mov	sp, r7
 8000730:	b002      	add	sp, #8
 8000732:	bd80      	pop	{r7, pc}
 8000734:	20000000 	.word	0x20000000
 8000738:	2000002c 	.word	0x2000002c

0800073c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b082      	sub	sp, #8
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
	if(HAL_GPIO_ReadPin(B_Button_EXTI_GPIO_Port, B_Button_EXTI_Pin) == GPIO_PIN_RESET){
 8000744:	2390      	movs	r3, #144	@ 0x90
 8000746:	05db      	lsls	r3, r3, #23
 8000748:	2120      	movs	r1, #32
 800074a:	0018      	movs	r0, r3
 800074c:	f000 fc26 	bl	8000f9c <HAL_GPIO_ReadPin>
 8000750:	1e03      	subs	r3, r0, #0
 8000752:	d111      	bne.n	8000778 <HAL_TIM_PeriodElapsedCallback+0x3c>
		HAL_GPIO_TogglePin(LED_Blue_GPIO_Port, LED_Red_Pin);
 8000754:	4b18      	ldr	r3, [pc, #96]	@ (80007b8 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000756:	2102      	movs	r1, #2
 8000758:	0018      	movs	r0, r3
 800075a:	f000 fc59 	bl	8001010 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(LED_Blue_GPIO_Port, LED_Blue_Pin);
 800075e:	4b16      	ldr	r3, [pc, #88]	@ (80007b8 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000760:	2101      	movs	r1, #1
 8000762:	0018      	movs	r0, r3
 8000764:	f000 fc54 	bl	8001010 <HAL_GPIO_TogglePin>
		state = true;
 8000768:	4b14      	ldr	r3, [pc, #80]	@ (80007bc <HAL_TIM_PeriodElapsedCallback+0x80>)
 800076a:	2201      	movs	r2, #1
 800076c:	701a      	strb	r2, [r3, #0]
		HAL_TIM_Base_Stop_IT(&htim1);
 800076e:	4b14      	ldr	r3, [pc, #80]	@ (80007c0 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000770:	0018      	movs	r0, r3
 8000772:	f001 f959 	bl	8001a28 <HAL_TIM_Base_Stop_IT>
		HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
		HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
		state = true;
		HAL_TIM_Base_Stop_IT(&htim1);
	}
}
 8000776:	e01a      	b.n	80007ae <HAL_TIM_PeriodElapsedCallback+0x72>
	else if(HAL_GPIO_ReadPin(A_Button_EXTI_GPIO_Port, A_Button_EXTI_Pin) == GPIO_PIN_RESET){
 8000778:	2390      	movs	r3, #144	@ 0x90
 800077a:	05db      	lsls	r3, r3, #23
 800077c:	2180      	movs	r1, #128	@ 0x80
 800077e:	0018      	movs	r0, r3
 8000780:	f000 fc0c 	bl	8000f9c <HAL_GPIO_ReadPin>
 8000784:	1e03      	subs	r3, r0, #0
 8000786:	d112      	bne.n	80007ae <HAL_TIM_PeriodElapsedCallback+0x72>
		HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8000788:	2390      	movs	r3, #144	@ 0x90
 800078a:	05db      	lsls	r3, r3, #23
 800078c:	2108      	movs	r1, #8
 800078e:	0018      	movs	r0, r3
 8000790:	f000 fc3e 	bl	8001010 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8000794:	2390      	movs	r3, #144	@ 0x90
 8000796:	05db      	lsls	r3, r3, #23
 8000798:	2110      	movs	r1, #16
 800079a:	0018      	movs	r0, r3
 800079c:	f000 fc38 	bl	8001010 <HAL_GPIO_TogglePin>
		state = true;
 80007a0:	4b06      	ldr	r3, [pc, #24]	@ (80007bc <HAL_TIM_PeriodElapsedCallback+0x80>)
 80007a2:	2201      	movs	r2, #1
 80007a4:	701a      	strb	r2, [r3, #0]
		HAL_TIM_Base_Stop_IT(&htim1);
 80007a6:	4b06      	ldr	r3, [pc, #24]	@ (80007c0 <HAL_TIM_PeriodElapsedCallback+0x84>)
 80007a8:	0018      	movs	r0, r3
 80007aa:	f001 f93d 	bl	8001a28 <HAL_TIM_Base_Stop_IT>
}
 80007ae:	46c0      	nop			@ (mov r8, r8)
 80007b0:	46bd      	mov	sp, r7
 80007b2:	b002      	add	sp, #8
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	46c0      	nop			@ (mov r8, r8)
 80007b8:	48001400 	.word	0x48001400
 80007bc:	20000000 	.word	0x20000000
 80007c0:	2000002c 	.word	0x2000002c

080007c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007c8:	b672      	cpsid	i
}
 80007ca:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007cc:	46c0      	nop			@ (mov r8, r8)
 80007ce:	e7fd      	b.n	80007cc <Error_Handler+0x8>

080007d0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b082      	sub	sp, #8
 80007d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007d6:	4b0f      	ldr	r3, [pc, #60]	@ (8000814 <HAL_MspInit+0x44>)
 80007d8:	699a      	ldr	r2, [r3, #24]
 80007da:	4b0e      	ldr	r3, [pc, #56]	@ (8000814 <HAL_MspInit+0x44>)
 80007dc:	2101      	movs	r1, #1
 80007de:	430a      	orrs	r2, r1
 80007e0:	619a      	str	r2, [r3, #24]
 80007e2:	4b0c      	ldr	r3, [pc, #48]	@ (8000814 <HAL_MspInit+0x44>)
 80007e4:	699b      	ldr	r3, [r3, #24]
 80007e6:	2201      	movs	r2, #1
 80007e8:	4013      	ands	r3, r2
 80007ea:	607b      	str	r3, [r7, #4]
 80007ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007ee:	4b09      	ldr	r3, [pc, #36]	@ (8000814 <HAL_MspInit+0x44>)
 80007f0:	69da      	ldr	r2, [r3, #28]
 80007f2:	4b08      	ldr	r3, [pc, #32]	@ (8000814 <HAL_MspInit+0x44>)
 80007f4:	2180      	movs	r1, #128	@ 0x80
 80007f6:	0549      	lsls	r1, r1, #21
 80007f8:	430a      	orrs	r2, r1
 80007fa:	61da      	str	r2, [r3, #28]
 80007fc:	4b05      	ldr	r3, [pc, #20]	@ (8000814 <HAL_MspInit+0x44>)
 80007fe:	69da      	ldr	r2, [r3, #28]
 8000800:	2380      	movs	r3, #128	@ 0x80
 8000802:	055b      	lsls	r3, r3, #21
 8000804:	4013      	ands	r3, r2
 8000806:	603b      	str	r3, [r7, #0]
 8000808:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800080a:	46c0      	nop			@ (mov r8, r8)
 800080c:	46bd      	mov	sp, r7
 800080e:	b002      	add	sp, #8
 8000810:	bd80      	pop	{r7, pc}
 8000812:	46c0      	nop			@ (mov r8, r8)
 8000814:	40021000 	.word	0x40021000

08000818 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b084      	sub	sp, #16
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	4a1b      	ldr	r2, [pc, #108]	@ (8000894 <HAL_TIM_Base_MspInit+0x7c>)
 8000826:	4293      	cmp	r3, r2
 8000828:	d11e      	bne.n	8000868 <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800082a:	4b1b      	ldr	r3, [pc, #108]	@ (8000898 <HAL_TIM_Base_MspInit+0x80>)
 800082c:	699a      	ldr	r2, [r3, #24]
 800082e:	4b1a      	ldr	r3, [pc, #104]	@ (8000898 <HAL_TIM_Base_MspInit+0x80>)
 8000830:	2180      	movs	r1, #128	@ 0x80
 8000832:	0109      	lsls	r1, r1, #4
 8000834:	430a      	orrs	r2, r1
 8000836:	619a      	str	r2, [r3, #24]
 8000838:	4b17      	ldr	r3, [pc, #92]	@ (8000898 <HAL_TIM_Base_MspInit+0x80>)
 800083a:	699a      	ldr	r2, [r3, #24]
 800083c:	2380      	movs	r3, #128	@ 0x80
 800083e:	011b      	lsls	r3, r3, #4
 8000840:	4013      	ands	r3, r2
 8000842:	60fb      	str	r3, [r7, #12]
 8000844:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 0, 0);
 8000846:	2200      	movs	r2, #0
 8000848:	2100      	movs	r1, #0
 800084a:	200d      	movs	r0, #13
 800084c:	f000 fa04 	bl	8000c58 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 8000850:	200d      	movs	r0, #13
 8000852:	f000 fa16 	bl	8000c82 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8000856:	2200      	movs	r2, #0
 8000858:	2100      	movs	r1, #0
 800085a:	200e      	movs	r0, #14
 800085c:	f000 f9fc 	bl	8000c58 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8000860:	200e      	movs	r0, #14
 8000862:	f000 fa0e 	bl	8000c82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000866:	e010      	b.n	800088a <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM3)
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	4a0b      	ldr	r2, [pc, #44]	@ (800089c <HAL_TIM_Base_MspInit+0x84>)
 800086e:	4293      	cmp	r3, r2
 8000870:	d10b      	bne.n	800088a <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000872:	4b09      	ldr	r3, [pc, #36]	@ (8000898 <HAL_TIM_Base_MspInit+0x80>)
 8000874:	69da      	ldr	r2, [r3, #28]
 8000876:	4b08      	ldr	r3, [pc, #32]	@ (8000898 <HAL_TIM_Base_MspInit+0x80>)
 8000878:	2102      	movs	r1, #2
 800087a:	430a      	orrs	r2, r1
 800087c:	61da      	str	r2, [r3, #28]
 800087e:	4b06      	ldr	r3, [pc, #24]	@ (8000898 <HAL_TIM_Base_MspInit+0x80>)
 8000880:	69db      	ldr	r3, [r3, #28]
 8000882:	2202      	movs	r2, #2
 8000884:	4013      	ands	r3, r2
 8000886:	60bb      	str	r3, [r7, #8]
 8000888:	68bb      	ldr	r3, [r7, #8]
}
 800088a:	46c0      	nop			@ (mov r8, r8)
 800088c:	46bd      	mov	sp, r7
 800088e:	b004      	add	sp, #16
 8000890:	bd80      	pop	{r7, pc}
 8000892:	46c0      	nop			@ (mov r8, r8)
 8000894:	40012c00 	.word	0x40012c00
 8000898:	40021000 	.word	0x40021000
 800089c:	40000400 	.word	0x40000400

080008a0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80008a0:	b590      	push	{r4, r7, lr}
 80008a2:	b089      	sub	sp, #36	@ 0x24
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a8:	240c      	movs	r4, #12
 80008aa:	193b      	adds	r3, r7, r4
 80008ac:	0018      	movs	r0, r3
 80008ae:	2314      	movs	r3, #20
 80008b0:	001a      	movs	r2, r3
 80008b2:	2100      	movs	r1, #0
 80008b4:	f001 ff3c 	bl	8002730 <memset>
  if(htim->Instance==TIM3)
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	4a15      	ldr	r2, [pc, #84]	@ (8000914 <HAL_TIM_MspPostInit+0x74>)
 80008be:	4293      	cmp	r3, r2
 80008c0:	d124      	bne.n	800090c <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008c2:	4b15      	ldr	r3, [pc, #84]	@ (8000918 <HAL_TIM_MspPostInit+0x78>)
 80008c4:	695a      	ldr	r2, [r3, #20]
 80008c6:	4b14      	ldr	r3, [pc, #80]	@ (8000918 <HAL_TIM_MspPostInit+0x78>)
 80008c8:	2180      	movs	r1, #128	@ 0x80
 80008ca:	0289      	lsls	r1, r1, #10
 80008cc:	430a      	orrs	r2, r1
 80008ce:	615a      	str	r2, [r3, #20]
 80008d0:	4b11      	ldr	r3, [pc, #68]	@ (8000918 <HAL_TIM_MspPostInit+0x78>)
 80008d2:	695a      	ldr	r2, [r3, #20]
 80008d4:	2380      	movs	r3, #128	@ 0x80
 80008d6:	029b      	lsls	r3, r3, #10
 80008d8:	4013      	ands	r3, r2
 80008da:	60bb      	str	r3, [r7, #8]
 80008dc:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = Timer3_PWM_Pin;
 80008de:	0021      	movs	r1, r4
 80008e0:	187b      	adds	r3, r7, r1
 80008e2:	2240      	movs	r2, #64	@ 0x40
 80008e4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008e6:	187b      	adds	r3, r7, r1
 80008e8:	2202      	movs	r2, #2
 80008ea:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ec:	187b      	adds	r3, r7, r1
 80008ee:	2200      	movs	r2, #0
 80008f0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f2:	187b      	adds	r3, r7, r1
 80008f4:	2200      	movs	r2, #0
 80008f6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 80008f8:	187b      	adds	r3, r7, r1
 80008fa:	2201      	movs	r2, #1
 80008fc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(Timer3_PWM_GPIO_Port, &GPIO_InitStruct);
 80008fe:	187a      	adds	r2, r7, r1
 8000900:	2390      	movs	r3, #144	@ 0x90
 8000902:	05db      	lsls	r3, r3, #23
 8000904:	0011      	movs	r1, r2
 8000906:	0018      	movs	r0, r3
 8000908:	f000 f9d8 	bl	8000cbc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800090c:	46c0      	nop			@ (mov r8, r8)
 800090e:	46bd      	mov	sp, r7
 8000910:	b009      	add	sp, #36	@ 0x24
 8000912:	bd90      	pop	{r4, r7, pc}
 8000914:	40000400 	.word	0x40000400
 8000918:	40021000 	.word	0x40021000

0800091c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000920:	46c0      	nop			@ (mov r8, r8)
 8000922:	e7fd      	b.n	8000920 <NMI_Handler+0x4>

08000924 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000928:	46c0      	nop			@ (mov r8, r8)
 800092a:	e7fd      	b.n	8000928 <HardFault_Handler+0x4>

0800092c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000930:	46c0      	nop			@ (mov r8, r8)
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}

08000936 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000936:	b580      	push	{r7, lr}
 8000938:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800093a:	46c0      	nop			@ (mov r8, r8)
 800093c:	46bd      	mov	sp, r7
 800093e:	bd80      	pop	{r7, pc}

08000940 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000944:	f000 f89c 	bl	8000a80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000948:	46c0      	nop			@ (mov r8, r8)
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}

0800094e <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 800094e:	b580      	push	{r7, lr}
 8000950:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B_Button_EXTI_Pin);
 8000952:	2020      	movs	r0, #32
 8000954:	f000 fb78 	bl	8001048 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8000958:	46c0      	nop			@ (mov r8, r8)
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
	...

08000960 <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000964:	4b03      	ldr	r3, [pc, #12]	@ (8000974 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 8000966:	0018      	movs	r0, r3
 8000968:	f001 f8e4 	bl	8001b34 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 800096c:	46c0      	nop			@ (mov r8, r8)
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}
 8000972:	46c0      	nop			@ (mov r8, r8)
 8000974:	2000002c 	.word	0x2000002c

08000978 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800097c:	4b03      	ldr	r3, [pc, #12]	@ (800098c <TIM1_CC_IRQHandler+0x14>)
 800097e:	0018      	movs	r0, r3
 8000980:	f001 f8d8 	bl	8001b34 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8000984:	46c0      	nop			@ (mov r8, r8)
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
 800098a:	46c0      	nop			@ (mov r8, r8)
 800098c:	2000002c 	.word	0x2000002c

08000990 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000994:	46c0      	nop			@ (mov r8, r8)
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
	...

0800099c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800099c:	480d      	ldr	r0, [pc, #52]	@ (80009d4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800099e:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80009a0:	f7ff fff6 	bl	8000990 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009a4:	480c      	ldr	r0, [pc, #48]	@ (80009d8 <LoopForever+0x6>)
  ldr r1, =_edata
 80009a6:	490d      	ldr	r1, [pc, #52]	@ (80009dc <LoopForever+0xa>)
  ldr r2, =_sidata
 80009a8:	4a0d      	ldr	r2, [pc, #52]	@ (80009e0 <LoopForever+0xe>)
  movs r3, #0
 80009aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009ac:	e002      	b.n	80009b4 <LoopCopyDataInit>

080009ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009b2:	3304      	adds	r3, #4

080009b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009b8:	d3f9      	bcc.n	80009ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009ba:	4a0a      	ldr	r2, [pc, #40]	@ (80009e4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80009bc:	4c0a      	ldr	r4, [pc, #40]	@ (80009e8 <LoopForever+0x16>)
  movs r3, #0
 80009be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009c0:	e001      	b.n	80009c6 <LoopFillZerobss>

080009c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009c4:	3204      	adds	r2, #4

080009c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009c8:	d3fb      	bcc.n	80009c2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80009ca:	f001 feb9 	bl	8002740 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80009ce:	f7ff fc27 	bl	8000220 <main>

080009d2 <LoopForever>:

LoopForever:
    b LoopForever
 80009d2:	e7fe      	b.n	80009d2 <LoopForever>
  ldr   r0, =_estack
 80009d4:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 80009d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009dc:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80009e0:	080027d8 	.word	0x080027d8
  ldr r2, =_sbss
 80009e4:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80009e8:	200000c0 	.word	0x200000c0

080009ec <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80009ec:	e7fe      	b.n	80009ec <ADC1_IRQHandler>
	...

080009f0 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009f4:	4b07      	ldr	r3, [pc, #28]	@ (8000a14 <HAL_Init+0x24>)
 80009f6:	681a      	ldr	r2, [r3, #0]
 80009f8:	4b06      	ldr	r3, [pc, #24]	@ (8000a14 <HAL_Init+0x24>)
 80009fa:	2110      	movs	r1, #16
 80009fc:	430a      	orrs	r2, r1
 80009fe:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000a00:	2003      	movs	r0, #3
 8000a02:	f000 f809 	bl	8000a18 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a06:	f7ff fee3 	bl	80007d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a0a:	2300      	movs	r3, #0
}
 8000a0c:	0018      	movs	r0, r3
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	46c0      	nop			@ (mov r8, r8)
 8000a14:	40022000 	.word	0x40022000

08000a18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a18:	b590      	push	{r4, r7, lr}
 8000a1a:	b083      	sub	sp, #12
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a20:	4b14      	ldr	r3, [pc, #80]	@ (8000a74 <HAL_InitTick+0x5c>)
 8000a22:	681c      	ldr	r4, [r3, #0]
 8000a24:	4b14      	ldr	r3, [pc, #80]	@ (8000a78 <HAL_InitTick+0x60>)
 8000a26:	781b      	ldrb	r3, [r3, #0]
 8000a28:	0019      	movs	r1, r3
 8000a2a:	23fa      	movs	r3, #250	@ 0xfa
 8000a2c:	0098      	lsls	r0, r3, #2
 8000a2e:	f7ff fb6b 	bl	8000108 <__udivsi3>
 8000a32:	0003      	movs	r3, r0
 8000a34:	0019      	movs	r1, r3
 8000a36:	0020      	movs	r0, r4
 8000a38:	f7ff fb66 	bl	8000108 <__udivsi3>
 8000a3c:	0003      	movs	r3, r0
 8000a3e:	0018      	movs	r0, r3
 8000a40:	f000 f92f 	bl	8000ca2 <HAL_SYSTICK_Config>
 8000a44:	1e03      	subs	r3, r0, #0
 8000a46:	d001      	beq.n	8000a4c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000a48:	2301      	movs	r3, #1
 8000a4a:	e00f      	b.n	8000a6c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	2b03      	cmp	r3, #3
 8000a50:	d80b      	bhi.n	8000a6a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a52:	6879      	ldr	r1, [r7, #4]
 8000a54:	2301      	movs	r3, #1
 8000a56:	425b      	negs	r3, r3
 8000a58:	2200      	movs	r2, #0
 8000a5a:	0018      	movs	r0, r3
 8000a5c:	f000 f8fc 	bl	8000c58 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a60:	4b06      	ldr	r3, [pc, #24]	@ (8000a7c <HAL_InitTick+0x64>)
 8000a62:	687a      	ldr	r2, [r7, #4]
 8000a64:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000a66:	2300      	movs	r3, #0
 8000a68:	e000      	b.n	8000a6c <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000a6a:	2301      	movs	r3, #1
}
 8000a6c:	0018      	movs	r0, r3
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	b003      	add	sp, #12
 8000a72:	bd90      	pop	{r4, r7, pc}
 8000a74:	20000004 	.word	0x20000004
 8000a78:	2000000c 	.word	0x2000000c
 8000a7c:	20000008 	.word	0x20000008

08000a80 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a84:	4b05      	ldr	r3, [pc, #20]	@ (8000a9c <HAL_IncTick+0x1c>)
 8000a86:	781b      	ldrb	r3, [r3, #0]
 8000a88:	001a      	movs	r2, r3
 8000a8a:	4b05      	ldr	r3, [pc, #20]	@ (8000aa0 <HAL_IncTick+0x20>)
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	18d2      	adds	r2, r2, r3
 8000a90:	4b03      	ldr	r3, [pc, #12]	@ (8000aa0 <HAL_IncTick+0x20>)
 8000a92:	601a      	str	r2, [r3, #0]
}
 8000a94:	46c0      	nop			@ (mov r8, r8)
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	46c0      	nop			@ (mov r8, r8)
 8000a9c:	2000000c 	.word	0x2000000c
 8000aa0:	200000bc 	.word	0x200000bc

08000aa4 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	af00      	add	r7, sp, #0
  return uwTick;
 8000aa8:	4b02      	ldr	r3, [pc, #8]	@ (8000ab4 <HAL_GetTick+0x10>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
}
 8000aac:	0018      	movs	r0, r3
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	46c0      	nop			@ (mov r8, r8)
 8000ab4:	200000bc 	.word	0x200000bc

08000ab8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b084      	sub	sp, #16
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ac0:	f7ff fff0 	bl	8000aa4 <HAL_GetTick>
 8000ac4:	0003      	movs	r3, r0
 8000ac6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000acc:	68fb      	ldr	r3, [r7, #12]
 8000ace:	3301      	adds	r3, #1
 8000ad0:	d005      	beq.n	8000ade <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ad2:	4b0a      	ldr	r3, [pc, #40]	@ (8000afc <HAL_Delay+0x44>)
 8000ad4:	781b      	ldrb	r3, [r3, #0]
 8000ad6:	001a      	movs	r2, r3
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	189b      	adds	r3, r3, r2
 8000adc:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000ade:	46c0      	nop			@ (mov r8, r8)
 8000ae0:	f7ff ffe0 	bl	8000aa4 <HAL_GetTick>
 8000ae4:	0002      	movs	r2, r0
 8000ae6:	68bb      	ldr	r3, [r7, #8]
 8000ae8:	1ad3      	subs	r3, r2, r3
 8000aea:	68fa      	ldr	r2, [r7, #12]
 8000aec:	429a      	cmp	r2, r3
 8000aee:	d8f7      	bhi.n	8000ae0 <HAL_Delay+0x28>
  {
  }
}
 8000af0:	46c0      	nop			@ (mov r8, r8)
 8000af2:	46c0      	nop			@ (mov r8, r8)
 8000af4:	46bd      	mov	sp, r7
 8000af6:	b004      	add	sp, #16
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	46c0      	nop			@ (mov r8, r8)
 8000afc:	2000000c 	.word	0x2000000c

08000b00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b082      	sub	sp, #8
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	0002      	movs	r2, r0
 8000b08:	1dfb      	adds	r3, r7, #7
 8000b0a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000b0c:	1dfb      	adds	r3, r7, #7
 8000b0e:	781b      	ldrb	r3, [r3, #0]
 8000b10:	2b7f      	cmp	r3, #127	@ 0x7f
 8000b12:	d809      	bhi.n	8000b28 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b14:	1dfb      	adds	r3, r7, #7
 8000b16:	781b      	ldrb	r3, [r3, #0]
 8000b18:	001a      	movs	r2, r3
 8000b1a:	231f      	movs	r3, #31
 8000b1c:	401a      	ands	r2, r3
 8000b1e:	4b04      	ldr	r3, [pc, #16]	@ (8000b30 <__NVIC_EnableIRQ+0x30>)
 8000b20:	2101      	movs	r1, #1
 8000b22:	4091      	lsls	r1, r2
 8000b24:	000a      	movs	r2, r1
 8000b26:	601a      	str	r2, [r3, #0]
  }
}
 8000b28:	46c0      	nop			@ (mov r8, r8)
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	b002      	add	sp, #8
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	e000e100 	.word	0xe000e100

08000b34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b34:	b590      	push	{r4, r7, lr}
 8000b36:	b083      	sub	sp, #12
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	0002      	movs	r2, r0
 8000b3c:	6039      	str	r1, [r7, #0]
 8000b3e:	1dfb      	adds	r3, r7, #7
 8000b40:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000b42:	1dfb      	adds	r3, r7, #7
 8000b44:	781b      	ldrb	r3, [r3, #0]
 8000b46:	2b7f      	cmp	r3, #127	@ 0x7f
 8000b48:	d828      	bhi.n	8000b9c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b4a:	4a2f      	ldr	r2, [pc, #188]	@ (8000c08 <__NVIC_SetPriority+0xd4>)
 8000b4c:	1dfb      	adds	r3, r7, #7
 8000b4e:	781b      	ldrb	r3, [r3, #0]
 8000b50:	b25b      	sxtb	r3, r3
 8000b52:	089b      	lsrs	r3, r3, #2
 8000b54:	33c0      	adds	r3, #192	@ 0xc0
 8000b56:	009b      	lsls	r3, r3, #2
 8000b58:	589b      	ldr	r3, [r3, r2]
 8000b5a:	1dfa      	adds	r2, r7, #7
 8000b5c:	7812      	ldrb	r2, [r2, #0]
 8000b5e:	0011      	movs	r1, r2
 8000b60:	2203      	movs	r2, #3
 8000b62:	400a      	ands	r2, r1
 8000b64:	00d2      	lsls	r2, r2, #3
 8000b66:	21ff      	movs	r1, #255	@ 0xff
 8000b68:	4091      	lsls	r1, r2
 8000b6a:	000a      	movs	r2, r1
 8000b6c:	43d2      	mvns	r2, r2
 8000b6e:	401a      	ands	r2, r3
 8000b70:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000b72:	683b      	ldr	r3, [r7, #0]
 8000b74:	019b      	lsls	r3, r3, #6
 8000b76:	22ff      	movs	r2, #255	@ 0xff
 8000b78:	401a      	ands	r2, r3
 8000b7a:	1dfb      	adds	r3, r7, #7
 8000b7c:	781b      	ldrb	r3, [r3, #0]
 8000b7e:	0018      	movs	r0, r3
 8000b80:	2303      	movs	r3, #3
 8000b82:	4003      	ands	r3, r0
 8000b84:	00db      	lsls	r3, r3, #3
 8000b86:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b88:	481f      	ldr	r0, [pc, #124]	@ (8000c08 <__NVIC_SetPriority+0xd4>)
 8000b8a:	1dfb      	adds	r3, r7, #7
 8000b8c:	781b      	ldrb	r3, [r3, #0]
 8000b8e:	b25b      	sxtb	r3, r3
 8000b90:	089b      	lsrs	r3, r3, #2
 8000b92:	430a      	orrs	r2, r1
 8000b94:	33c0      	adds	r3, #192	@ 0xc0
 8000b96:	009b      	lsls	r3, r3, #2
 8000b98:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000b9a:	e031      	b.n	8000c00 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b9c:	4a1b      	ldr	r2, [pc, #108]	@ (8000c0c <__NVIC_SetPriority+0xd8>)
 8000b9e:	1dfb      	adds	r3, r7, #7
 8000ba0:	781b      	ldrb	r3, [r3, #0]
 8000ba2:	0019      	movs	r1, r3
 8000ba4:	230f      	movs	r3, #15
 8000ba6:	400b      	ands	r3, r1
 8000ba8:	3b08      	subs	r3, #8
 8000baa:	089b      	lsrs	r3, r3, #2
 8000bac:	3306      	adds	r3, #6
 8000bae:	009b      	lsls	r3, r3, #2
 8000bb0:	18d3      	adds	r3, r2, r3
 8000bb2:	3304      	adds	r3, #4
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	1dfa      	adds	r2, r7, #7
 8000bb8:	7812      	ldrb	r2, [r2, #0]
 8000bba:	0011      	movs	r1, r2
 8000bbc:	2203      	movs	r2, #3
 8000bbe:	400a      	ands	r2, r1
 8000bc0:	00d2      	lsls	r2, r2, #3
 8000bc2:	21ff      	movs	r1, #255	@ 0xff
 8000bc4:	4091      	lsls	r1, r2
 8000bc6:	000a      	movs	r2, r1
 8000bc8:	43d2      	mvns	r2, r2
 8000bca:	401a      	ands	r2, r3
 8000bcc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000bce:	683b      	ldr	r3, [r7, #0]
 8000bd0:	019b      	lsls	r3, r3, #6
 8000bd2:	22ff      	movs	r2, #255	@ 0xff
 8000bd4:	401a      	ands	r2, r3
 8000bd6:	1dfb      	adds	r3, r7, #7
 8000bd8:	781b      	ldrb	r3, [r3, #0]
 8000bda:	0018      	movs	r0, r3
 8000bdc:	2303      	movs	r3, #3
 8000bde:	4003      	ands	r3, r0
 8000be0:	00db      	lsls	r3, r3, #3
 8000be2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000be4:	4809      	ldr	r0, [pc, #36]	@ (8000c0c <__NVIC_SetPriority+0xd8>)
 8000be6:	1dfb      	adds	r3, r7, #7
 8000be8:	781b      	ldrb	r3, [r3, #0]
 8000bea:	001c      	movs	r4, r3
 8000bec:	230f      	movs	r3, #15
 8000bee:	4023      	ands	r3, r4
 8000bf0:	3b08      	subs	r3, #8
 8000bf2:	089b      	lsrs	r3, r3, #2
 8000bf4:	430a      	orrs	r2, r1
 8000bf6:	3306      	adds	r3, #6
 8000bf8:	009b      	lsls	r3, r3, #2
 8000bfa:	18c3      	adds	r3, r0, r3
 8000bfc:	3304      	adds	r3, #4
 8000bfe:	601a      	str	r2, [r3, #0]
}
 8000c00:	46c0      	nop			@ (mov r8, r8)
 8000c02:	46bd      	mov	sp, r7
 8000c04:	b003      	add	sp, #12
 8000c06:	bd90      	pop	{r4, r7, pc}
 8000c08:	e000e100 	.word	0xe000e100
 8000c0c:	e000ed00 	.word	0xe000ed00

08000c10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b082      	sub	sp, #8
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	1e5a      	subs	r2, r3, #1
 8000c1c:	2380      	movs	r3, #128	@ 0x80
 8000c1e:	045b      	lsls	r3, r3, #17
 8000c20:	429a      	cmp	r2, r3
 8000c22:	d301      	bcc.n	8000c28 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c24:	2301      	movs	r3, #1
 8000c26:	e010      	b.n	8000c4a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c28:	4b0a      	ldr	r3, [pc, #40]	@ (8000c54 <SysTick_Config+0x44>)
 8000c2a:	687a      	ldr	r2, [r7, #4]
 8000c2c:	3a01      	subs	r2, #1
 8000c2e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c30:	2301      	movs	r3, #1
 8000c32:	425b      	negs	r3, r3
 8000c34:	2103      	movs	r1, #3
 8000c36:	0018      	movs	r0, r3
 8000c38:	f7ff ff7c 	bl	8000b34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c3c:	4b05      	ldr	r3, [pc, #20]	@ (8000c54 <SysTick_Config+0x44>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c42:	4b04      	ldr	r3, [pc, #16]	@ (8000c54 <SysTick_Config+0x44>)
 8000c44:	2207      	movs	r2, #7
 8000c46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c48:	2300      	movs	r3, #0
}
 8000c4a:	0018      	movs	r0, r3
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	b002      	add	sp, #8
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	46c0      	nop			@ (mov r8, r8)
 8000c54:	e000e010 	.word	0xe000e010

08000c58 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b084      	sub	sp, #16
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	60b9      	str	r1, [r7, #8]
 8000c60:	607a      	str	r2, [r7, #4]
 8000c62:	210f      	movs	r1, #15
 8000c64:	187b      	adds	r3, r7, r1
 8000c66:	1c02      	adds	r2, r0, #0
 8000c68:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000c6a:	68ba      	ldr	r2, [r7, #8]
 8000c6c:	187b      	adds	r3, r7, r1
 8000c6e:	781b      	ldrb	r3, [r3, #0]
 8000c70:	b25b      	sxtb	r3, r3
 8000c72:	0011      	movs	r1, r2
 8000c74:	0018      	movs	r0, r3
 8000c76:	f7ff ff5d 	bl	8000b34 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 8000c7a:	46c0      	nop			@ (mov r8, r8)
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	b004      	add	sp, #16
 8000c80:	bd80      	pop	{r7, pc}

08000c82 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c82:	b580      	push	{r7, lr}
 8000c84:	b082      	sub	sp, #8
 8000c86:	af00      	add	r7, sp, #0
 8000c88:	0002      	movs	r2, r0
 8000c8a:	1dfb      	adds	r3, r7, #7
 8000c8c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c8e:	1dfb      	adds	r3, r7, #7
 8000c90:	781b      	ldrb	r3, [r3, #0]
 8000c92:	b25b      	sxtb	r3, r3
 8000c94:	0018      	movs	r0, r3
 8000c96:	f7ff ff33 	bl	8000b00 <__NVIC_EnableIRQ>
}
 8000c9a:	46c0      	nop			@ (mov r8, r8)
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	b002      	add	sp, #8
 8000ca0:	bd80      	pop	{r7, pc}

08000ca2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ca2:	b580      	push	{r7, lr}
 8000ca4:	b082      	sub	sp, #8
 8000ca6:	af00      	add	r7, sp, #0
 8000ca8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	0018      	movs	r0, r3
 8000cae:	f7ff ffaf 	bl	8000c10 <SysTick_Config>
 8000cb2:	0003      	movs	r3, r0
}
 8000cb4:	0018      	movs	r0, r3
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	b002      	add	sp, #8
 8000cba:	bd80      	pop	{r7, pc}

08000cbc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b086      	sub	sp, #24
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
 8000cc4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cca:	e14f      	b.n	8000f6c <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	2101      	movs	r1, #1
 8000cd2:	697a      	ldr	r2, [r7, #20]
 8000cd4:	4091      	lsls	r1, r2
 8000cd6:	000a      	movs	r2, r1
 8000cd8:	4013      	ands	r3, r2
 8000cda:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d100      	bne.n	8000ce4 <HAL_GPIO_Init+0x28>
 8000ce2:	e140      	b.n	8000f66 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	685b      	ldr	r3, [r3, #4]
 8000ce8:	2203      	movs	r2, #3
 8000cea:	4013      	ands	r3, r2
 8000cec:	2b01      	cmp	r3, #1
 8000cee:	d005      	beq.n	8000cfc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000cf0:	683b      	ldr	r3, [r7, #0]
 8000cf2:	685b      	ldr	r3, [r3, #4]
 8000cf4:	2203      	movs	r2, #3
 8000cf6:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000cf8:	2b02      	cmp	r3, #2
 8000cfa:	d130      	bne.n	8000d5e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	689b      	ldr	r3, [r3, #8]
 8000d00:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000d02:	697b      	ldr	r3, [r7, #20]
 8000d04:	005b      	lsls	r3, r3, #1
 8000d06:	2203      	movs	r2, #3
 8000d08:	409a      	lsls	r2, r3
 8000d0a:	0013      	movs	r3, r2
 8000d0c:	43da      	mvns	r2, r3
 8000d0e:	693b      	ldr	r3, [r7, #16]
 8000d10:	4013      	ands	r3, r2
 8000d12:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000d14:	683b      	ldr	r3, [r7, #0]
 8000d16:	68da      	ldr	r2, [r3, #12]
 8000d18:	697b      	ldr	r3, [r7, #20]
 8000d1a:	005b      	lsls	r3, r3, #1
 8000d1c:	409a      	lsls	r2, r3
 8000d1e:	0013      	movs	r3, r2
 8000d20:	693a      	ldr	r2, [r7, #16]
 8000d22:	4313      	orrs	r3, r2
 8000d24:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	693a      	ldr	r2, [r7, #16]
 8000d2a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	685b      	ldr	r3, [r3, #4]
 8000d30:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d32:	2201      	movs	r2, #1
 8000d34:	697b      	ldr	r3, [r7, #20]
 8000d36:	409a      	lsls	r2, r3
 8000d38:	0013      	movs	r3, r2
 8000d3a:	43da      	mvns	r2, r3
 8000d3c:	693b      	ldr	r3, [r7, #16]
 8000d3e:	4013      	ands	r3, r2
 8000d40:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d42:	683b      	ldr	r3, [r7, #0]
 8000d44:	685b      	ldr	r3, [r3, #4]
 8000d46:	091b      	lsrs	r3, r3, #4
 8000d48:	2201      	movs	r2, #1
 8000d4a:	401a      	ands	r2, r3
 8000d4c:	697b      	ldr	r3, [r7, #20]
 8000d4e:	409a      	lsls	r2, r3
 8000d50:	0013      	movs	r3, r2
 8000d52:	693a      	ldr	r2, [r7, #16]
 8000d54:	4313      	orrs	r3, r2
 8000d56:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	693a      	ldr	r2, [r7, #16]
 8000d5c:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d5e:	683b      	ldr	r3, [r7, #0]
 8000d60:	685b      	ldr	r3, [r3, #4]
 8000d62:	2203      	movs	r2, #3
 8000d64:	4013      	ands	r3, r2
 8000d66:	2b03      	cmp	r3, #3
 8000d68:	d017      	beq.n	8000d9a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	68db      	ldr	r3, [r3, #12]
 8000d6e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000d70:	697b      	ldr	r3, [r7, #20]
 8000d72:	005b      	lsls	r3, r3, #1
 8000d74:	2203      	movs	r2, #3
 8000d76:	409a      	lsls	r2, r3
 8000d78:	0013      	movs	r3, r2
 8000d7a:	43da      	mvns	r2, r3
 8000d7c:	693b      	ldr	r3, [r7, #16]
 8000d7e:	4013      	ands	r3, r2
 8000d80:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000d82:	683b      	ldr	r3, [r7, #0]
 8000d84:	689a      	ldr	r2, [r3, #8]
 8000d86:	697b      	ldr	r3, [r7, #20]
 8000d88:	005b      	lsls	r3, r3, #1
 8000d8a:	409a      	lsls	r2, r3
 8000d8c:	0013      	movs	r3, r2
 8000d8e:	693a      	ldr	r2, [r7, #16]
 8000d90:	4313      	orrs	r3, r2
 8000d92:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	693a      	ldr	r2, [r7, #16]
 8000d98:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d9a:	683b      	ldr	r3, [r7, #0]
 8000d9c:	685b      	ldr	r3, [r3, #4]
 8000d9e:	2203      	movs	r2, #3
 8000da0:	4013      	ands	r3, r2
 8000da2:	2b02      	cmp	r3, #2
 8000da4:	d123      	bne.n	8000dee <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000da6:	697b      	ldr	r3, [r7, #20]
 8000da8:	08da      	lsrs	r2, r3, #3
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	3208      	adds	r2, #8
 8000dae:	0092      	lsls	r2, r2, #2
 8000db0:	58d3      	ldr	r3, [r2, r3]
 8000db2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000db4:	697b      	ldr	r3, [r7, #20]
 8000db6:	2207      	movs	r2, #7
 8000db8:	4013      	ands	r3, r2
 8000dba:	009b      	lsls	r3, r3, #2
 8000dbc:	220f      	movs	r2, #15
 8000dbe:	409a      	lsls	r2, r3
 8000dc0:	0013      	movs	r3, r2
 8000dc2:	43da      	mvns	r2, r3
 8000dc4:	693b      	ldr	r3, [r7, #16]
 8000dc6:	4013      	ands	r3, r2
 8000dc8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	691a      	ldr	r2, [r3, #16]
 8000dce:	697b      	ldr	r3, [r7, #20]
 8000dd0:	2107      	movs	r1, #7
 8000dd2:	400b      	ands	r3, r1
 8000dd4:	009b      	lsls	r3, r3, #2
 8000dd6:	409a      	lsls	r2, r3
 8000dd8:	0013      	movs	r3, r2
 8000dda:	693a      	ldr	r2, [r7, #16]
 8000ddc:	4313      	orrs	r3, r2
 8000dde:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000de0:	697b      	ldr	r3, [r7, #20]
 8000de2:	08da      	lsrs	r2, r3, #3
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	3208      	adds	r2, #8
 8000de8:	0092      	lsls	r2, r2, #2
 8000dea:	6939      	ldr	r1, [r7, #16]
 8000dec:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000df4:	697b      	ldr	r3, [r7, #20]
 8000df6:	005b      	lsls	r3, r3, #1
 8000df8:	2203      	movs	r2, #3
 8000dfa:	409a      	lsls	r2, r3
 8000dfc:	0013      	movs	r3, r2
 8000dfe:	43da      	mvns	r2, r3
 8000e00:	693b      	ldr	r3, [r7, #16]
 8000e02:	4013      	ands	r3, r2
 8000e04:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	685b      	ldr	r3, [r3, #4]
 8000e0a:	2203      	movs	r2, #3
 8000e0c:	401a      	ands	r2, r3
 8000e0e:	697b      	ldr	r3, [r7, #20]
 8000e10:	005b      	lsls	r3, r3, #1
 8000e12:	409a      	lsls	r2, r3
 8000e14:	0013      	movs	r3, r2
 8000e16:	693a      	ldr	r2, [r7, #16]
 8000e18:	4313      	orrs	r3, r2
 8000e1a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	693a      	ldr	r2, [r7, #16]
 8000e20:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	685a      	ldr	r2, [r3, #4]
 8000e26:	23c0      	movs	r3, #192	@ 0xc0
 8000e28:	029b      	lsls	r3, r3, #10
 8000e2a:	4013      	ands	r3, r2
 8000e2c:	d100      	bne.n	8000e30 <HAL_GPIO_Init+0x174>
 8000e2e:	e09a      	b.n	8000f66 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e30:	4b54      	ldr	r3, [pc, #336]	@ (8000f84 <HAL_GPIO_Init+0x2c8>)
 8000e32:	699a      	ldr	r2, [r3, #24]
 8000e34:	4b53      	ldr	r3, [pc, #332]	@ (8000f84 <HAL_GPIO_Init+0x2c8>)
 8000e36:	2101      	movs	r1, #1
 8000e38:	430a      	orrs	r2, r1
 8000e3a:	619a      	str	r2, [r3, #24]
 8000e3c:	4b51      	ldr	r3, [pc, #324]	@ (8000f84 <HAL_GPIO_Init+0x2c8>)
 8000e3e:	699b      	ldr	r3, [r3, #24]
 8000e40:	2201      	movs	r2, #1
 8000e42:	4013      	ands	r3, r2
 8000e44:	60bb      	str	r3, [r7, #8]
 8000e46:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000e48:	4a4f      	ldr	r2, [pc, #316]	@ (8000f88 <HAL_GPIO_Init+0x2cc>)
 8000e4a:	697b      	ldr	r3, [r7, #20]
 8000e4c:	089b      	lsrs	r3, r3, #2
 8000e4e:	3302      	adds	r3, #2
 8000e50:	009b      	lsls	r3, r3, #2
 8000e52:	589b      	ldr	r3, [r3, r2]
 8000e54:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000e56:	697b      	ldr	r3, [r7, #20]
 8000e58:	2203      	movs	r2, #3
 8000e5a:	4013      	ands	r3, r2
 8000e5c:	009b      	lsls	r3, r3, #2
 8000e5e:	220f      	movs	r2, #15
 8000e60:	409a      	lsls	r2, r3
 8000e62:	0013      	movs	r3, r2
 8000e64:	43da      	mvns	r2, r3
 8000e66:	693b      	ldr	r3, [r7, #16]
 8000e68:	4013      	ands	r3, r2
 8000e6a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000e6c:	687a      	ldr	r2, [r7, #4]
 8000e6e:	2390      	movs	r3, #144	@ 0x90
 8000e70:	05db      	lsls	r3, r3, #23
 8000e72:	429a      	cmp	r2, r3
 8000e74:	d013      	beq.n	8000e9e <HAL_GPIO_Init+0x1e2>
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	4a44      	ldr	r2, [pc, #272]	@ (8000f8c <HAL_GPIO_Init+0x2d0>)
 8000e7a:	4293      	cmp	r3, r2
 8000e7c:	d00d      	beq.n	8000e9a <HAL_GPIO_Init+0x1de>
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	4a43      	ldr	r2, [pc, #268]	@ (8000f90 <HAL_GPIO_Init+0x2d4>)
 8000e82:	4293      	cmp	r3, r2
 8000e84:	d007      	beq.n	8000e96 <HAL_GPIO_Init+0x1da>
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	4a42      	ldr	r2, [pc, #264]	@ (8000f94 <HAL_GPIO_Init+0x2d8>)
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	d101      	bne.n	8000e92 <HAL_GPIO_Init+0x1d6>
 8000e8e:	2303      	movs	r3, #3
 8000e90:	e006      	b.n	8000ea0 <HAL_GPIO_Init+0x1e4>
 8000e92:	2305      	movs	r3, #5
 8000e94:	e004      	b.n	8000ea0 <HAL_GPIO_Init+0x1e4>
 8000e96:	2302      	movs	r3, #2
 8000e98:	e002      	b.n	8000ea0 <HAL_GPIO_Init+0x1e4>
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	e000      	b.n	8000ea0 <HAL_GPIO_Init+0x1e4>
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	697a      	ldr	r2, [r7, #20]
 8000ea2:	2103      	movs	r1, #3
 8000ea4:	400a      	ands	r2, r1
 8000ea6:	0092      	lsls	r2, r2, #2
 8000ea8:	4093      	lsls	r3, r2
 8000eaa:	693a      	ldr	r2, [r7, #16]
 8000eac:	4313      	orrs	r3, r2
 8000eae:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000eb0:	4935      	ldr	r1, [pc, #212]	@ (8000f88 <HAL_GPIO_Init+0x2cc>)
 8000eb2:	697b      	ldr	r3, [r7, #20]
 8000eb4:	089b      	lsrs	r3, r3, #2
 8000eb6:	3302      	adds	r3, #2
 8000eb8:	009b      	lsls	r3, r3, #2
 8000eba:	693a      	ldr	r2, [r7, #16]
 8000ebc:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000ebe:	4b36      	ldr	r3, [pc, #216]	@ (8000f98 <HAL_GPIO_Init+0x2dc>)
 8000ec0:	689b      	ldr	r3, [r3, #8]
 8000ec2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	43da      	mvns	r2, r3
 8000ec8:	693b      	ldr	r3, [r7, #16]
 8000eca:	4013      	ands	r3, r2
 8000ecc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	685a      	ldr	r2, [r3, #4]
 8000ed2:	2380      	movs	r3, #128	@ 0x80
 8000ed4:	035b      	lsls	r3, r3, #13
 8000ed6:	4013      	ands	r3, r2
 8000ed8:	d003      	beq.n	8000ee2 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8000eda:	693a      	ldr	r2, [r7, #16]
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	4313      	orrs	r3, r2
 8000ee0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000ee2:	4b2d      	ldr	r3, [pc, #180]	@ (8000f98 <HAL_GPIO_Init+0x2dc>)
 8000ee4:	693a      	ldr	r2, [r7, #16]
 8000ee6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000ee8:	4b2b      	ldr	r3, [pc, #172]	@ (8000f98 <HAL_GPIO_Init+0x2dc>)
 8000eea:	68db      	ldr	r3, [r3, #12]
 8000eec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	43da      	mvns	r2, r3
 8000ef2:	693b      	ldr	r3, [r7, #16]
 8000ef4:	4013      	ands	r3, r2
 8000ef6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	685a      	ldr	r2, [r3, #4]
 8000efc:	2380      	movs	r3, #128	@ 0x80
 8000efe:	039b      	lsls	r3, r3, #14
 8000f00:	4013      	ands	r3, r2
 8000f02:	d003      	beq.n	8000f0c <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8000f04:	693a      	ldr	r2, [r7, #16]
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	4313      	orrs	r3, r2
 8000f0a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000f0c:	4b22      	ldr	r3, [pc, #136]	@ (8000f98 <HAL_GPIO_Init+0x2dc>)
 8000f0e:	693a      	ldr	r2, [r7, #16]
 8000f10:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8000f12:	4b21      	ldr	r3, [pc, #132]	@ (8000f98 <HAL_GPIO_Init+0x2dc>)
 8000f14:	685b      	ldr	r3, [r3, #4]
 8000f16:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	43da      	mvns	r2, r3
 8000f1c:	693b      	ldr	r3, [r7, #16]
 8000f1e:	4013      	ands	r3, r2
 8000f20:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	685a      	ldr	r2, [r3, #4]
 8000f26:	2380      	movs	r3, #128	@ 0x80
 8000f28:	029b      	lsls	r3, r3, #10
 8000f2a:	4013      	ands	r3, r2
 8000f2c:	d003      	beq.n	8000f36 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8000f2e:	693a      	ldr	r2, [r7, #16]
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	4313      	orrs	r3, r2
 8000f34:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000f36:	4b18      	ldr	r3, [pc, #96]	@ (8000f98 <HAL_GPIO_Init+0x2dc>)
 8000f38:	693a      	ldr	r2, [r7, #16]
 8000f3a:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8000f3c:	4b16      	ldr	r3, [pc, #88]	@ (8000f98 <HAL_GPIO_Init+0x2dc>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	43da      	mvns	r2, r3
 8000f46:	693b      	ldr	r3, [r7, #16]
 8000f48:	4013      	ands	r3, r2
 8000f4a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	685a      	ldr	r2, [r3, #4]
 8000f50:	2380      	movs	r3, #128	@ 0x80
 8000f52:	025b      	lsls	r3, r3, #9
 8000f54:	4013      	ands	r3, r2
 8000f56:	d003      	beq.n	8000f60 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8000f58:	693a      	ldr	r2, [r7, #16]
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	4313      	orrs	r3, r2
 8000f5e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000f60:	4b0d      	ldr	r3, [pc, #52]	@ (8000f98 <HAL_GPIO_Init+0x2dc>)
 8000f62:	693a      	ldr	r2, [r7, #16]
 8000f64:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8000f66:	697b      	ldr	r3, [r7, #20]
 8000f68:	3301      	adds	r3, #1
 8000f6a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	681a      	ldr	r2, [r3, #0]
 8000f70:	697b      	ldr	r3, [r7, #20]
 8000f72:	40da      	lsrs	r2, r3
 8000f74:	1e13      	subs	r3, r2, #0
 8000f76:	d000      	beq.n	8000f7a <HAL_GPIO_Init+0x2be>
 8000f78:	e6a8      	b.n	8000ccc <HAL_GPIO_Init+0x10>
  } 
}
 8000f7a:	46c0      	nop			@ (mov r8, r8)
 8000f7c:	46c0      	nop			@ (mov r8, r8)
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	b006      	add	sp, #24
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	40021000 	.word	0x40021000
 8000f88:	40010000 	.word	0x40010000
 8000f8c:	48000400 	.word	0x48000400
 8000f90:	48000800 	.word	0x48000800
 8000f94:	48000c00 	.word	0x48000c00
 8000f98:	40010400 	.word	0x40010400

08000f9c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b084      	sub	sp, #16
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
 8000fa4:	000a      	movs	r2, r1
 8000fa6:	1cbb      	adds	r3, r7, #2
 8000fa8:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	691b      	ldr	r3, [r3, #16]
 8000fae:	1cba      	adds	r2, r7, #2
 8000fb0:	8812      	ldrh	r2, [r2, #0]
 8000fb2:	4013      	ands	r3, r2
 8000fb4:	d004      	beq.n	8000fc0 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8000fb6:	230f      	movs	r3, #15
 8000fb8:	18fb      	adds	r3, r7, r3
 8000fba:	2201      	movs	r2, #1
 8000fbc:	701a      	strb	r2, [r3, #0]
 8000fbe:	e003      	b.n	8000fc8 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000fc0:	230f      	movs	r3, #15
 8000fc2:	18fb      	adds	r3, r7, r3
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8000fc8:	230f      	movs	r3, #15
 8000fca:	18fb      	adds	r3, r7, r3
 8000fcc:	781b      	ldrb	r3, [r3, #0]
  }
 8000fce:	0018      	movs	r0, r3
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	b004      	add	sp, #16
 8000fd4:	bd80      	pop	{r7, pc}

08000fd6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fd6:	b580      	push	{r7, lr}
 8000fd8:	b082      	sub	sp, #8
 8000fda:	af00      	add	r7, sp, #0
 8000fdc:	6078      	str	r0, [r7, #4]
 8000fde:	0008      	movs	r0, r1
 8000fe0:	0011      	movs	r1, r2
 8000fe2:	1cbb      	adds	r3, r7, #2
 8000fe4:	1c02      	adds	r2, r0, #0
 8000fe6:	801a      	strh	r2, [r3, #0]
 8000fe8:	1c7b      	adds	r3, r7, #1
 8000fea:	1c0a      	adds	r2, r1, #0
 8000fec:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000fee:	1c7b      	adds	r3, r7, #1
 8000ff0:	781b      	ldrb	r3, [r3, #0]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d004      	beq.n	8001000 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000ff6:	1cbb      	adds	r3, r7, #2
 8000ff8:	881a      	ldrh	r2, [r3, #0]
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000ffe:	e003      	b.n	8001008 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001000:	1cbb      	adds	r3, r7, #2
 8001002:	881a      	ldrh	r2, [r3, #0]
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001008:	46c0      	nop			@ (mov r8, r8)
 800100a:	46bd      	mov	sp, r7
 800100c:	b002      	add	sp, #8
 800100e:	bd80      	pop	{r7, pc}

08001010 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b084      	sub	sp, #16
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
 8001018:	000a      	movs	r2, r1
 800101a:	1cbb      	adds	r3, r7, #2
 800101c:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	695b      	ldr	r3, [r3, #20]
 8001022:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001024:	1cbb      	adds	r3, r7, #2
 8001026:	881b      	ldrh	r3, [r3, #0]
 8001028:	68fa      	ldr	r2, [r7, #12]
 800102a:	4013      	ands	r3, r2
 800102c:	041a      	lsls	r2, r3, #16
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	43db      	mvns	r3, r3
 8001032:	1cb9      	adds	r1, r7, #2
 8001034:	8809      	ldrh	r1, [r1, #0]
 8001036:	400b      	ands	r3, r1
 8001038:	431a      	orrs	r2, r3
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	619a      	str	r2, [r3, #24]
}
 800103e:	46c0      	nop			@ (mov r8, r8)
 8001040:	46bd      	mov	sp, r7
 8001042:	b004      	add	sp, #16
 8001044:	bd80      	pop	{r7, pc}
	...

08001048 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
 800104e:	0002      	movs	r2, r0
 8001050:	1dbb      	adds	r3, r7, #6
 8001052:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001054:	4b09      	ldr	r3, [pc, #36]	@ (800107c <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8001056:	695b      	ldr	r3, [r3, #20]
 8001058:	1dba      	adds	r2, r7, #6
 800105a:	8812      	ldrh	r2, [r2, #0]
 800105c:	4013      	ands	r3, r2
 800105e:	d008      	beq.n	8001072 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001060:	4b06      	ldr	r3, [pc, #24]	@ (800107c <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8001062:	1dba      	adds	r2, r7, #6
 8001064:	8812      	ldrh	r2, [r2, #0]
 8001066:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001068:	1dbb      	adds	r3, r7, #6
 800106a:	881b      	ldrh	r3, [r3, #0]
 800106c:	0018      	movs	r0, r3
 800106e:	f7ff fb35 	bl	80006dc <HAL_GPIO_EXTI_Callback>
  }
}
 8001072:	46c0      	nop			@ (mov r8, r8)
 8001074:	46bd      	mov	sp, r7
 8001076:	b002      	add	sp, #8
 8001078:	bd80      	pop	{r7, pc}
 800107a:	46c0      	nop			@ (mov r8, r8)
 800107c:	40010400 	.word	0x40010400

08001080 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b088      	sub	sp, #32
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	2b00      	cmp	r3, #0
 800108c:	d101      	bne.n	8001092 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800108e:	2301      	movs	r3, #1
 8001090:	e301      	b.n	8001696 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	2201      	movs	r2, #1
 8001098:	4013      	ands	r3, r2
 800109a:	d100      	bne.n	800109e <HAL_RCC_OscConfig+0x1e>
 800109c:	e08d      	b.n	80011ba <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800109e:	4bc3      	ldr	r3, [pc, #780]	@ (80013ac <HAL_RCC_OscConfig+0x32c>)
 80010a0:	685b      	ldr	r3, [r3, #4]
 80010a2:	220c      	movs	r2, #12
 80010a4:	4013      	ands	r3, r2
 80010a6:	2b04      	cmp	r3, #4
 80010a8:	d00e      	beq.n	80010c8 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80010aa:	4bc0      	ldr	r3, [pc, #768]	@ (80013ac <HAL_RCC_OscConfig+0x32c>)
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	220c      	movs	r2, #12
 80010b0:	4013      	ands	r3, r2
 80010b2:	2b08      	cmp	r3, #8
 80010b4:	d116      	bne.n	80010e4 <HAL_RCC_OscConfig+0x64>
 80010b6:	4bbd      	ldr	r3, [pc, #756]	@ (80013ac <HAL_RCC_OscConfig+0x32c>)
 80010b8:	685a      	ldr	r2, [r3, #4]
 80010ba:	2380      	movs	r3, #128	@ 0x80
 80010bc:	025b      	lsls	r3, r3, #9
 80010be:	401a      	ands	r2, r3
 80010c0:	2380      	movs	r3, #128	@ 0x80
 80010c2:	025b      	lsls	r3, r3, #9
 80010c4:	429a      	cmp	r2, r3
 80010c6:	d10d      	bne.n	80010e4 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010c8:	4bb8      	ldr	r3, [pc, #736]	@ (80013ac <HAL_RCC_OscConfig+0x32c>)
 80010ca:	681a      	ldr	r2, [r3, #0]
 80010cc:	2380      	movs	r3, #128	@ 0x80
 80010ce:	029b      	lsls	r3, r3, #10
 80010d0:	4013      	ands	r3, r2
 80010d2:	d100      	bne.n	80010d6 <HAL_RCC_OscConfig+0x56>
 80010d4:	e070      	b.n	80011b8 <HAL_RCC_OscConfig+0x138>
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	685b      	ldr	r3, [r3, #4]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d000      	beq.n	80010e0 <HAL_RCC_OscConfig+0x60>
 80010de:	e06b      	b.n	80011b8 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 80010e0:	2301      	movs	r3, #1
 80010e2:	e2d8      	b.n	8001696 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	2b01      	cmp	r3, #1
 80010ea:	d107      	bne.n	80010fc <HAL_RCC_OscConfig+0x7c>
 80010ec:	4baf      	ldr	r3, [pc, #700]	@ (80013ac <HAL_RCC_OscConfig+0x32c>)
 80010ee:	681a      	ldr	r2, [r3, #0]
 80010f0:	4bae      	ldr	r3, [pc, #696]	@ (80013ac <HAL_RCC_OscConfig+0x32c>)
 80010f2:	2180      	movs	r1, #128	@ 0x80
 80010f4:	0249      	lsls	r1, r1, #9
 80010f6:	430a      	orrs	r2, r1
 80010f8:	601a      	str	r2, [r3, #0]
 80010fa:	e02f      	b.n	800115c <HAL_RCC_OscConfig+0xdc>
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	2b00      	cmp	r3, #0
 8001102:	d10c      	bne.n	800111e <HAL_RCC_OscConfig+0x9e>
 8001104:	4ba9      	ldr	r3, [pc, #676]	@ (80013ac <HAL_RCC_OscConfig+0x32c>)
 8001106:	681a      	ldr	r2, [r3, #0]
 8001108:	4ba8      	ldr	r3, [pc, #672]	@ (80013ac <HAL_RCC_OscConfig+0x32c>)
 800110a:	49a9      	ldr	r1, [pc, #676]	@ (80013b0 <HAL_RCC_OscConfig+0x330>)
 800110c:	400a      	ands	r2, r1
 800110e:	601a      	str	r2, [r3, #0]
 8001110:	4ba6      	ldr	r3, [pc, #664]	@ (80013ac <HAL_RCC_OscConfig+0x32c>)
 8001112:	681a      	ldr	r2, [r3, #0]
 8001114:	4ba5      	ldr	r3, [pc, #660]	@ (80013ac <HAL_RCC_OscConfig+0x32c>)
 8001116:	49a7      	ldr	r1, [pc, #668]	@ (80013b4 <HAL_RCC_OscConfig+0x334>)
 8001118:	400a      	ands	r2, r1
 800111a:	601a      	str	r2, [r3, #0]
 800111c:	e01e      	b.n	800115c <HAL_RCC_OscConfig+0xdc>
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	685b      	ldr	r3, [r3, #4]
 8001122:	2b05      	cmp	r3, #5
 8001124:	d10e      	bne.n	8001144 <HAL_RCC_OscConfig+0xc4>
 8001126:	4ba1      	ldr	r3, [pc, #644]	@ (80013ac <HAL_RCC_OscConfig+0x32c>)
 8001128:	681a      	ldr	r2, [r3, #0]
 800112a:	4ba0      	ldr	r3, [pc, #640]	@ (80013ac <HAL_RCC_OscConfig+0x32c>)
 800112c:	2180      	movs	r1, #128	@ 0x80
 800112e:	02c9      	lsls	r1, r1, #11
 8001130:	430a      	orrs	r2, r1
 8001132:	601a      	str	r2, [r3, #0]
 8001134:	4b9d      	ldr	r3, [pc, #628]	@ (80013ac <HAL_RCC_OscConfig+0x32c>)
 8001136:	681a      	ldr	r2, [r3, #0]
 8001138:	4b9c      	ldr	r3, [pc, #624]	@ (80013ac <HAL_RCC_OscConfig+0x32c>)
 800113a:	2180      	movs	r1, #128	@ 0x80
 800113c:	0249      	lsls	r1, r1, #9
 800113e:	430a      	orrs	r2, r1
 8001140:	601a      	str	r2, [r3, #0]
 8001142:	e00b      	b.n	800115c <HAL_RCC_OscConfig+0xdc>
 8001144:	4b99      	ldr	r3, [pc, #612]	@ (80013ac <HAL_RCC_OscConfig+0x32c>)
 8001146:	681a      	ldr	r2, [r3, #0]
 8001148:	4b98      	ldr	r3, [pc, #608]	@ (80013ac <HAL_RCC_OscConfig+0x32c>)
 800114a:	4999      	ldr	r1, [pc, #612]	@ (80013b0 <HAL_RCC_OscConfig+0x330>)
 800114c:	400a      	ands	r2, r1
 800114e:	601a      	str	r2, [r3, #0]
 8001150:	4b96      	ldr	r3, [pc, #600]	@ (80013ac <HAL_RCC_OscConfig+0x32c>)
 8001152:	681a      	ldr	r2, [r3, #0]
 8001154:	4b95      	ldr	r3, [pc, #596]	@ (80013ac <HAL_RCC_OscConfig+0x32c>)
 8001156:	4997      	ldr	r1, [pc, #604]	@ (80013b4 <HAL_RCC_OscConfig+0x334>)
 8001158:	400a      	ands	r2, r1
 800115a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	685b      	ldr	r3, [r3, #4]
 8001160:	2b00      	cmp	r3, #0
 8001162:	d014      	beq.n	800118e <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001164:	f7ff fc9e 	bl	8000aa4 <HAL_GetTick>
 8001168:	0003      	movs	r3, r0
 800116a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800116c:	e008      	b.n	8001180 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800116e:	f7ff fc99 	bl	8000aa4 <HAL_GetTick>
 8001172:	0002      	movs	r2, r0
 8001174:	69bb      	ldr	r3, [r7, #24]
 8001176:	1ad3      	subs	r3, r2, r3
 8001178:	2b64      	cmp	r3, #100	@ 0x64
 800117a:	d901      	bls.n	8001180 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 800117c:	2303      	movs	r3, #3
 800117e:	e28a      	b.n	8001696 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001180:	4b8a      	ldr	r3, [pc, #552]	@ (80013ac <HAL_RCC_OscConfig+0x32c>)
 8001182:	681a      	ldr	r2, [r3, #0]
 8001184:	2380      	movs	r3, #128	@ 0x80
 8001186:	029b      	lsls	r3, r3, #10
 8001188:	4013      	ands	r3, r2
 800118a:	d0f0      	beq.n	800116e <HAL_RCC_OscConfig+0xee>
 800118c:	e015      	b.n	80011ba <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800118e:	f7ff fc89 	bl	8000aa4 <HAL_GetTick>
 8001192:	0003      	movs	r3, r0
 8001194:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001196:	e008      	b.n	80011aa <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001198:	f7ff fc84 	bl	8000aa4 <HAL_GetTick>
 800119c:	0002      	movs	r2, r0
 800119e:	69bb      	ldr	r3, [r7, #24]
 80011a0:	1ad3      	subs	r3, r2, r3
 80011a2:	2b64      	cmp	r3, #100	@ 0x64
 80011a4:	d901      	bls.n	80011aa <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80011a6:	2303      	movs	r3, #3
 80011a8:	e275      	b.n	8001696 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011aa:	4b80      	ldr	r3, [pc, #512]	@ (80013ac <HAL_RCC_OscConfig+0x32c>)
 80011ac:	681a      	ldr	r2, [r3, #0]
 80011ae:	2380      	movs	r3, #128	@ 0x80
 80011b0:	029b      	lsls	r3, r3, #10
 80011b2:	4013      	ands	r3, r2
 80011b4:	d1f0      	bne.n	8001198 <HAL_RCC_OscConfig+0x118>
 80011b6:	e000      	b.n	80011ba <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011b8:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	2202      	movs	r2, #2
 80011c0:	4013      	ands	r3, r2
 80011c2:	d100      	bne.n	80011c6 <HAL_RCC_OscConfig+0x146>
 80011c4:	e069      	b.n	800129a <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80011c6:	4b79      	ldr	r3, [pc, #484]	@ (80013ac <HAL_RCC_OscConfig+0x32c>)
 80011c8:	685b      	ldr	r3, [r3, #4]
 80011ca:	220c      	movs	r2, #12
 80011cc:	4013      	ands	r3, r2
 80011ce:	d00b      	beq.n	80011e8 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80011d0:	4b76      	ldr	r3, [pc, #472]	@ (80013ac <HAL_RCC_OscConfig+0x32c>)
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	220c      	movs	r2, #12
 80011d6:	4013      	ands	r3, r2
 80011d8:	2b08      	cmp	r3, #8
 80011da:	d11c      	bne.n	8001216 <HAL_RCC_OscConfig+0x196>
 80011dc:	4b73      	ldr	r3, [pc, #460]	@ (80013ac <HAL_RCC_OscConfig+0x32c>)
 80011de:	685a      	ldr	r2, [r3, #4]
 80011e0:	2380      	movs	r3, #128	@ 0x80
 80011e2:	025b      	lsls	r3, r3, #9
 80011e4:	4013      	ands	r3, r2
 80011e6:	d116      	bne.n	8001216 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011e8:	4b70      	ldr	r3, [pc, #448]	@ (80013ac <HAL_RCC_OscConfig+0x32c>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	2202      	movs	r2, #2
 80011ee:	4013      	ands	r3, r2
 80011f0:	d005      	beq.n	80011fe <HAL_RCC_OscConfig+0x17e>
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	68db      	ldr	r3, [r3, #12]
 80011f6:	2b01      	cmp	r3, #1
 80011f8:	d001      	beq.n	80011fe <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80011fa:	2301      	movs	r3, #1
 80011fc:	e24b      	b.n	8001696 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011fe:	4b6b      	ldr	r3, [pc, #428]	@ (80013ac <HAL_RCC_OscConfig+0x32c>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	22f8      	movs	r2, #248	@ 0xf8
 8001204:	4393      	bics	r3, r2
 8001206:	0019      	movs	r1, r3
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	691b      	ldr	r3, [r3, #16]
 800120c:	00da      	lsls	r2, r3, #3
 800120e:	4b67      	ldr	r3, [pc, #412]	@ (80013ac <HAL_RCC_OscConfig+0x32c>)
 8001210:	430a      	orrs	r2, r1
 8001212:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001214:	e041      	b.n	800129a <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	68db      	ldr	r3, [r3, #12]
 800121a:	2b00      	cmp	r3, #0
 800121c:	d024      	beq.n	8001268 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800121e:	4b63      	ldr	r3, [pc, #396]	@ (80013ac <HAL_RCC_OscConfig+0x32c>)
 8001220:	681a      	ldr	r2, [r3, #0]
 8001222:	4b62      	ldr	r3, [pc, #392]	@ (80013ac <HAL_RCC_OscConfig+0x32c>)
 8001224:	2101      	movs	r1, #1
 8001226:	430a      	orrs	r2, r1
 8001228:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800122a:	f7ff fc3b 	bl	8000aa4 <HAL_GetTick>
 800122e:	0003      	movs	r3, r0
 8001230:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001232:	e008      	b.n	8001246 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001234:	f7ff fc36 	bl	8000aa4 <HAL_GetTick>
 8001238:	0002      	movs	r2, r0
 800123a:	69bb      	ldr	r3, [r7, #24]
 800123c:	1ad3      	subs	r3, r2, r3
 800123e:	2b02      	cmp	r3, #2
 8001240:	d901      	bls.n	8001246 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8001242:	2303      	movs	r3, #3
 8001244:	e227      	b.n	8001696 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001246:	4b59      	ldr	r3, [pc, #356]	@ (80013ac <HAL_RCC_OscConfig+0x32c>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	2202      	movs	r2, #2
 800124c:	4013      	ands	r3, r2
 800124e:	d0f1      	beq.n	8001234 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001250:	4b56      	ldr	r3, [pc, #344]	@ (80013ac <HAL_RCC_OscConfig+0x32c>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	22f8      	movs	r2, #248	@ 0xf8
 8001256:	4393      	bics	r3, r2
 8001258:	0019      	movs	r1, r3
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	691b      	ldr	r3, [r3, #16]
 800125e:	00da      	lsls	r2, r3, #3
 8001260:	4b52      	ldr	r3, [pc, #328]	@ (80013ac <HAL_RCC_OscConfig+0x32c>)
 8001262:	430a      	orrs	r2, r1
 8001264:	601a      	str	r2, [r3, #0]
 8001266:	e018      	b.n	800129a <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001268:	4b50      	ldr	r3, [pc, #320]	@ (80013ac <HAL_RCC_OscConfig+0x32c>)
 800126a:	681a      	ldr	r2, [r3, #0]
 800126c:	4b4f      	ldr	r3, [pc, #316]	@ (80013ac <HAL_RCC_OscConfig+0x32c>)
 800126e:	2101      	movs	r1, #1
 8001270:	438a      	bics	r2, r1
 8001272:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001274:	f7ff fc16 	bl	8000aa4 <HAL_GetTick>
 8001278:	0003      	movs	r3, r0
 800127a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800127c:	e008      	b.n	8001290 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800127e:	f7ff fc11 	bl	8000aa4 <HAL_GetTick>
 8001282:	0002      	movs	r2, r0
 8001284:	69bb      	ldr	r3, [r7, #24]
 8001286:	1ad3      	subs	r3, r2, r3
 8001288:	2b02      	cmp	r3, #2
 800128a:	d901      	bls.n	8001290 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 800128c:	2303      	movs	r3, #3
 800128e:	e202      	b.n	8001696 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001290:	4b46      	ldr	r3, [pc, #280]	@ (80013ac <HAL_RCC_OscConfig+0x32c>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	2202      	movs	r2, #2
 8001296:	4013      	ands	r3, r2
 8001298:	d1f1      	bne.n	800127e <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	2208      	movs	r2, #8
 80012a0:	4013      	ands	r3, r2
 80012a2:	d036      	beq.n	8001312 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	69db      	ldr	r3, [r3, #28]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d019      	beq.n	80012e0 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012ac:	4b3f      	ldr	r3, [pc, #252]	@ (80013ac <HAL_RCC_OscConfig+0x32c>)
 80012ae:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80012b0:	4b3e      	ldr	r3, [pc, #248]	@ (80013ac <HAL_RCC_OscConfig+0x32c>)
 80012b2:	2101      	movs	r1, #1
 80012b4:	430a      	orrs	r2, r1
 80012b6:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012b8:	f7ff fbf4 	bl	8000aa4 <HAL_GetTick>
 80012bc:	0003      	movs	r3, r0
 80012be:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012c0:	e008      	b.n	80012d4 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012c2:	f7ff fbef 	bl	8000aa4 <HAL_GetTick>
 80012c6:	0002      	movs	r2, r0
 80012c8:	69bb      	ldr	r3, [r7, #24]
 80012ca:	1ad3      	subs	r3, r2, r3
 80012cc:	2b02      	cmp	r3, #2
 80012ce:	d901      	bls.n	80012d4 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 80012d0:	2303      	movs	r3, #3
 80012d2:	e1e0      	b.n	8001696 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012d4:	4b35      	ldr	r3, [pc, #212]	@ (80013ac <HAL_RCC_OscConfig+0x32c>)
 80012d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012d8:	2202      	movs	r2, #2
 80012da:	4013      	ands	r3, r2
 80012dc:	d0f1      	beq.n	80012c2 <HAL_RCC_OscConfig+0x242>
 80012de:	e018      	b.n	8001312 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80012e0:	4b32      	ldr	r3, [pc, #200]	@ (80013ac <HAL_RCC_OscConfig+0x32c>)
 80012e2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80012e4:	4b31      	ldr	r3, [pc, #196]	@ (80013ac <HAL_RCC_OscConfig+0x32c>)
 80012e6:	2101      	movs	r1, #1
 80012e8:	438a      	bics	r2, r1
 80012ea:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012ec:	f7ff fbda 	bl	8000aa4 <HAL_GetTick>
 80012f0:	0003      	movs	r3, r0
 80012f2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012f4:	e008      	b.n	8001308 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012f6:	f7ff fbd5 	bl	8000aa4 <HAL_GetTick>
 80012fa:	0002      	movs	r2, r0
 80012fc:	69bb      	ldr	r3, [r7, #24]
 80012fe:	1ad3      	subs	r3, r2, r3
 8001300:	2b02      	cmp	r3, #2
 8001302:	d901      	bls.n	8001308 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8001304:	2303      	movs	r3, #3
 8001306:	e1c6      	b.n	8001696 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001308:	4b28      	ldr	r3, [pc, #160]	@ (80013ac <HAL_RCC_OscConfig+0x32c>)
 800130a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800130c:	2202      	movs	r2, #2
 800130e:	4013      	ands	r3, r2
 8001310:	d1f1      	bne.n	80012f6 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	2204      	movs	r2, #4
 8001318:	4013      	ands	r3, r2
 800131a:	d100      	bne.n	800131e <HAL_RCC_OscConfig+0x29e>
 800131c:	e0b4      	b.n	8001488 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 800131e:	201f      	movs	r0, #31
 8001320:	183b      	adds	r3, r7, r0
 8001322:	2200      	movs	r2, #0
 8001324:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001326:	4b21      	ldr	r3, [pc, #132]	@ (80013ac <HAL_RCC_OscConfig+0x32c>)
 8001328:	69da      	ldr	r2, [r3, #28]
 800132a:	2380      	movs	r3, #128	@ 0x80
 800132c:	055b      	lsls	r3, r3, #21
 800132e:	4013      	ands	r3, r2
 8001330:	d110      	bne.n	8001354 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001332:	4b1e      	ldr	r3, [pc, #120]	@ (80013ac <HAL_RCC_OscConfig+0x32c>)
 8001334:	69da      	ldr	r2, [r3, #28]
 8001336:	4b1d      	ldr	r3, [pc, #116]	@ (80013ac <HAL_RCC_OscConfig+0x32c>)
 8001338:	2180      	movs	r1, #128	@ 0x80
 800133a:	0549      	lsls	r1, r1, #21
 800133c:	430a      	orrs	r2, r1
 800133e:	61da      	str	r2, [r3, #28]
 8001340:	4b1a      	ldr	r3, [pc, #104]	@ (80013ac <HAL_RCC_OscConfig+0x32c>)
 8001342:	69da      	ldr	r2, [r3, #28]
 8001344:	2380      	movs	r3, #128	@ 0x80
 8001346:	055b      	lsls	r3, r3, #21
 8001348:	4013      	ands	r3, r2
 800134a:	60fb      	str	r3, [r7, #12]
 800134c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800134e:	183b      	adds	r3, r7, r0
 8001350:	2201      	movs	r2, #1
 8001352:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001354:	4b18      	ldr	r3, [pc, #96]	@ (80013b8 <HAL_RCC_OscConfig+0x338>)
 8001356:	681a      	ldr	r2, [r3, #0]
 8001358:	2380      	movs	r3, #128	@ 0x80
 800135a:	005b      	lsls	r3, r3, #1
 800135c:	4013      	ands	r3, r2
 800135e:	d11a      	bne.n	8001396 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001360:	4b15      	ldr	r3, [pc, #84]	@ (80013b8 <HAL_RCC_OscConfig+0x338>)
 8001362:	681a      	ldr	r2, [r3, #0]
 8001364:	4b14      	ldr	r3, [pc, #80]	@ (80013b8 <HAL_RCC_OscConfig+0x338>)
 8001366:	2180      	movs	r1, #128	@ 0x80
 8001368:	0049      	lsls	r1, r1, #1
 800136a:	430a      	orrs	r2, r1
 800136c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800136e:	f7ff fb99 	bl	8000aa4 <HAL_GetTick>
 8001372:	0003      	movs	r3, r0
 8001374:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001376:	e008      	b.n	800138a <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001378:	f7ff fb94 	bl	8000aa4 <HAL_GetTick>
 800137c:	0002      	movs	r2, r0
 800137e:	69bb      	ldr	r3, [r7, #24]
 8001380:	1ad3      	subs	r3, r2, r3
 8001382:	2b64      	cmp	r3, #100	@ 0x64
 8001384:	d901      	bls.n	800138a <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8001386:	2303      	movs	r3, #3
 8001388:	e185      	b.n	8001696 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800138a:	4b0b      	ldr	r3, [pc, #44]	@ (80013b8 <HAL_RCC_OscConfig+0x338>)
 800138c:	681a      	ldr	r2, [r3, #0]
 800138e:	2380      	movs	r3, #128	@ 0x80
 8001390:	005b      	lsls	r3, r3, #1
 8001392:	4013      	ands	r3, r2
 8001394:	d0f0      	beq.n	8001378 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	689b      	ldr	r3, [r3, #8]
 800139a:	2b01      	cmp	r3, #1
 800139c:	d10e      	bne.n	80013bc <HAL_RCC_OscConfig+0x33c>
 800139e:	4b03      	ldr	r3, [pc, #12]	@ (80013ac <HAL_RCC_OscConfig+0x32c>)
 80013a0:	6a1a      	ldr	r2, [r3, #32]
 80013a2:	4b02      	ldr	r3, [pc, #8]	@ (80013ac <HAL_RCC_OscConfig+0x32c>)
 80013a4:	2101      	movs	r1, #1
 80013a6:	430a      	orrs	r2, r1
 80013a8:	621a      	str	r2, [r3, #32]
 80013aa:	e035      	b.n	8001418 <HAL_RCC_OscConfig+0x398>
 80013ac:	40021000 	.word	0x40021000
 80013b0:	fffeffff 	.word	0xfffeffff
 80013b4:	fffbffff 	.word	0xfffbffff
 80013b8:	40007000 	.word	0x40007000
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	689b      	ldr	r3, [r3, #8]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d10c      	bne.n	80013de <HAL_RCC_OscConfig+0x35e>
 80013c4:	4bb6      	ldr	r3, [pc, #728]	@ (80016a0 <HAL_RCC_OscConfig+0x620>)
 80013c6:	6a1a      	ldr	r2, [r3, #32]
 80013c8:	4bb5      	ldr	r3, [pc, #724]	@ (80016a0 <HAL_RCC_OscConfig+0x620>)
 80013ca:	2101      	movs	r1, #1
 80013cc:	438a      	bics	r2, r1
 80013ce:	621a      	str	r2, [r3, #32]
 80013d0:	4bb3      	ldr	r3, [pc, #716]	@ (80016a0 <HAL_RCC_OscConfig+0x620>)
 80013d2:	6a1a      	ldr	r2, [r3, #32]
 80013d4:	4bb2      	ldr	r3, [pc, #712]	@ (80016a0 <HAL_RCC_OscConfig+0x620>)
 80013d6:	2104      	movs	r1, #4
 80013d8:	438a      	bics	r2, r1
 80013da:	621a      	str	r2, [r3, #32]
 80013dc:	e01c      	b.n	8001418 <HAL_RCC_OscConfig+0x398>
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	689b      	ldr	r3, [r3, #8]
 80013e2:	2b05      	cmp	r3, #5
 80013e4:	d10c      	bne.n	8001400 <HAL_RCC_OscConfig+0x380>
 80013e6:	4bae      	ldr	r3, [pc, #696]	@ (80016a0 <HAL_RCC_OscConfig+0x620>)
 80013e8:	6a1a      	ldr	r2, [r3, #32]
 80013ea:	4bad      	ldr	r3, [pc, #692]	@ (80016a0 <HAL_RCC_OscConfig+0x620>)
 80013ec:	2104      	movs	r1, #4
 80013ee:	430a      	orrs	r2, r1
 80013f0:	621a      	str	r2, [r3, #32]
 80013f2:	4bab      	ldr	r3, [pc, #684]	@ (80016a0 <HAL_RCC_OscConfig+0x620>)
 80013f4:	6a1a      	ldr	r2, [r3, #32]
 80013f6:	4baa      	ldr	r3, [pc, #680]	@ (80016a0 <HAL_RCC_OscConfig+0x620>)
 80013f8:	2101      	movs	r1, #1
 80013fa:	430a      	orrs	r2, r1
 80013fc:	621a      	str	r2, [r3, #32]
 80013fe:	e00b      	b.n	8001418 <HAL_RCC_OscConfig+0x398>
 8001400:	4ba7      	ldr	r3, [pc, #668]	@ (80016a0 <HAL_RCC_OscConfig+0x620>)
 8001402:	6a1a      	ldr	r2, [r3, #32]
 8001404:	4ba6      	ldr	r3, [pc, #664]	@ (80016a0 <HAL_RCC_OscConfig+0x620>)
 8001406:	2101      	movs	r1, #1
 8001408:	438a      	bics	r2, r1
 800140a:	621a      	str	r2, [r3, #32]
 800140c:	4ba4      	ldr	r3, [pc, #656]	@ (80016a0 <HAL_RCC_OscConfig+0x620>)
 800140e:	6a1a      	ldr	r2, [r3, #32]
 8001410:	4ba3      	ldr	r3, [pc, #652]	@ (80016a0 <HAL_RCC_OscConfig+0x620>)
 8001412:	2104      	movs	r1, #4
 8001414:	438a      	bics	r2, r1
 8001416:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	689b      	ldr	r3, [r3, #8]
 800141c:	2b00      	cmp	r3, #0
 800141e:	d014      	beq.n	800144a <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001420:	f7ff fb40 	bl	8000aa4 <HAL_GetTick>
 8001424:	0003      	movs	r3, r0
 8001426:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001428:	e009      	b.n	800143e <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800142a:	f7ff fb3b 	bl	8000aa4 <HAL_GetTick>
 800142e:	0002      	movs	r2, r0
 8001430:	69bb      	ldr	r3, [r7, #24]
 8001432:	1ad3      	subs	r3, r2, r3
 8001434:	4a9b      	ldr	r2, [pc, #620]	@ (80016a4 <HAL_RCC_OscConfig+0x624>)
 8001436:	4293      	cmp	r3, r2
 8001438:	d901      	bls.n	800143e <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 800143a:	2303      	movs	r3, #3
 800143c:	e12b      	b.n	8001696 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800143e:	4b98      	ldr	r3, [pc, #608]	@ (80016a0 <HAL_RCC_OscConfig+0x620>)
 8001440:	6a1b      	ldr	r3, [r3, #32]
 8001442:	2202      	movs	r2, #2
 8001444:	4013      	ands	r3, r2
 8001446:	d0f0      	beq.n	800142a <HAL_RCC_OscConfig+0x3aa>
 8001448:	e013      	b.n	8001472 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800144a:	f7ff fb2b 	bl	8000aa4 <HAL_GetTick>
 800144e:	0003      	movs	r3, r0
 8001450:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001452:	e009      	b.n	8001468 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001454:	f7ff fb26 	bl	8000aa4 <HAL_GetTick>
 8001458:	0002      	movs	r2, r0
 800145a:	69bb      	ldr	r3, [r7, #24]
 800145c:	1ad3      	subs	r3, r2, r3
 800145e:	4a91      	ldr	r2, [pc, #580]	@ (80016a4 <HAL_RCC_OscConfig+0x624>)
 8001460:	4293      	cmp	r3, r2
 8001462:	d901      	bls.n	8001468 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8001464:	2303      	movs	r3, #3
 8001466:	e116      	b.n	8001696 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001468:	4b8d      	ldr	r3, [pc, #564]	@ (80016a0 <HAL_RCC_OscConfig+0x620>)
 800146a:	6a1b      	ldr	r3, [r3, #32]
 800146c:	2202      	movs	r2, #2
 800146e:	4013      	ands	r3, r2
 8001470:	d1f0      	bne.n	8001454 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001472:	231f      	movs	r3, #31
 8001474:	18fb      	adds	r3, r7, r3
 8001476:	781b      	ldrb	r3, [r3, #0]
 8001478:	2b01      	cmp	r3, #1
 800147a:	d105      	bne.n	8001488 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800147c:	4b88      	ldr	r3, [pc, #544]	@ (80016a0 <HAL_RCC_OscConfig+0x620>)
 800147e:	69da      	ldr	r2, [r3, #28]
 8001480:	4b87      	ldr	r3, [pc, #540]	@ (80016a0 <HAL_RCC_OscConfig+0x620>)
 8001482:	4989      	ldr	r1, [pc, #548]	@ (80016a8 <HAL_RCC_OscConfig+0x628>)
 8001484:	400a      	ands	r2, r1
 8001486:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	2210      	movs	r2, #16
 800148e:	4013      	ands	r3, r2
 8001490:	d063      	beq.n	800155a <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	695b      	ldr	r3, [r3, #20]
 8001496:	2b01      	cmp	r3, #1
 8001498:	d12a      	bne.n	80014f0 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800149a:	4b81      	ldr	r3, [pc, #516]	@ (80016a0 <HAL_RCC_OscConfig+0x620>)
 800149c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800149e:	4b80      	ldr	r3, [pc, #512]	@ (80016a0 <HAL_RCC_OscConfig+0x620>)
 80014a0:	2104      	movs	r1, #4
 80014a2:	430a      	orrs	r2, r1
 80014a4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80014a6:	4b7e      	ldr	r3, [pc, #504]	@ (80016a0 <HAL_RCC_OscConfig+0x620>)
 80014a8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80014aa:	4b7d      	ldr	r3, [pc, #500]	@ (80016a0 <HAL_RCC_OscConfig+0x620>)
 80014ac:	2101      	movs	r1, #1
 80014ae:	430a      	orrs	r2, r1
 80014b0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014b2:	f7ff faf7 	bl	8000aa4 <HAL_GetTick>
 80014b6:	0003      	movs	r3, r0
 80014b8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80014ba:	e008      	b.n	80014ce <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80014bc:	f7ff faf2 	bl	8000aa4 <HAL_GetTick>
 80014c0:	0002      	movs	r2, r0
 80014c2:	69bb      	ldr	r3, [r7, #24]
 80014c4:	1ad3      	subs	r3, r2, r3
 80014c6:	2b02      	cmp	r3, #2
 80014c8:	d901      	bls.n	80014ce <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 80014ca:	2303      	movs	r3, #3
 80014cc:	e0e3      	b.n	8001696 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80014ce:	4b74      	ldr	r3, [pc, #464]	@ (80016a0 <HAL_RCC_OscConfig+0x620>)
 80014d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80014d2:	2202      	movs	r2, #2
 80014d4:	4013      	ands	r3, r2
 80014d6:	d0f1      	beq.n	80014bc <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80014d8:	4b71      	ldr	r3, [pc, #452]	@ (80016a0 <HAL_RCC_OscConfig+0x620>)
 80014da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80014dc:	22f8      	movs	r2, #248	@ 0xf8
 80014de:	4393      	bics	r3, r2
 80014e0:	0019      	movs	r1, r3
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	699b      	ldr	r3, [r3, #24]
 80014e6:	00da      	lsls	r2, r3, #3
 80014e8:	4b6d      	ldr	r3, [pc, #436]	@ (80016a0 <HAL_RCC_OscConfig+0x620>)
 80014ea:	430a      	orrs	r2, r1
 80014ec:	635a      	str	r2, [r3, #52]	@ 0x34
 80014ee:	e034      	b.n	800155a <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	695b      	ldr	r3, [r3, #20]
 80014f4:	3305      	adds	r3, #5
 80014f6:	d111      	bne.n	800151c <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80014f8:	4b69      	ldr	r3, [pc, #420]	@ (80016a0 <HAL_RCC_OscConfig+0x620>)
 80014fa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80014fc:	4b68      	ldr	r3, [pc, #416]	@ (80016a0 <HAL_RCC_OscConfig+0x620>)
 80014fe:	2104      	movs	r1, #4
 8001500:	438a      	bics	r2, r1
 8001502:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001504:	4b66      	ldr	r3, [pc, #408]	@ (80016a0 <HAL_RCC_OscConfig+0x620>)
 8001506:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001508:	22f8      	movs	r2, #248	@ 0xf8
 800150a:	4393      	bics	r3, r2
 800150c:	0019      	movs	r1, r3
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	699b      	ldr	r3, [r3, #24]
 8001512:	00da      	lsls	r2, r3, #3
 8001514:	4b62      	ldr	r3, [pc, #392]	@ (80016a0 <HAL_RCC_OscConfig+0x620>)
 8001516:	430a      	orrs	r2, r1
 8001518:	635a      	str	r2, [r3, #52]	@ 0x34
 800151a:	e01e      	b.n	800155a <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800151c:	4b60      	ldr	r3, [pc, #384]	@ (80016a0 <HAL_RCC_OscConfig+0x620>)
 800151e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001520:	4b5f      	ldr	r3, [pc, #380]	@ (80016a0 <HAL_RCC_OscConfig+0x620>)
 8001522:	2104      	movs	r1, #4
 8001524:	430a      	orrs	r2, r1
 8001526:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001528:	4b5d      	ldr	r3, [pc, #372]	@ (80016a0 <HAL_RCC_OscConfig+0x620>)
 800152a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800152c:	4b5c      	ldr	r3, [pc, #368]	@ (80016a0 <HAL_RCC_OscConfig+0x620>)
 800152e:	2101      	movs	r1, #1
 8001530:	438a      	bics	r2, r1
 8001532:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001534:	f7ff fab6 	bl	8000aa4 <HAL_GetTick>
 8001538:	0003      	movs	r3, r0
 800153a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800153c:	e008      	b.n	8001550 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800153e:	f7ff fab1 	bl	8000aa4 <HAL_GetTick>
 8001542:	0002      	movs	r2, r0
 8001544:	69bb      	ldr	r3, [r7, #24]
 8001546:	1ad3      	subs	r3, r2, r3
 8001548:	2b02      	cmp	r3, #2
 800154a:	d901      	bls.n	8001550 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 800154c:	2303      	movs	r3, #3
 800154e:	e0a2      	b.n	8001696 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001550:	4b53      	ldr	r3, [pc, #332]	@ (80016a0 <HAL_RCC_OscConfig+0x620>)
 8001552:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001554:	2202      	movs	r2, #2
 8001556:	4013      	ands	r3, r2
 8001558:	d1f1      	bne.n	800153e <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6a1b      	ldr	r3, [r3, #32]
 800155e:	2b00      	cmp	r3, #0
 8001560:	d100      	bne.n	8001564 <HAL_RCC_OscConfig+0x4e4>
 8001562:	e097      	b.n	8001694 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001564:	4b4e      	ldr	r3, [pc, #312]	@ (80016a0 <HAL_RCC_OscConfig+0x620>)
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	220c      	movs	r2, #12
 800156a:	4013      	ands	r3, r2
 800156c:	2b08      	cmp	r3, #8
 800156e:	d100      	bne.n	8001572 <HAL_RCC_OscConfig+0x4f2>
 8001570:	e06b      	b.n	800164a <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	6a1b      	ldr	r3, [r3, #32]
 8001576:	2b02      	cmp	r3, #2
 8001578:	d14c      	bne.n	8001614 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800157a:	4b49      	ldr	r3, [pc, #292]	@ (80016a0 <HAL_RCC_OscConfig+0x620>)
 800157c:	681a      	ldr	r2, [r3, #0]
 800157e:	4b48      	ldr	r3, [pc, #288]	@ (80016a0 <HAL_RCC_OscConfig+0x620>)
 8001580:	494a      	ldr	r1, [pc, #296]	@ (80016ac <HAL_RCC_OscConfig+0x62c>)
 8001582:	400a      	ands	r2, r1
 8001584:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001586:	f7ff fa8d 	bl	8000aa4 <HAL_GetTick>
 800158a:	0003      	movs	r3, r0
 800158c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800158e:	e008      	b.n	80015a2 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001590:	f7ff fa88 	bl	8000aa4 <HAL_GetTick>
 8001594:	0002      	movs	r2, r0
 8001596:	69bb      	ldr	r3, [r7, #24]
 8001598:	1ad3      	subs	r3, r2, r3
 800159a:	2b02      	cmp	r3, #2
 800159c:	d901      	bls.n	80015a2 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 800159e:	2303      	movs	r3, #3
 80015a0:	e079      	b.n	8001696 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015a2:	4b3f      	ldr	r3, [pc, #252]	@ (80016a0 <HAL_RCC_OscConfig+0x620>)
 80015a4:	681a      	ldr	r2, [r3, #0]
 80015a6:	2380      	movs	r3, #128	@ 0x80
 80015a8:	049b      	lsls	r3, r3, #18
 80015aa:	4013      	ands	r3, r2
 80015ac:	d1f0      	bne.n	8001590 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80015ae:	4b3c      	ldr	r3, [pc, #240]	@ (80016a0 <HAL_RCC_OscConfig+0x620>)
 80015b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015b2:	220f      	movs	r2, #15
 80015b4:	4393      	bics	r3, r2
 80015b6:	0019      	movs	r1, r3
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80015bc:	4b38      	ldr	r3, [pc, #224]	@ (80016a0 <HAL_RCC_OscConfig+0x620>)
 80015be:	430a      	orrs	r2, r1
 80015c0:	62da      	str	r2, [r3, #44]	@ 0x2c
 80015c2:	4b37      	ldr	r3, [pc, #220]	@ (80016a0 <HAL_RCC_OscConfig+0x620>)
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	4a3a      	ldr	r2, [pc, #232]	@ (80016b0 <HAL_RCC_OscConfig+0x630>)
 80015c8:	4013      	ands	r3, r2
 80015ca:	0019      	movs	r1, r3
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015d4:	431a      	orrs	r2, r3
 80015d6:	4b32      	ldr	r3, [pc, #200]	@ (80016a0 <HAL_RCC_OscConfig+0x620>)
 80015d8:	430a      	orrs	r2, r1
 80015da:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80015dc:	4b30      	ldr	r3, [pc, #192]	@ (80016a0 <HAL_RCC_OscConfig+0x620>)
 80015de:	681a      	ldr	r2, [r3, #0]
 80015e0:	4b2f      	ldr	r3, [pc, #188]	@ (80016a0 <HAL_RCC_OscConfig+0x620>)
 80015e2:	2180      	movs	r1, #128	@ 0x80
 80015e4:	0449      	lsls	r1, r1, #17
 80015e6:	430a      	orrs	r2, r1
 80015e8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015ea:	f7ff fa5b 	bl	8000aa4 <HAL_GetTick>
 80015ee:	0003      	movs	r3, r0
 80015f0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80015f2:	e008      	b.n	8001606 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015f4:	f7ff fa56 	bl	8000aa4 <HAL_GetTick>
 80015f8:	0002      	movs	r2, r0
 80015fa:	69bb      	ldr	r3, [r7, #24]
 80015fc:	1ad3      	subs	r3, r2, r3
 80015fe:	2b02      	cmp	r3, #2
 8001600:	d901      	bls.n	8001606 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8001602:	2303      	movs	r3, #3
 8001604:	e047      	b.n	8001696 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001606:	4b26      	ldr	r3, [pc, #152]	@ (80016a0 <HAL_RCC_OscConfig+0x620>)
 8001608:	681a      	ldr	r2, [r3, #0]
 800160a:	2380      	movs	r3, #128	@ 0x80
 800160c:	049b      	lsls	r3, r3, #18
 800160e:	4013      	ands	r3, r2
 8001610:	d0f0      	beq.n	80015f4 <HAL_RCC_OscConfig+0x574>
 8001612:	e03f      	b.n	8001694 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001614:	4b22      	ldr	r3, [pc, #136]	@ (80016a0 <HAL_RCC_OscConfig+0x620>)
 8001616:	681a      	ldr	r2, [r3, #0]
 8001618:	4b21      	ldr	r3, [pc, #132]	@ (80016a0 <HAL_RCC_OscConfig+0x620>)
 800161a:	4924      	ldr	r1, [pc, #144]	@ (80016ac <HAL_RCC_OscConfig+0x62c>)
 800161c:	400a      	ands	r2, r1
 800161e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001620:	f7ff fa40 	bl	8000aa4 <HAL_GetTick>
 8001624:	0003      	movs	r3, r0
 8001626:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001628:	e008      	b.n	800163c <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800162a:	f7ff fa3b 	bl	8000aa4 <HAL_GetTick>
 800162e:	0002      	movs	r2, r0
 8001630:	69bb      	ldr	r3, [r7, #24]
 8001632:	1ad3      	subs	r3, r2, r3
 8001634:	2b02      	cmp	r3, #2
 8001636:	d901      	bls.n	800163c <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8001638:	2303      	movs	r3, #3
 800163a:	e02c      	b.n	8001696 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800163c:	4b18      	ldr	r3, [pc, #96]	@ (80016a0 <HAL_RCC_OscConfig+0x620>)
 800163e:	681a      	ldr	r2, [r3, #0]
 8001640:	2380      	movs	r3, #128	@ 0x80
 8001642:	049b      	lsls	r3, r3, #18
 8001644:	4013      	ands	r3, r2
 8001646:	d1f0      	bne.n	800162a <HAL_RCC_OscConfig+0x5aa>
 8001648:	e024      	b.n	8001694 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6a1b      	ldr	r3, [r3, #32]
 800164e:	2b01      	cmp	r3, #1
 8001650:	d101      	bne.n	8001656 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8001652:	2301      	movs	r3, #1
 8001654:	e01f      	b.n	8001696 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001656:	4b12      	ldr	r3, [pc, #72]	@ (80016a0 <HAL_RCC_OscConfig+0x620>)
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800165c:	4b10      	ldr	r3, [pc, #64]	@ (80016a0 <HAL_RCC_OscConfig+0x620>)
 800165e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001660:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001662:	697a      	ldr	r2, [r7, #20]
 8001664:	2380      	movs	r3, #128	@ 0x80
 8001666:	025b      	lsls	r3, r3, #9
 8001668:	401a      	ands	r2, r3
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800166e:	429a      	cmp	r2, r3
 8001670:	d10e      	bne.n	8001690 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001672:	693b      	ldr	r3, [r7, #16]
 8001674:	220f      	movs	r2, #15
 8001676:	401a      	ands	r2, r3
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800167c:	429a      	cmp	r2, r3
 800167e:	d107      	bne.n	8001690 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001680:	697a      	ldr	r2, [r7, #20]
 8001682:	23f0      	movs	r3, #240	@ 0xf0
 8001684:	039b      	lsls	r3, r3, #14
 8001686:	401a      	ands	r2, r3
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800168c:	429a      	cmp	r2, r3
 800168e:	d001      	beq.n	8001694 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8001690:	2301      	movs	r3, #1
 8001692:	e000      	b.n	8001696 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8001694:	2300      	movs	r3, #0
}
 8001696:	0018      	movs	r0, r3
 8001698:	46bd      	mov	sp, r7
 800169a:	b008      	add	sp, #32
 800169c:	bd80      	pop	{r7, pc}
 800169e:	46c0      	nop			@ (mov r8, r8)
 80016a0:	40021000 	.word	0x40021000
 80016a4:	00001388 	.word	0x00001388
 80016a8:	efffffff 	.word	0xefffffff
 80016ac:	feffffff 	.word	0xfeffffff
 80016b0:	ffc2ffff 	.word	0xffc2ffff

080016b4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b084      	sub	sp, #16
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
 80016bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d101      	bne.n	80016c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80016c4:	2301      	movs	r3, #1
 80016c6:	e0b3      	b.n	8001830 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80016c8:	4b5b      	ldr	r3, [pc, #364]	@ (8001838 <HAL_RCC_ClockConfig+0x184>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	2201      	movs	r2, #1
 80016ce:	4013      	ands	r3, r2
 80016d0:	683a      	ldr	r2, [r7, #0]
 80016d2:	429a      	cmp	r2, r3
 80016d4:	d911      	bls.n	80016fa <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016d6:	4b58      	ldr	r3, [pc, #352]	@ (8001838 <HAL_RCC_ClockConfig+0x184>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	2201      	movs	r2, #1
 80016dc:	4393      	bics	r3, r2
 80016de:	0019      	movs	r1, r3
 80016e0:	4b55      	ldr	r3, [pc, #340]	@ (8001838 <HAL_RCC_ClockConfig+0x184>)
 80016e2:	683a      	ldr	r2, [r7, #0]
 80016e4:	430a      	orrs	r2, r1
 80016e6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016e8:	4b53      	ldr	r3, [pc, #332]	@ (8001838 <HAL_RCC_ClockConfig+0x184>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	2201      	movs	r2, #1
 80016ee:	4013      	ands	r3, r2
 80016f0:	683a      	ldr	r2, [r7, #0]
 80016f2:	429a      	cmp	r2, r3
 80016f4:	d001      	beq.n	80016fa <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80016f6:	2301      	movs	r3, #1
 80016f8:	e09a      	b.n	8001830 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	2202      	movs	r2, #2
 8001700:	4013      	ands	r3, r2
 8001702:	d015      	beq.n	8001730 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	2204      	movs	r2, #4
 800170a:	4013      	ands	r3, r2
 800170c:	d006      	beq.n	800171c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800170e:	4b4b      	ldr	r3, [pc, #300]	@ (800183c <HAL_RCC_ClockConfig+0x188>)
 8001710:	685a      	ldr	r2, [r3, #4]
 8001712:	4b4a      	ldr	r3, [pc, #296]	@ (800183c <HAL_RCC_ClockConfig+0x188>)
 8001714:	21e0      	movs	r1, #224	@ 0xe0
 8001716:	00c9      	lsls	r1, r1, #3
 8001718:	430a      	orrs	r2, r1
 800171a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800171c:	4b47      	ldr	r3, [pc, #284]	@ (800183c <HAL_RCC_ClockConfig+0x188>)
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	22f0      	movs	r2, #240	@ 0xf0
 8001722:	4393      	bics	r3, r2
 8001724:	0019      	movs	r1, r3
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	689a      	ldr	r2, [r3, #8]
 800172a:	4b44      	ldr	r3, [pc, #272]	@ (800183c <HAL_RCC_ClockConfig+0x188>)
 800172c:	430a      	orrs	r2, r1
 800172e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	2201      	movs	r2, #1
 8001736:	4013      	ands	r3, r2
 8001738:	d040      	beq.n	80017bc <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	2b01      	cmp	r3, #1
 8001740:	d107      	bne.n	8001752 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001742:	4b3e      	ldr	r3, [pc, #248]	@ (800183c <HAL_RCC_ClockConfig+0x188>)
 8001744:	681a      	ldr	r2, [r3, #0]
 8001746:	2380      	movs	r3, #128	@ 0x80
 8001748:	029b      	lsls	r3, r3, #10
 800174a:	4013      	ands	r3, r2
 800174c:	d114      	bne.n	8001778 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800174e:	2301      	movs	r3, #1
 8001750:	e06e      	b.n	8001830 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	2b02      	cmp	r3, #2
 8001758:	d107      	bne.n	800176a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800175a:	4b38      	ldr	r3, [pc, #224]	@ (800183c <HAL_RCC_ClockConfig+0x188>)
 800175c:	681a      	ldr	r2, [r3, #0]
 800175e:	2380      	movs	r3, #128	@ 0x80
 8001760:	049b      	lsls	r3, r3, #18
 8001762:	4013      	ands	r3, r2
 8001764:	d108      	bne.n	8001778 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001766:	2301      	movs	r3, #1
 8001768:	e062      	b.n	8001830 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800176a:	4b34      	ldr	r3, [pc, #208]	@ (800183c <HAL_RCC_ClockConfig+0x188>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	2202      	movs	r2, #2
 8001770:	4013      	ands	r3, r2
 8001772:	d101      	bne.n	8001778 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001774:	2301      	movs	r3, #1
 8001776:	e05b      	b.n	8001830 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001778:	4b30      	ldr	r3, [pc, #192]	@ (800183c <HAL_RCC_ClockConfig+0x188>)
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	2203      	movs	r2, #3
 800177e:	4393      	bics	r3, r2
 8001780:	0019      	movs	r1, r3
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	685a      	ldr	r2, [r3, #4]
 8001786:	4b2d      	ldr	r3, [pc, #180]	@ (800183c <HAL_RCC_ClockConfig+0x188>)
 8001788:	430a      	orrs	r2, r1
 800178a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800178c:	f7ff f98a 	bl	8000aa4 <HAL_GetTick>
 8001790:	0003      	movs	r3, r0
 8001792:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001794:	e009      	b.n	80017aa <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001796:	f7ff f985 	bl	8000aa4 <HAL_GetTick>
 800179a:	0002      	movs	r2, r0
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	1ad3      	subs	r3, r2, r3
 80017a0:	4a27      	ldr	r2, [pc, #156]	@ (8001840 <HAL_RCC_ClockConfig+0x18c>)
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d901      	bls.n	80017aa <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 80017a6:	2303      	movs	r3, #3
 80017a8:	e042      	b.n	8001830 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017aa:	4b24      	ldr	r3, [pc, #144]	@ (800183c <HAL_RCC_ClockConfig+0x188>)
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	220c      	movs	r2, #12
 80017b0:	401a      	ands	r2, r3
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	009b      	lsls	r3, r3, #2
 80017b8:	429a      	cmp	r2, r3
 80017ba:	d1ec      	bne.n	8001796 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80017bc:	4b1e      	ldr	r3, [pc, #120]	@ (8001838 <HAL_RCC_ClockConfig+0x184>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	2201      	movs	r2, #1
 80017c2:	4013      	ands	r3, r2
 80017c4:	683a      	ldr	r2, [r7, #0]
 80017c6:	429a      	cmp	r2, r3
 80017c8:	d211      	bcs.n	80017ee <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017ca:	4b1b      	ldr	r3, [pc, #108]	@ (8001838 <HAL_RCC_ClockConfig+0x184>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	2201      	movs	r2, #1
 80017d0:	4393      	bics	r3, r2
 80017d2:	0019      	movs	r1, r3
 80017d4:	4b18      	ldr	r3, [pc, #96]	@ (8001838 <HAL_RCC_ClockConfig+0x184>)
 80017d6:	683a      	ldr	r2, [r7, #0]
 80017d8:	430a      	orrs	r2, r1
 80017da:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017dc:	4b16      	ldr	r3, [pc, #88]	@ (8001838 <HAL_RCC_ClockConfig+0x184>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	2201      	movs	r2, #1
 80017e2:	4013      	ands	r3, r2
 80017e4:	683a      	ldr	r2, [r7, #0]
 80017e6:	429a      	cmp	r2, r3
 80017e8:	d001      	beq.n	80017ee <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 80017ea:	2301      	movs	r3, #1
 80017ec:	e020      	b.n	8001830 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	2204      	movs	r2, #4
 80017f4:	4013      	ands	r3, r2
 80017f6:	d009      	beq.n	800180c <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80017f8:	4b10      	ldr	r3, [pc, #64]	@ (800183c <HAL_RCC_ClockConfig+0x188>)
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	4a11      	ldr	r2, [pc, #68]	@ (8001844 <HAL_RCC_ClockConfig+0x190>)
 80017fe:	4013      	ands	r3, r2
 8001800:	0019      	movs	r1, r3
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	68da      	ldr	r2, [r3, #12]
 8001806:	4b0d      	ldr	r3, [pc, #52]	@ (800183c <HAL_RCC_ClockConfig+0x188>)
 8001808:	430a      	orrs	r2, r1
 800180a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800180c:	f000 f820 	bl	8001850 <HAL_RCC_GetSysClockFreq>
 8001810:	0001      	movs	r1, r0
 8001812:	4b0a      	ldr	r3, [pc, #40]	@ (800183c <HAL_RCC_ClockConfig+0x188>)
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	091b      	lsrs	r3, r3, #4
 8001818:	220f      	movs	r2, #15
 800181a:	4013      	ands	r3, r2
 800181c:	4a0a      	ldr	r2, [pc, #40]	@ (8001848 <HAL_RCC_ClockConfig+0x194>)
 800181e:	5cd3      	ldrb	r3, [r2, r3]
 8001820:	000a      	movs	r2, r1
 8001822:	40da      	lsrs	r2, r3
 8001824:	4b09      	ldr	r3, [pc, #36]	@ (800184c <HAL_RCC_ClockConfig+0x198>)
 8001826:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001828:	2003      	movs	r0, #3
 800182a:	f7ff f8f5 	bl	8000a18 <HAL_InitTick>
  
  return HAL_OK;
 800182e:	2300      	movs	r3, #0
}
 8001830:	0018      	movs	r0, r3
 8001832:	46bd      	mov	sp, r7
 8001834:	b004      	add	sp, #16
 8001836:	bd80      	pop	{r7, pc}
 8001838:	40022000 	.word	0x40022000
 800183c:	40021000 	.word	0x40021000
 8001840:	00001388 	.word	0x00001388
 8001844:	fffff8ff 	.word	0xfffff8ff
 8001848:	080027a0 	.word	0x080027a0
 800184c:	20000004 	.word	0x20000004

08001850 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b086      	sub	sp, #24
 8001854:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001856:	2300      	movs	r3, #0
 8001858:	60fb      	str	r3, [r7, #12]
 800185a:	2300      	movs	r3, #0
 800185c:	60bb      	str	r3, [r7, #8]
 800185e:	2300      	movs	r3, #0
 8001860:	617b      	str	r3, [r7, #20]
 8001862:	2300      	movs	r3, #0
 8001864:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001866:	2300      	movs	r3, #0
 8001868:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800186a:	4b20      	ldr	r3, [pc, #128]	@ (80018ec <HAL_RCC_GetSysClockFreq+0x9c>)
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	220c      	movs	r2, #12
 8001874:	4013      	ands	r3, r2
 8001876:	2b04      	cmp	r3, #4
 8001878:	d002      	beq.n	8001880 <HAL_RCC_GetSysClockFreq+0x30>
 800187a:	2b08      	cmp	r3, #8
 800187c:	d003      	beq.n	8001886 <HAL_RCC_GetSysClockFreq+0x36>
 800187e:	e02c      	b.n	80018da <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001880:	4b1b      	ldr	r3, [pc, #108]	@ (80018f0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001882:	613b      	str	r3, [r7, #16]
      break;
 8001884:	e02c      	b.n	80018e0 <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	0c9b      	lsrs	r3, r3, #18
 800188a:	220f      	movs	r2, #15
 800188c:	4013      	ands	r3, r2
 800188e:	4a19      	ldr	r2, [pc, #100]	@ (80018f4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001890:	5cd3      	ldrb	r3, [r2, r3]
 8001892:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001894:	4b15      	ldr	r3, [pc, #84]	@ (80018ec <HAL_RCC_GetSysClockFreq+0x9c>)
 8001896:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001898:	220f      	movs	r2, #15
 800189a:	4013      	ands	r3, r2
 800189c:	4a16      	ldr	r2, [pc, #88]	@ (80018f8 <HAL_RCC_GetSysClockFreq+0xa8>)
 800189e:	5cd3      	ldrb	r3, [r2, r3]
 80018a0:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80018a2:	68fa      	ldr	r2, [r7, #12]
 80018a4:	2380      	movs	r3, #128	@ 0x80
 80018a6:	025b      	lsls	r3, r3, #9
 80018a8:	4013      	ands	r3, r2
 80018aa:	d009      	beq.n	80018c0 <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80018ac:	68b9      	ldr	r1, [r7, #8]
 80018ae:	4810      	ldr	r0, [pc, #64]	@ (80018f0 <HAL_RCC_GetSysClockFreq+0xa0>)
 80018b0:	f7fe fc2a 	bl	8000108 <__udivsi3>
 80018b4:	0003      	movs	r3, r0
 80018b6:	001a      	movs	r2, r3
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	4353      	muls	r3, r2
 80018bc:	617b      	str	r3, [r7, #20]
 80018be:	e009      	b.n	80018d4 <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80018c0:	6879      	ldr	r1, [r7, #4]
 80018c2:	000a      	movs	r2, r1
 80018c4:	0152      	lsls	r2, r2, #5
 80018c6:	1a52      	subs	r2, r2, r1
 80018c8:	0193      	lsls	r3, r2, #6
 80018ca:	1a9b      	subs	r3, r3, r2
 80018cc:	00db      	lsls	r3, r3, #3
 80018ce:	185b      	adds	r3, r3, r1
 80018d0:	021b      	lsls	r3, r3, #8
 80018d2:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 80018d4:	697b      	ldr	r3, [r7, #20]
 80018d6:	613b      	str	r3, [r7, #16]
      break;
 80018d8:	e002      	b.n	80018e0 <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80018da:	4b05      	ldr	r3, [pc, #20]	@ (80018f0 <HAL_RCC_GetSysClockFreq+0xa0>)
 80018dc:	613b      	str	r3, [r7, #16]
      break;
 80018de:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 80018e0:	693b      	ldr	r3, [r7, #16]
}
 80018e2:	0018      	movs	r0, r3
 80018e4:	46bd      	mov	sp, r7
 80018e6:	b006      	add	sp, #24
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	46c0      	nop			@ (mov r8, r8)
 80018ec:	40021000 	.word	0x40021000
 80018f0:	007a1200 	.word	0x007a1200
 80018f4:	080027b0 	.word	0x080027b0
 80018f8:	080027c0 	.word	0x080027c0

080018fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b082      	sub	sp, #8
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d101      	bne.n	800190e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800190a:	2301      	movs	r3, #1
 800190c:	e042      	b.n	8001994 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	223d      	movs	r2, #61	@ 0x3d
 8001912:	5c9b      	ldrb	r3, [r3, r2]
 8001914:	b2db      	uxtb	r3, r3
 8001916:	2b00      	cmp	r3, #0
 8001918:	d107      	bne.n	800192a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	223c      	movs	r2, #60	@ 0x3c
 800191e:	2100      	movs	r1, #0
 8001920:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	0018      	movs	r0, r3
 8001926:	f7fe ff77 	bl	8000818 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	223d      	movs	r2, #61	@ 0x3d
 800192e:	2102      	movs	r1, #2
 8001930:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681a      	ldr	r2, [r3, #0]
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	3304      	adds	r3, #4
 800193a:	0019      	movs	r1, r3
 800193c:	0010      	movs	r0, r2
 800193e:	f000 fba1 	bl	8002084 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2246      	movs	r2, #70	@ 0x46
 8001946:	2101      	movs	r1, #1
 8001948:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	223e      	movs	r2, #62	@ 0x3e
 800194e:	2101      	movs	r1, #1
 8001950:	5499      	strb	r1, [r3, r2]
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	223f      	movs	r2, #63	@ 0x3f
 8001956:	2101      	movs	r1, #1
 8001958:	5499      	strb	r1, [r3, r2]
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	2240      	movs	r2, #64	@ 0x40
 800195e:	2101      	movs	r1, #1
 8001960:	5499      	strb	r1, [r3, r2]
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	2241      	movs	r2, #65	@ 0x41
 8001966:	2101      	movs	r1, #1
 8001968:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	2242      	movs	r2, #66	@ 0x42
 800196e:	2101      	movs	r1, #1
 8001970:	5499      	strb	r1, [r3, r2]
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	2243      	movs	r2, #67	@ 0x43
 8001976:	2101      	movs	r1, #1
 8001978:	5499      	strb	r1, [r3, r2]
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2244      	movs	r2, #68	@ 0x44
 800197e:	2101      	movs	r1, #1
 8001980:	5499      	strb	r1, [r3, r2]
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	2245      	movs	r2, #69	@ 0x45
 8001986:	2101      	movs	r1, #1
 8001988:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	223d      	movs	r2, #61	@ 0x3d
 800198e:	2101      	movs	r1, #1
 8001990:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001992:	2300      	movs	r3, #0
}
 8001994:	0018      	movs	r0, r3
 8001996:	46bd      	mov	sp, r7
 8001998:	b002      	add	sp, #8
 800199a:	bd80      	pop	{r7, pc}

0800199c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b084      	sub	sp, #16
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	223d      	movs	r2, #61	@ 0x3d
 80019a8:	5c9b      	ldrb	r3, [r3, r2]
 80019aa:	b2db      	uxtb	r3, r3
 80019ac:	2b01      	cmp	r3, #1
 80019ae:	d001      	beq.n	80019b4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80019b0:	2301      	movs	r3, #1
 80019b2:	e030      	b.n	8001a16 <HAL_TIM_Base_Start_IT+0x7a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	223d      	movs	r2, #61	@ 0x3d
 80019b8:	2102      	movs	r1, #2
 80019ba:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	68da      	ldr	r2, [r3, #12]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	2101      	movs	r1, #1
 80019c8:	430a      	orrs	r2, r1
 80019ca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a13      	ldr	r2, [pc, #76]	@ (8001a20 <HAL_TIM_Base_Start_IT+0x84>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d004      	beq.n	80019e0 <HAL_TIM_Base_Start_IT+0x44>
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4a12      	ldr	r2, [pc, #72]	@ (8001a24 <HAL_TIM_Base_Start_IT+0x88>)
 80019dc:	4293      	cmp	r3, r2
 80019de:	d111      	bne.n	8001a04 <HAL_TIM_Base_Start_IT+0x68>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	689b      	ldr	r3, [r3, #8]
 80019e6:	2207      	movs	r2, #7
 80019e8:	4013      	ands	r3, r2
 80019ea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	2b06      	cmp	r3, #6
 80019f0:	d010      	beq.n	8001a14 <HAL_TIM_Base_Start_IT+0x78>
    {
      __HAL_TIM_ENABLE(htim);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	681a      	ldr	r2, [r3, #0]
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	2101      	movs	r1, #1
 80019fe:	430a      	orrs	r2, r1
 8001a00:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a02:	e007      	b.n	8001a14 <HAL_TIM_Base_Start_IT+0x78>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	681a      	ldr	r2, [r3, #0]
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	2101      	movs	r1, #1
 8001a10:	430a      	orrs	r2, r1
 8001a12:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001a14:	2300      	movs	r3, #0
}
 8001a16:	0018      	movs	r0, r3
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	b004      	add	sp, #16
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	46c0      	nop			@ (mov r8, r8)
 8001a20:	40012c00 	.word	0x40012c00
 8001a24:	40000400 	.word	0x40000400

08001a28 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b082      	sub	sp, #8
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	68da      	ldr	r2, [r3, #12]
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	2101      	movs	r1, #1
 8001a3c:	438a      	bics	r2, r1
 8001a3e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	6a1b      	ldr	r3, [r3, #32]
 8001a46:	4a0d      	ldr	r2, [pc, #52]	@ (8001a7c <HAL_TIM_Base_Stop_IT+0x54>)
 8001a48:	4013      	ands	r3, r2
 8001a4a:	d10d      	bne.n	8001a68 <HAL_TIM_Base_Stop_IT+0x40>
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	6a1b      	ldr	r3, [r3, #32]
 8001a52:	4a0b      	ldr	r2, [pc, #44]	@ (8001a80 <HAL_TIM_Base_Stop_IT+0x58>)
 8001a54:	4013      	ands	r3, r2
 8001a56:	d107      	bne.n	8001a68 <HAL_TIM_Base_Stop_IT+0x40>
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	681a      	ldr	r2, [r3, #0]
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	2101      	movs	r1, #1
 8001a64:	438a      	bics	r2, r1
 8001a66:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	223d      	movs	r2, #61	@ 0x3d
 8001a6c:	2101      	movs	r1, #1
 8001a6e:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8001a70:	2300      	movs	r3, #0
}
 8001a72:	0018      	movs	r0, r3
 8001a74:	46bd      	mov	sp, r7
 8001a76:	b002      	add	sp, #8
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	46c0      	nop			@ (mov r8, r8)
 8001a7c:	00001111 	.word	0x00001111
 8001a80:	00000444 	.word	0x00000444

08001a84 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b082      	sub	sp, #8
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d101      	bne.n	8001a96 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001a92:	2301      	movs	r3, #1
 8001a94:	e042      	b.n	8001b1c <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	223d      	movs	r2, #61	@ 0x3d
 8001a9a:	5c9b      	ldrb	r3, [r3, r2]
 8001a9c:	b2db      	uxtb	r3, r3
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d107      	bne.n	8001ab2 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	223c      	movs	r2, #60	@ 0x3c
 8001aa6:	2100      	movs	r1, #0
 8001aa8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	0018      	movs	r0, r3
 8001aae:	f000 f839 	bl	8001b24 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	223d      	movs	r2, #61	@ 0x3d
 8001ab6:	2102      	movs	r1, #2
 8001ab8:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681a      	ldr	r2, [r3, #0]
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	3304      	adds	r3, #4
 8001ac2:	0019      	movs	r1, r3
 8001ac4:	0010      	movs	r0, r2
 8001ac6:	f000 fadd 	bl	8002084 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	2246      	movs	r2, #70	@ 0x46
 8001ace:	2101      	movs	r1, #1
 8001ad0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	223e      	movs	r2, #62	@ 0x3e
 8001ad6:	2101      	movs	r1, #1
 8001ad8:	5499      	strb	r1, [r3, r2]
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	223f      	movs	r2, #63	@ 0x3f
 8001ade:	2101      	movs	r1, #1
 8001ae0:	5499      	strb	r1, [r3, r2]
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	2240      	movs	r2, #64	@ 0x40
 8001ae6:	2101      	movs	r1, #1
 8001ae8:	5499      	strb	r1, [r3, r2]
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2241      	movs	r2, #65	@ 0x41
 8001aee:	2101      	movs	r1, #1
 8001af0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2242      	movs	r2, #66	@ 0x42
 8001af6:	2101      	movs	r1, #1
 8001af8:	5499      	strb	r1, [r3, r2]
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2243      	movs	r2, #67	@ 0x43
 8001afe:	2101      	movs	r1, #1
 8001b00:	5499      	strb	r1, [r3, r2]
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	2244      	movs	r2, #68	@ 0x44
 8001b06:	2101      	movs	r1, #1
 8001b08:	5499      	strb	r1, [r3, r2]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	2245      	movs	r2, #69	@ 0x45
 8001b0e:	2101      	movs	r1, #1
 8001b10:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	223d      	movs	r2, #61	@ 0x3d
 8001b16:	2101      	movs	r1, #1
 8001b18:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001b1a:	2300      	movs	r3, #0
}
 8001b1c:	0018      	movs	r0, r3
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	b002      	add	sp, #8
 8001b22:	bd80      	pop	{r7, pc}

08001b24 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b082      	sub	sp, #8
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001b2c:	46c0      	nop			@ (mov r8, r8)
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	b002      	add	sp, #8
 8001b32:	bd80      	pop	{r7, pc}

08001b34 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b084      	sub	sp, #16
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	68db      	ldr	r3, [r3, #12]
 8001b42:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	691b      	ldr	r3, [r3, #16]
 8001b4a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001b4c:	68bb      	ldr	r3, [r7, #8]
 8001b4e:	2202      	movs	r2, #2
 8001b50:	4013      	ands	r3, r2
 8001b52:	d021      	beq.n	8001b98 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	2202      	movs	r2, #2
 8001b58:	4013      	ands	r3, r2
 8001b5a:	d01d      	beq.n	8001b98 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	2203      	movs	r2, #3
 8001b62:	4252      	negs	r2, r2
 8001b64:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2201      	movs	r2, #1
 8001b6a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	699b      	ldr	r3, [r3, #24]
 8001b72:	2203      	movs	r2, #3
 8001b74:	4013      	ands	r3, r2
 8001b76:	d004      	beq.n	8001b82 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	0018      	movs	r0, r3
 8001b7c:	f000 fa6a 	bl	8002054 <HAL_TIM_IC_CaptureCallback>
 8001b80:	e007      	b.n	8001b92 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	0018      	movs	r0, r3
 8001b86:	f000 fa5d 	bl	8002044 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	0018      	movs	r0, r3
 8001b8e:	f000 fa69 	bl	8002064 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2200      	movs	r2, #0
 8001b96:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001b98:	68bb      	ldr	r3, [r7, #8]
 8001b9a:	2204      	movs	r2, #4
 8001b9c:	4013      	ands	r3, r2
 8001b9e:	d022      	beq.n	8001be6 <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	2204      	movs	r2, #4
 8001ba4:	4013      	ands	r3, r2
 8001ba6:	d01e      	beq.n	8001be6 <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	2205      	movs	r2, #5
 8001bae:	4252      	negs	r2, r2
 8001bb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2202      	movs	r2, #2
 8001bb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	699a      	ldr	r2, [r3, #24]
 8001bbe:	23c0      	movs	r3, #192	@ 0xc0
 8001bc0:	009b      	lsls	r3, r3, #2
 8001bc2:	4013      	ands	r3, r2
 8001bc4:	d004      	beq.n	8001bd0 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	0018      	movs	r0, r3
 8001bca:	f000 fa43 	bl	8002054 <HAL_TIM_IC_CaptureCallback>
 8001bce:	e007      	b.n	8001be0 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	0018      	movs	r0, r3
 8001bd4:	f000 fa36 	bl	8002044 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	0018      	movs	r0, r3
 8001bdc:	f000 fa42 	bl	8002064 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2200      	movs	r2, #0
 8001be4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001be6:	68bb      	ldr	r3, [r7, #8]
 8001be8:	2208      	movs	r2, #8
 8001bea:	4013      	ands	r3, r2
 8001bec:	d021      	beq.n	8001c32 <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	2208      	movs	r2, #8
 8001bf2:	4013      	ands	r3, r2
 8001bf4:	d01d      	beq.n	8001c32 <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	2209      	movs	r2, #9
 8001bfc:	4252      	negs	r2, r2
 8001bfe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2204      	movs	r2, #4
 8001c04:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	69db      	ldr	r3, [r3, #28]
 8001c0c:	2203      	movs	r2, #3
 8001c0e:	4013      	ands	r3, r2
 8001c10:	d004      	beq.n	8001c1c <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	0018      	movs	r0, r3
 8001c16:	f000 fa1d 	bl	8002054 <HAL_TIM_IC_CaptureCallback>
 8001c1a:	e007      	b.n	8001c2c <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	0018      	movs	r0, r3
 8001c20:	f000 fa10 	bl	8002044 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	0018      	movs	r0, r3
 8001c28:	f000 fa1c 	bl	8002064 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2200      	movs	r2, #0
 8001c30:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001c32:	68bb      	ldr	r3, [r7, #8]
 8001c34:	2210      	movs	r2, #16
 8001c36:	4013      	ands	r3, r2
 8001c38:	d022      	beq.n	8001c80 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	2210      	movs	r2, #16
 8001c3e:	4013      	ands	r3, r2
 8001c40:	d01e      	beq.n	8001c80 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	2211      	movs	r2, #17
 8001c48:	4252      	negs	r2, r2
 8001c4a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2208      	movs	r2, #8
 8001c50:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	69da      	ldr	r2, [r3, #28]
 8001c58:	23c0      	movs	r3, #192	@ 0xc0
 8001c5a:	009b      	lsls	r3, r3, #2
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	d004      	beq.n	8001c6a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	0018      	movs	r0, r3
 8001c64:	f000 f9f6 	bl	8002054 <HAL_TIM_IC_CaptureCallback>
 8001c68:	e007      	b.n	8001c7a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	0018      	movs	r0, r3
 8001c6e:	f000 f9e9 	bl	8002044 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	0018      	movs	r0, r3
 8001c76:	f000 f9f5 	bl	8002064 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001c80:	68bb      	ldr	r3, [r7, #8]
 8001c82:	2201      	movs	r2, #1
 8001c84:	4013      	ands	r3, r2
 8001c86:	d00c      	beq.n	8001ca2 <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	2201      	movs	r2, #1
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	d008      	beq.n	8001ca2 <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	2202      	movs	r2, #2
 8001c96:	4252      	negs	r2, r2
 8001c98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	0018      	movs	r0, r3
 8001c9e:	f7fe fd4d 	bl	800073c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001ca2:	68bb      	ldr	r3, [r7, #8]
 8001ca4:	2280      	movs	r2, #128	@ 0x80
 8001ca6:	4013      	ands	r3, r2
 8001ca8:	d00c      	beq.n	8001cc4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	2280      	movs	r2, #128	@ 0x80
 8001cae:	4013      	ands	r3, r2
 8001cb0:	d008      	beq.n	8001cc4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	2281      	movs	r2, #129	@ 0x81
 8001cb8:	4252      	negs	r2, r2
 8001cba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	0018      	movs	r0, r3
 8001cc0:	f000 fd2e 	bl	8002720 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001cc4:	68bb      	ldr	r3, [r7, #8]
 8001cc6:	2240      	movs	r2, #64	@ 0x40
 8001cc8:	4013      	ands	r3, r2
 8001cca:	d00c      	beq.n	8001ce6 <HAL_TIM_IRQHandler+0x1b2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	2240      	movs	r2, #64	@ 0x40
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	d008      	beq.n	8001ce6 <HAL_TIM_IRQHandler+0x1b2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	2241      	movs	r2, #65	@ 0x41
 8001cda:	4252      	negs	r2, r2
 8001cdc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	0018      	movs	r0, r3
 8001ce2:	f000 f9c7 	bl	8002074 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001ce6:	68bb      	ldr	r3, [r7, #8]
 8001ce8:	2220      	movs	r2, #32
 8001cea:	4013      	ands	r3, r2
 8001cec:	d00c      	beq.n	8001d08 <HAL_TIM_IRQHandler+0x1d4>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	2220      	movs	r2, #32
 8001cf2:	4013      	ands	r3, r2
 8001cf4:	d008      	beq.n	8001d08 <HAL_TIM_IRQHandler+0x1d4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	2221      	movs	r2, #33	@ 0x21
 8001cfc:	4252      	negs	r2, r2
 8001cfe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	0018      	movs	r0, r3
 8001d04:	f000 fd04 	bl	8002710 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001d08:	46c0      	nop			@ (mov r8, r8)
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	b004      	add	sp, #16
 8001d0e:	bd80      	pop	{r7, pc}

08001d10 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b086      	sub	sp, #24
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	60f8      	str	r0, [r7, #12]
 8001d18:	60b9      	str	r1, [r7, #8]
 8001d1a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d1c:	2317      	movs	r3, #23
 8001d1e:	18fb      	adds	r3, r7, r3
 8001d20:	2200      	movs	r2, #0
 8001d22:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	223c      	movs	r2, #60	@ 0x3c
 8001d28:	5c9b      	ldrb	r3, [r3, r2]
 8001d2a:	2b01      	cmp	r3, #1
 8001d2c:	d101      	bne.n	8001d32 <HAL_TIM_PWM_ConfigChannel+0x22>
 8001d2e:	2302      	movs	r3, #2
 8001d30:	e0ad      	b.n	8001e8e <HAL_TIM_PWM_ConfigChannel+0x17e>
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	223c      	movs	r2, #60	@ 0x3c
 8001d36:	2101      	movs	r1, #1
 8001d38:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2b0c      	cmp	r3, #12
 8001d3e:	d100      	bne.n	8001d42 <HAL_TIM_PWM_ConfigChannel+0x32>
 8001d40:	e076      	b.n	8001e30 <HAL_TIM_PWM_ConfigChannel+0x120>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2b0c      	cmp	r3, #12
 8001d46:	d900      	bls.n	8001d4a <HAL_TIM_PWM_ConfigChannel+0x3a>
 8001d48:	e095      	b.n	8001e76 <HAL_TIM_PWM_ConfigChannel+0x166>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2b08      	cmp	r3, #8
 8001d4e:	d04e      	beq.n	8001dee <HAL_TIM_PWM_ConfigChannel+0xde>
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2b08      	cmp	r3, #8
 8001d54:	d900      	bls.n	8001d58 <HAL_TIM_PWM_ConfigChannel+0x48>
 8001d56:	e08e      	b.n	8001e76 <HAL_TIM_PWM_ConfigChannel+0x166>
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d003      	beq.n	8001d66 <HAL_TIM_PWM_ConfigChannel+0x56>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2b04      	cmp	r3, #4
 8001d62:	d021      	beq.n	8001da8 <HAL_TIM_PWM_ConfigChannel+0x98>
 8001d64:	e087      	b.n	8001e76 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	68ba      	ldr	r2, [r7, #8]
 8001d6c:	0011      	movs	r1, r2
 8001d6e:	0018      	movs	r0, r3
 8001d70:	f000 fa02 	bl	8002178 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	699a      	ldr	r2, [r3, #24]
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	2108      	movs	r1, #8
 8001d80:	430a      	orrs	r2, r1
 8001d82:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	699a      	ldr	r2, [r3, #24]
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	2104      	movs	r1, #4
 8001d90:	438a      	bics	r2, r1
 8001d92:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	6999      	ldr	r1, [r3, #24]
 8001d9a:	68bb      	ldr	r3, [r7, #8]
 8001d9c:	691a      	ldr	r2, [r3, #16]
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	430a      	orrs	r2, r1
 8001da4:	619a      	str	r2, [r3, #24]
      break;
 8001da6:	e06b      	b.n	8001e80 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	68ba      	ldr	r2, [r7, #8]
 8001dae:	0011      	movs	r1, r2
 8001db0:	0018      	movs	r0, r3
 8001db2:	f000 fa5f 	bl	8002274 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	699a      	ldr	r2, [r3, #24]
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	2180      	movs	r1, #128	@ 0x80
 8001dc2:	0109      	lsls	r1, r1, #4
 8001dc4:	430a      	orrs	r2, r1
 8001dc6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	699a      	ldr	r2, [r3, #24]
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4931      	ldr	r1, [pc, #196]	@ (8001e98 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8001dd4:	400a      	ands	r2, r1
 8001dd6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	6999      	ldr	r1, [r3, #24]
 8001dde:	68bb      	ldr	r3, [r7, #8]
 8001de0:	691b      	ldr	r3, [r3, #16]
 8001de2:	021a      	lsls	r2, r3, #8
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	430a      	orrs	r2, r1
 8001dea:	619a      	str	r2, [r3, #24]
      break;
 8001dec:	e048      	b.n	8001e80 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	68ba      	ldr	r2, [r7, #8]
 8001df4:	0011      	movs	r1, r2
 8001df6:	0018      	movs	r0, r3
 8001df8:	f000 faba 	bl	8002370 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	69da      	ldr	r2, [r3, #28]
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	2108      	movs	r1, #8
 8001e08:	430a      	orrs	r2, r1
 8001e0a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	69da      	ldr	r2, [r3, #28]
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	2104      	movs	r1, #4
 8001e18:	438a      	bics	r2, r1
 8001e1a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	69d9      	ldr	r1, [r3, #28]
 8001e22:	68bb      	ldr	r3, [r7, #8]
 8001e24:	691a      	ldr	r2, [r3, #16]
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	430a      	orrs	r2, r1
 8001e2c:	61da      	str	r2, [r3, #28]
      break;
 8001e2e:	e027      	b.n	8001e80 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	68ba      	ldr	r2, [r7, #8]
 8001e36:	0011      	movs	r1, r2
 8001e38:	0018      	movs	r0, r3
 8001e3a:	f000 fb19 	bl	8002470 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	69da      	ldr	r2, [r3, #28]
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	2180      	movs	r1, #128	@ 0x80
 8001e4a:	0109      	lsls	r1, r1, #4
 8001e4c:	430a      	orrs	r2, r1
 8001e4e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	69da      	ldr	r2, [r3, #28]
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	490f      	ldr	r1, [pc, #60]	@ (8001e98 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8001e5c:	400a      	ands	r2, r1
 8001e5e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	69d9      	ldr	r1, [r3, #28]
 8001e66:	68bb      	ldr	r3, [r7, #8]
 8001e68:	691b      	ldr	r3, [r3, #16]
 8001e6a:	021a      	lsls	r2, r3, #8
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	430a      	orrs	r2, r1
 8001e72:	61da      	str	r2, [r3, #28]
      break;
 8001e74:	e004      	b.n	8001e80 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8001e76:	2317      	movs	r3, #23
 8001e78:	18fb      	adds	r3, r7, r3
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	701a      	strb	r2, [r3, #0]
      break;
 8001e7e:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	223c      	movs	r2, #60	@ 0x3c
 8001e84:	2100      	movs	r1, #0
 8001e86:	5499      	strb	r1, [r3, r2]

  return status;
 8001e88:	2317      	movs	r3, #23
 8001e8a:	18fb      	adds	r3, r7, r3
 8001e8c:	781b      	ldrb	r3, [r3, #0]
}
 8001e8e:	0018      	movs	r0, r3
 8001e90:	46bd      	mov	sp, r7
 8001e92:	b006      	add	sp, #24
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	46c0      	nop			@ (mov r8, r8)
 8001e98:	fffffbff 	.word	0xfffffbff

08001e9c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b084      	sub	sp, #16
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
 8001ea4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001ea6:	230f      	movs	r3, #15
 8001ea8:	18fb      	adds	r3, r7, r3
 8001eaa:	2200      	movs	r2, #0
 8001eac:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	223c      	movs	r2, #60	@ 0x3c
 8001eb2:	5c9b      	ldrb	r3, [r3, r2]
 8001eb4:	2b01      	cmp	r3, #1
 8001eb6:	d101      	bne.n	8001ebc <HAL_TIM_ConfigClockSource+0x20>
 8001eb8:	2302      	movs	r3, #2
 8001eba:	e0bc      	b.n	8002036 <HAL_TIM_ConfigClockSource+0x19a>
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	223c      	movs	r2, #60	@ 0x3c
 8001ec0:	2101      	movs	r1, #1
 8001ec2:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	223d      	movs	r2, #61	@ 0x3d
 8001ec8:	2102      	movs	r1, #2
 8001eca:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	689b      	ldr	r3, [r3, #8]
 8001ed2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001ed4:	68bb      	ldr	r3, [r7, #8]
 8001ed6:	2277      	movs	r2, #119	@ 0x77
 8001ed8:	4393      	bics	r3, r2
 8001eda:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001edc:	68bb      	ldr	r3, [r7, #8]
 8001ede:	4a58      	ldr	r2, [pc, #352]	@ (8002040 <HAL_TIM_ConfigClockSource+0x1a4>)
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	68ba      	ldr	r2, [r7, #8]
 8001eea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	2280      	movs	r2, #128	@ 0x80
 8001ef2:	0192      	lsls	r2, r2, #6
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d040      	beq.n	8001f7a <HAL_TIM_ConfigClockSource+0xde>
 8001ef8:	2280      	movs	r2, #128	@ 0x80
 8001efa:	0192      	lsls	r2, r2, #6
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d900      	bls.n	8001f02 <HAL_TIM_ConfigClockSource+0x66>
 8001f00:	e088      	b.n	8002014 <HAL_TIM_ConfigClockSource+0x178>
 8001f02:	2280      	movs	r2, #128	@ 0x80
 8001f04:	0152      	lsls	r2, r2, #5
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d100      	bne.n	8001f0c <HAL_TIM_ConfigClockSource+0x70>
 8001f0a:	e088      	b.n	800201e <HAL_TIM_ConfigClockSource+0x182>
 8001f0c:	2280      	movs	r2, #128	@ 0x80
 8001f0e:	0152      	lsls	r2, r2, #5
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d900      	bls.n	8001f16 <HAL_TIM_ConfigClockSource+0x7a>
 8001f14:	e07e      	b.n	8002014 <HAL_TIM_ConfigClockSource+0x178>
 8001f16:	2b70      	cmp	r3, #112	@ 0x70
 8001f18:	d018      	beq.n	8001f4c <HAL_TIM_ConfigClockSource+0xb0>
 8001f1a:	d900      	bls.n	8001f1e <HAL_TIM_ConfigClockSource+0x82>
 8001f1c:	e07a      	b.n	8002014 <HAL_TIM_ConfigClockSource+0x178>
 8001f1e:	2b60      	cmp	r3, #96	@ 0x60
 8001f20:	d04f      	beq.n	8001fc2 <HAL_TIM_ConfigClockSource+0x126>
 8001f22:	d900      	bls.n	8001f26 <HAL_TIM_ConfigClockSource+0x8a>
 8001f24:	e076      	b.n	8002014 <HAL_TIM_ConfigClockSource+0x178>
 8001f26:	2b50      	cmp	r3, #80	@ 0x50
 8001f28:	d03b      	beq.n	8001fa2 <HAL_TIM_ConfigClockSource+0x106>
 8001f2a:	d900      	bls.n	8001f2e <HAL_TIM_ConfigClockSource+0x92>
 8001f2c:	e072      	b.n	8002014 <HAL_TIM_ConfigClockSource+0x178>
 8001f2e:	2b40      	cmp	r3, #64	@ 0x40
 8001f30:	d057      	beq.n	8001fe2 <HAL_TIM_ConfigClockSource+0x146>
 8001f32:	d900      	bls.n	8001f36 <HAL_TIM_ConfigClockSource+0x9a>
 8001f34:	e06e      	b.n	8002014 <HAL_TIM_ConfigClockSource+0x178>
 8001f36:	2b30      	cmp	r3, #48	@ 0x30
 8001f38:	d063      	beq.n	8002002 <HAL_TIM_ConfigClockSource+0x166>
 8001f3a:	d86b      	bhi.n	8002014 <HAL_TIM_ConfigClockSource+0x178>
 8001f3c:	2b20      	cmp	r3, #32
 8001f3e:	d060      	beq.n	8002002 <HAL_TIM_ConfigClockSource+0x166>
 8001f40:	d868      	bhi.n	8002014 <HAL_TIM_ConfigClockSource+0x178>
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d05d      	beq.n	8002002 <HAL_TIM_ConfigClockSource+0x166>
 8001f46:	2b10      	cmp	r3, #16
 8001f48:	d05b      	beq.n	8002002 <HAL_TIM_ConfigClockSource+0x166>
 8001f4a:	e063      	b.n	8002014 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001f5c:	f000 fb66 	bl	800262c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	689b      	ldr	r3, [r3, #8]
 8001f66:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001f68:	68bb      	ldr	r3, [r7, #8]
 8001f6a:	2277      	movs	r2, #119	@ 0x77
 8001f6c:	4313      	orrs	r3, r2
 8001f6e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	68ba      	ldr	r2, [r7, #8]
 8001f76:	609a      	str	r2, [r3, #8]
      break;
 8001f78:	e052      	b.n	8002020 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001f8a:	f000 fb4f 	bl	800262c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	689a      	ldr	r2, [r3, #8]
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	2180      	movs	r1, #128	@ 0x80
 8001f9a:	01c9      	lsls	r1, r1, #7
 8001f9c:	430a      	orrs	r2, r1
 8001f9e:	609a      	str	r2, [r3, #8]
      break;
 8001fa0:	e03e      	b.n	8002020 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001fae:	001a      	movs	r2, r3
 8001fb0:	f000 fac2 	bl	8002538 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	2150      	movs	r1, #80	@ 0x50
 8001fba:	0018      	movs	r0, r3
 8001fbc:	f000 fb1c 	bl	80025f8 <TIM_ITRx_SetConfig>
      break;
 8001fc0:	e02e      	b.n	8002020 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001fce:	001a      	movs	r2, r3
 8001fd0:	f000 fae0 	bl	8002594 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	2160      	movs	r1, #96	@ 0x60
 8001fda:	0018      	movs	r0, r3
 8001fdc:	f000 fb0c 	bl	80025f8 <TIM_ITRx_SetConfig>
      break;
 8001fe0:	e01e      	b.n	8002020 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001fee:	001a      	movs	r2, r3
 8001ff0:	f000 faa2 	bl	8002538 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	2140      	movs	r1, #64	@ 0x40
 8001ffa:	0018      	movs	r0, r3
 8001ffc:	f000 fafc 	bl	80025f8 <TIM_ITRx_SetConfig>
      break;
 8002000:	e00e      	b.n	8002020 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681a      	ldr	r2, [r3, #0]
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	0019      	movs	r1, r3
 800200c:	0010      	movs	r0, r2
 800200e:	f000 faf3 	bl	80025f8 <TIM_ITRx_SetConfig>
      break;
 8002012:	e005      	b.n	8002020 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8002014:	230f      	movs	r3, #15
 8002016:	18fb      	adds	r3, r7, r3
 8002018:	2201      	movs	r2, #1
 800201a:	701a      	strb	r2, [r3, #0]
      break;
 800201c:	e000      	b.n	8002020 <HAL_TIM_ConfigClockSource+0x184>
      break;
 800201e:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	223d      	movs	r2, #61	@ 0x3d
 8002024:	2101      	movs	r1, #1
 8002026:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	223c      	movs	r2, #60	@ 0x3c
 800202c:	2100      	movs	r1, #0
 800202e:	5499      	strb	r1, [r3, r2]

  return status;
 8002030:	230f      	movs	r3, #15
 8002032:	18fb      	adds	r3, r7, r3
 8002034:	781b      	ldrb	r3, [r3, #0]
}
 8002036:	0018      	movs	r0, r3
 8002038:	46bd      	mov	sp, r7
 800203a:	b004      	add	sp, #16
 800203c:	bd80      	pop	{r7, pc}
 800203e:	46c0      	nop			@ (mov r8, r8)
 8002040:	ffff00ff 	.word	0xffff00ff

08002044 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b082      	sub	sp, #8
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800204c:	46c0      	nop			@ (mov r8, r8)
 800204e:	46bd      	mov	sp, r7
 8002050:	b002      	add	sp, #8
 8002052:	bd80      	pop	{r7, pc}

08002054 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b082      	sub	sp, #8
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800205c:	46c0      	nop			@ (mov r8, r8)
 800205e:	46bd      	mov	sp, r7
 8002060:	b002      	add	sp, #8
 8002062:	bd80      	pop	{r7, pc}

08002064 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b082      	sub	sp, #8
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800206c:	46c0      	nop			@ (mov r8, r8)
 800206e:	46bd      	mov	sp, r7
 8002070:	b002      	add	sp, #8
 8002072:	bd80      	pop	{r7, pc}

08002074 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b082      	sub	sp, #8
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800207c:	46c0      	nop			@ (mov r8, r8)
 800207e:	46bd      	mov	sp, r7
 8002080:	b002      	add	sp, #8
 8002082:	bd80      	pop	{r7, pc}

08002084 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b084      	sub	sp, #16
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
 800208c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	4a32      	ldr	r2, [pc, #200]	@ (8002160 <TIM_Base_SetConfig+0xdc>)
 8002098:	4293      	cmp	r3, r2
 800209a:	d003      	beq.n	80020a4 <TIM_Base_SetConfig+0x20>
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	4a31      	ldr	r2, [pc, #196]	@ (8002164 <TIM_Base_SetConfig+0xe0>)
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d108      	bne.n	80020b6 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	2270      	movs	r2, #112	@ 0x70
 80020a8:	4393      	bics	r3, r2
 80020aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	68fa      	ldr	r2, [r7, #12]
 80020b2:	4313      	orrs	r3, r2
 80020b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	4a29      	ldr	r2, [pc, #164]	@ (8002160 <TIM_Base_SetConfig+0xdc>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d00f      	beq.n	80020de <TIM_Base_SetConfig+0x5a>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	4a28      	ldr	r2, [pc, #160]	@ (8002164 <TIM_Base_SetConfig+0xe0>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d00b      	beq.n	80020de <TIM_Base_SetConfig+0x5a>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	4a27      	ldr	r2, [pc, #156]	@ (8002168 <TIM_Base_SetConfig+0xe4>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d007      	beq.n	80020de <TIM_Base_SetConfig+0x5a>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	4a26      	ldr	r2, [pc, #152]	@ (800216c <TIM_Base_SetConfig+0xe8>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d003      	beq.n	80020de <TIM_Base_SetConfig+0x5a>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	4a25      	ldr	r2, [pc, #148]	@ (8002170 <TIM_Base_SetConfig+0xec>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d108      	bne.n	80020f0 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	4a24      	ldr	r2, [pc, #144]	@ (8002174 <TIM_Base_SetConfig+0xf0>)
 80020e2:	4013      	ands	r3, r2
 80020e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	68db      	ldr	r3, [r3, #12]
 80020ea:	68fa      	ldr	r2, [r7, #12]
 80020ec:	4313      	orrs	r3, r2
 80020ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	2280      	movs	r2, #128	@ 0x80
 80020f4:	4393      	bics	r3, r2
 80020f6:	001a      	movs	r2, r3
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	695b      	ldr	r3, [r3, #20]
 80020fc:	4313      	orrs	r3, r2
 80020fe:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	68fa      	ldr	r2, [r7, #12]
 8002104:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	689a      	ldr	r2, [r3, #8]
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	681a      	ldr	r2, [r3, #0]
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	4a11      	ldr	r2, [pc, #68]	@ (8002160 <TIM_Base_SetConfig+0xdc>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d007      	beq.n	800212e <TIM_Base_SetConfig+0xaa>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	4a12      	ldr	r2, [pc, #72]	@ (800216c <TIM_Base_SetConfig+0xe8>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d003      	beq.n	800212e <TIM_Base_SetConfig+0xaa>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	4a11      	ldr	r2, [pc, #68]	@ (8002170 <TIM_Base_SetConfig+0xec>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d103      	bne.n	8002136 <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	691a      	ldr	r2, [r3, #16]
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2201      	movs	r2, #1
 800213a:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	691b      	ldr	r3, [r3, #16]
 8002140:	2201      	movs	r2, #1
 8002142:	4013      	ands	r3, r2
 8002144:	2b01      	cmp	r3, #1
 8002146:	d106      	bne.n	8002156 <TIM_Base_SetConfig+0xd2>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	691b      	ldr	r3, [r3, #16]
 800214c:	2201      	movs	r2, #1
 800214e:	4393      	bics	r3, r2
 8002150:	001a      	movs	r2, r3
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	611a      	str	r2, [r3, #16]
  }
}
 8002156:	46c0      	nop			@ (mov r8, r8)
 8002158:	46bd      	mov	sp, r7
 800215a:	b004      	add	sp, #16
 800215c:	bd80      	pop	{r7, pc}
 800215e:	46c0      	nop			@ (mov r8, r8)
 8002160:	40012c00 	.word	0x40012c00
 8002164:	40000400 	.word	0x40000400
 8002168:	40002000 	.word	0x40002000
 800216c:	40014400 	.word	0x40014400
 8002170:	40014800 	.word	0x40014800
 8002174:	fffffcff 	.word	0xfffffcff

08002178 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b086      	sub	sp, #24
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
 8002180:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6a1b      	ldr	r3, [r3, #32]
 8002186:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6a1b      	ldr	r3, [r3, #32]
 800218c:	2201      	movs	r2, #1
 800218e:	4393      	bics	r3, r2
 8002190:	001a      	movs	r2, r3
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	699b      	ldr	r3, [r3, #24]
 80021a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	2270      	movs	r2, #112	@ 0x70
 80021a6:	4393      	bics	r3, r2
 80021a8:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	2203      	movs	r2, #3
 80021ae:	4393      	bics	r3, r2
 80021b0:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	68fa      	ldr	r2, [r7, #12]
 80021b8:	4313      	orrs	r3, r2
 80021ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80021bc:	697b      	ldr	r3, [r7, #20]
 80021be:	2202      	movs	r2, #2
 80021c0:	4393      	bics	r3, r2
 80021c2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	689b      	ldr	r3, [r3, #8]
 80021c8:	697a      	ldr	r2, [r7, #20]
 80021ca:	4313      	orrs	r3, r2
 80021cc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	4a23      	ldr	r2, [pc, #140]	@ (8002260 <TIM_OC1_SetConfig+0xe8>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d007      	beq.n	80021e6 <TIM_OC1_SetConfig+0x6e>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	4a22      	ldr	r2, [pc, #136]	@ (8002264 <TIM_OC1_SetConfig+0xec>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d003      	beq.n	80021e6 <TIM_OC1_SetConfig+0x6e>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	4a21      	ldr	r2, [pc, #132]	@ (8002268 <TIM_OC1_SetConfig+0xf0>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d10c      	bne.n	8002200 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80021e6:	697b      	ldr	r3, [r7, #20]
 80021e8:	2208      	movs	r2, #8
 80021ea:	4393      	bics	r3, r2
 80021ec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	68db      	ldr	r3, [r3, #12]
 80021f2:	697a      	ldr	r2, [r7, #20]
 80021f4:	4313      	orrs	r3, r2
 80021f6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80021f8:	697b      	ldr	r3, [r7, #20]
 80021fa:	2204      	movs	r2, #4
 80021fc:	4393      	bics	r3, r2
 80021fe:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	4a17      	ldr	r2, [pc, #92]	@ (8002260 <TIM_OC1_SetConfig+0xe8>)
 8002204:	4293      	cmp	r3, r2
 8002206:	d007      	beq.n	8002218 <TIM_OC1_SetConfig+0xa0>
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	4a16      	ldr	r2, [pc, #88]	@ (8002264 <TIM_OC1_SetConfig+0xec>)
 800220c:	4293      	cmp	r3, r2
 800220e:	d003      	beq.n	8002218 <TIM_OC1_SetConfig+0xa0>
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	4a15      	ldr	r2, [pc, #84]	@ (8002268 <TIM_OC1_SetConfig+0xf0>)
 8002214:	4293      	cmp	r3, r2
 8002216:	d111      	bne.n	800223c <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002218:	693b      	ldr	r3, [r7, #16]
 800221a:	4a14      	ldr	r2, [pc, #80]	@ (800226c <TIM_OC1_SetConfig+0xf4>)
 800221c:	4013      	ands	r3, r2
 800221e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002220:	693b      	ldr	r3, [r7, #16]
 8002222:	4a13      	ldr	r2, [pc, #76]	@ (8002270 <TIM_OC1_SetConfig+0xf8>)
 8002224:	4013      	ands	r3, r2
 8002226:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	695b      	ldr	r3, [r3, #20]
 800222c:	693a      	ldr	r2, [r7, #16]
 800222e:	4313      	orrs	r3, r2
 8002230:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	699b      	ldr	r3, [r3, #24]
 8002236:	693a      	ldr	r2, [r7, #16]
 8002238:	4313      	orrs	r3, r2
 800223a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	693a      	ldr	r2, [r7, #16]
 8002240:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	68fa      	ldr	r2, [r7, #12]
 8002246:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	685a      	ldr	r2, [r3, #4]
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	697a      	ldr	r2, [r7, #20]
 8002254:	621a      	str	r2, [r3, #32]
}
 8002256:	46c0      	nop			@ (mov r8, r8)
 8002258:	46bd      	mov	sp, r7
 800225a:	b006      	add	sp, #24
 800225c:	bd80      	pop	{r7, pc}
 800225e:	46c0      	nop			@ (mov r8, r8)
 8002260:	40012c00 	.word	0x40012c00
 8002264:	40014400 	.word	0x40014400
 8002268:	40014800 	.word	0x40014800
 800226c:	fffffeff 	.word	0xfffffeff
 8002270:	fffffdff 	.word	0xfffffdff

08002274 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b086      	sub	sp, #24
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
 800227c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6a1b      	ldr	r3, [r3, #32]
 8002282:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6a1b      	ldr	r3, [r3, #32]
 8002288:	2210      	movs	r2, #16
 800228a:	4393      	bics	r3, r2
 800228c:	001a      	movs	r2, r3
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	699b      	ldr	r3, [r3, #24]
 800229c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	4a2c      	ldr	r2, [pc, #176]	@ (8002354 <TIM_OC2_SetConfig+0xe0>)
 80022a2:	4013      	ands	r3, r2
 80022a4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	4a2b      	ldr	r2, [pc, #172]	@ (8002358 <TIM_OC2_SetConfig+0xe4>)
 80022aa:	4013      	ands	r3, r2
 80022ac:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	021b      	lsls	r3, r3, #8
 80022b4:	68fa      	ldr	r2, [r7, #12]
 80022b6:	4313      	orrs	r3, r2
 80022b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80022ba:	697b      	ldr	r3, [r7, #20]
 80022bc:	2220      	movs	r2, #32
 80022be:	4393      	bics	r3, r2
 80022c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	689b      	ldr	r3, [r3, #8]
 80022c6:	011b      	lsls	r3, r3, #4
 80022c8:	697a      	ldr	r2, [r7, #20]
 80022ca:	4313      	orrs	r3, r2
 80022cc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	4a22      	ldr	r2, [pc, #136]	@ (800235c <TIM_OC2_SetConfig+0xe8>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d10d      	bne.n	80022f2 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80022d6:	697b      	ldr	r3, [r7, #20]
 80022d8:	2280      	movs	r2, #128	@ 0x80
 80022da:	4393      	bics	r3, r2
 80022dc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	68db      	ldr	r3, [r3, #12]
 80022e2:	011b      	lsls	r3, r3, #4
 80022e4:	697a      	ldr	r2, [r7, #20]
 80022e6:	4313      	orrs	r3, r2
 80022e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80022ea:	697b      	ldr	r3, [r7, #20]
 80022ec:	2240      	movs	r2, #64	@ 0x40
 80022ee:	4393      	bics	r3, r2
 80022f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	4a19      	ldr	r2, [pc, #100]	@ (800235c <TIM_OC2_SetConfig+0xe8>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d007      	beq.n	800230a <TIM_OC2_SetConfig+0x96>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	4a18      	ldr	r2, [pc, #96]	@ (8002360 <TIM_OC2_SetConfig+0xec>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d003      	beq.n	800230a <TIM_OC2_SetConfig+0x96>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	4a17      	ldr	r2, [pc, #92]	@ (8002364 <TIM_OC2_SetConfig+0xf0>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d113      	bne.n	8002332 <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	4a16      	ldr	r2, [pc, #88]	@ (8002368 <TIM_OC2_SetConfig+0xf4>)
 800230e:	4013      	ands	r3, r2
 8002310:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002312:	693b      	ldr	r3, [r7, #16]
 8002314:	4a15      	ldr	r2, [pc, #84]	@ (800236c <TIM_OC2_SetConfig+0xf8>)
 8002316:	4013      	ands	r3, r2
 8002318:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	695b      	ldr	r3, [r3, #20]
 800231e:	009b      	lsls	r3, r3, #2
 8002320:	693a      	ldr	r2, [r7, #16]
 8002322:	4313      	orrs	r3, r2
 8002324:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	699b      	ldr	r3, [r3, #24]
 800232a:	009b      	lsls	r3, r3, #2
 800232c:	693a      	ldr	r2, [r7, #16]
 800232e:	4313      	orrs	r3, r2
 8002330:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	693a      	ldr	r2, [r7, #16]
 8002336:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	68fa      	ldr	r2, [r7, #12]
 800233c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	685a      	ldr	r2, [r3, #4]
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	697a      	ldr	r2, [r7, #20]
 800234a:	621a      	str	r2, [r3, #32]
}
 800234c:	46c0      	nop			@ (mov r8, r8)
 800234e:	46bd      	mov	sp, r7
 8002350:	b006      	add	sp, #24
 8002352:	bd80      	pop	{r7, pc}
 8002354:	ffff8fff 	.word	0xffff8fff
 8002358:	fffffcff 	.word	0xfffffcff
 800235c:	40012c00 	.word	0x40012c00
 8002360:	40014400 	.word	0x40014400
 8002364:	40014800 	.word	0x40014800
 8002368:	fffffbff 	.word	0xfffffbff
 800236c:	fffff7ff 	.word	0xfffff7ff

08002370 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b086      	sub	sp, #24
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
 8002378:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6a1b      	ldr	r3, [r3, #32]
 800237e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6a1b      	ldr	r3, [r3, #32]
 8002384:	4a31      	ldr	r2, [pc, #196]	@ (800244c <TIM_OC3_SetConfig+0xdc>)
 8002386:	401a      	ands	r2, r3
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	69db      	ldr	r3, [r3, #28]
 8002396:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	2270      	movs	r2, #112	@ 0x70
 800239c:	4393      	bics	r3, r2
 800239e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	2203      	movs	r2, #3
 80023a4:	4393      	bics	r3, r2
 80023a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	68fa      	ldr	r2, [r7, #12]
 80023ae:	4313      	orrs	r3, r2
 80023b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80023b2:	697b      	ldr	r3, [r7, #20]
 80023b4:	4a26      	ldr	r2, [pc, #152]	@ (8002450 <TIM_OC3_SetConfig+0xe0>)
 80023b6:	4013      	ands	r3, r2
 80023b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	689b      	ldr	r3, [r3, #8]
 80023be:	021b      	lsls	r3, r3, #8
 80023c0:	697a      	ldr	r2, [r7, #20]
 80023c2:	4313      	orrs	r3, r2
 80023c4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	4a22      	ldr	r2, [pc, #136]	@ (8002454 <TIM_OC3_SetConfig+0xe4>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d10d      	bne.n	80023ea <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80023ce:	697b      	ldr	r3, [r7, #20]
 80023d0:	4a21      	ldr	r2, [pc, #132]	@ (8002458 <TIM_OC3_SetConfig+0xe8>)
 80023d2:	4013      	ands	r3, r2
 80023d4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	68db      	ldr	r3, [r3, #12]
 80023da:	021b      	lsls	r3, r3, #8
 80023dc:	697a      	ldr	r2, [r7, #20]
 80023de:	4313      	orrs	r3, r2
 80023e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80023e2:	697b      	ldr	r3, [r7, #20]
 80023e4:	4a1d      	ldr	r2, [pc, #116]	@ (800245c <TIM_OC3_SetConfig+0xec>)
 80023e6:	4013      	ands	r3, r2
 80023e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	4a19      	ldr	r2, [pc, #100]	@ (8002454 <TIM_OC3_SetConfig+0xe4>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d007      	beq.n	8002402 <TIM_OC3_SetConfig+0x92>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	4a1a      	ldr	r2, [pc, #104]	@ (8002460 <TIM_OC3_SetConfig+0xf0>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d003      	beq.n	8002402 <TIM_OC3_SetConfig+0x92>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	4a19      	ldr	r2, [pc, #100]	@ (8002464 <TIM_OC3_SetConfig+0xf4>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d113      	bne.n	800242a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002402:	693b      	ldr	r3, [r7, #16]
 8002404:	4a18      	ldr	r2, [pc, #96]	@ (8002468 <TIM_OC3_SetConfig+0xf8>)
 8002406:	4013      	ands	r3, r2
 8002408:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800240a:	693b      	ldr	r3, [r7, #16]
 800240c:	4a17      	ldr	r2, [pc, #92]	@ (800246c <TIM_OC3_SetConfig+0xfc>)
 800240e:	4013      	ands	r3, r2
 8002410:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	695b      	ldr	r3, [r3, #20]
 8002416:	011b      	lsls	r3, r3, #4
 8002418:	693a      	ldr	r2, [r7, #16]
 800241a:	4313      	orrs	r3, r2
 800241c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	699b      	ldr	r3, [r3, #24]
 8002422:	011b      	lsls	r3, r3, #4
 8002424:	693a      	ldr	r2, [r7, #16]
 8002426:	4313      	orrs	r3, r2
 8002428:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	693a      	ldr	r2, [r7, #16]
 800242e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	68fa      	ldr	r2, [r7, #12]
 8002434:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	685a      	ldr	r2, [r3, #4]
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	697a      	ldr	r2, [r7, #20]
 8002442:	621a      	str	r2, [r3, #32]
}
 8002444:	46c0      	nop			@ (mov r8, r8)
 8002446:	46bd      	mov	sp, r7
 8002448:	b006      	add	sp, #24
 800244a:	bd80      	pop	{r7, pc}
 800244c:	fffffeff 	.word	0xfffffeff
 8002450:	fffffdff 	.word	0xfffffdff
 8002454:	40012c00 	.word	0x40012c00
 8002458:	fffff7ff 	.word	0xfffff7ff
 800245c:	fffffbff 	.word	0xfffffbff
 8002460:	40014400 	.word	0x40014400
 8002464:	40014800 	.word	0x40014800
 8002468:	ffffefff 	.word	0xffffefff
 800246c:	ffffdfff 	.word	0xffffdfff

08002470 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b086      	sub	sp, #24
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
 8002478:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6a1b      	ldr	r3, [r3, #32]
 800247e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6a1b      	ldr	r3, [r3, #32]
 8002484:	4a24      	ldr	r2, [pc, #144]	@ (8002518 <TIM_OC4_SetConfig+0xa8>)
 8002486:	401a      	ands	r2, r3
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	69db      	ldr	r3, [r3, #28]
 8002496:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	4a20      	ldr	r2, [pc, #128]	@ (800251c <TIM_OC4_SetConfig+0xac>)
 800249c:	4013      	ands	r3, r2
 800249e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	4a1f      	ldr	r2, [pc, #124]	@ (8002520 <TIM_OC4_SetConfig+0xb0>)
 80024a4:	4013      	ands	r3, r2
 80024a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	021b      	lsls	r3, r3, #8
 80024ae:	68fa      	ldr	r2, [r7, #12]
 80024b0:	4313      	orrs	r3, r2
 80024b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80024b4:	693b      	ldr	r3, [r7, #16]
 80024b6:	4a1b      	ldr	r2, [pc, #108]	@ (8002524 <TIM_OC4_SetConfig+0xb4>)
 80024b8:	4013      	ands	r3, r2
 80024ba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	689b      	ldr	r3, [r3, #8]
 80024c0:	031b      	lsls	r3, r3, #12
 80024c2:	693a      	ldr	r2, [r7, #16]
 80024c4:	4313      	orrs	r3, r2
 80024c6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	4a17      	ldr	r2, [pc, #92]	@ (8002528 <TIM_OC4_SetConfig+0xb8>)
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d007      	beq.n	80024e0 <TIM_OC4_SetConfig+0x70>
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	4a16      	ldr	r2, [pc, #88]	@ (800252c <TIM_OC4_SetConfig+0xbc>)
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d003      	beq.n	80024e0 <TIM_OC4_SetConfig+0x70>
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	4a15      	ldr	r2, [pc, #84]	@ (8002530 <TIM_OC4_SetConfig+0xc0>)
 80024dc:	4293      	cmp	r3, r2
 80024de:	d109      	bne.n	80024f4 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80024e0:	697b      	ldr	r3, [r7, #20]
 80024e2:	4a14      	ldr	r2, [pc, #80]	@ (8002534 <TIM_OC4_SetConfig+0xc4>)
 80024e4:	4013      	ands	r3, r2
 80024e6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	695b      	ldr	r3, [r3, #20]
 80024ec:	019b      	lsls	r3, r3, #6
 80024ee:	697a      	ldr	r2, [r7, #20]
 80024f0:	4313      	orrs	r3, r2
 80024f2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	697a      	ldr	r2, [r7, #20]
 80024f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	68fa      	ldr	r2, [r7, #12]
 80024fe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	685a      	ldr	r2, [r3, #4]
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	693a      	ldr	r2, [r7, #16]
 800250c:	621a      	str	r2, [r3, #32]
}
 800250e:	46c0      	nop			@ (mov r8, r8)
 8002510:	46bd      	mov	sp, r7
 8002512:	b006      	add	sp, #24
 8002514:	bd80      	pop	{r7, pc}
 8002516:	46c0      	nop			@ (mov r8, r8)
 8002518:	ffffefff 	.word	0xffffefff
 800251c:	ffff8fff 	.word	0xffff8fff
 8002520:	fffffcff 	.word	0xfffffcff
 8002524:	ffffdfff 	.word	0xffffdfff
 8002528:	40012c00 	.word	0x40012c00
 800252c:	40014400 	.word	0x40014400
 8002530:	40014800 	.word	0x40014800
 8002534:	ffffbfff 	.word	0xffffbfff

08002538 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b086      	sub	sp, #24
 800253c:	af00      	add	r7, sp, #0
 800253e:	60f8      	str	r0, [r7, #12]
 8002540:	60b9      	str	r1, [r7, #8]
 8002542:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	6a1b      	ldr	r3, [r3, #32]
 8002548:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	6a1b      	ldr	r3, [r3, #32]
 800254e:	2201      	movs	r2, #1
 8002550:	4393      	bics	r3, r2
 8002552:	001a      	movs	r2, r3
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	699b      	ldr	r3, [r3, #24]
 800255c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800255e:	693b      	ldr	r3, [r7, #16]
 8002560:	22f0      	movs	r2, #240	@ 0xf0
 8002562:	4393      	bics	r3, r2
 8002564:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	011b      	lsls	r3, r3, #4
 800256a:	693a      	ldr	r2, [r7, #16]
 800256c:	4313      	orrs	r3, r2
 800256e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002570:	697b      	ldr	r3, [r7, #20]
 8002572:	220a      	movs	r2, #10
 8002574:	4393      	bics	r3, r2
 8002576:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002578:	697a      	ldr	r2, [r7, #20]
 800257a:	68bb      	ldr	r3, [r7, #8]
 800257c:	4313      	orrs	r3, r2
 800257e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	693a      	ldr	r2, [r7, #16]
 8002584:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	697a      	ldr	r2, [r7, #20]
 800258a:	621a      	str	r2, [r3, #32]
}
 800258c:	46c0      	nop			@ (mov r8, r8)
 800258e:	46bd      	mov	sp, r7
 8002590:	b006      	add	sp, #24
 8002592:	bd80      	pop	{r7, pc}

08002594 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b086      	sub	sp, #24
 8002598:	af00      	add	r7, sp, #0
 800259a:	60f8      	str	r0, [r7, #12]
 800259c:	60b9      	str	r1, [r7, #8]
 800259e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	6a1b      	ldr	r3, [r3, #32]
 80025a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	6a1b      	ldr	r3, [r3, #32]
 80025aa:	2210      	movs	r2, #16
 80025ac:	4393      	bics	r3, r2
 80025ae:	001a      	movs	r2, r3
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	699b      	ldr	r3, [r3, #24]
 80025b8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80025ba:	693b      	ldr	r3, [r7, #16]
 80025bc:	4a0d      	ldr	r2, [pc, #52]	@ (80025f4 <TIM_TI2_ConfigInputStage+0x60>)
 80025be:	4013      	ands	r3, r2
 80025c0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	031b      	lsls	r3, r3, #12
 80025c6:	693a      	ldr	r2, [r7, #16]
 80025c8:	4313      	orrs	r3, r2
 80025ca:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80025cc:	697b      	ldr	r3, [r7, #20]
 80025ce:	22a0      	movs	r2, #160	@ 0xa0
 80025d0:	4393      	bics	r3, r2
 80025d2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80025d4:	68bb      	ldr	r3, [r7, #8]
 80025d6:	011b      	lsls	r3, r3, #4
 80025d8:	697a      	ldr	r2, [r7, #20]
 80025da:	4313      	orrs	r3, r2
 80025dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	693a      	ldr	r2, [r7, #16]
 80025e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	697a      	ldr	r2, [r7, #20]
 80025e8:	621a      	str	r2, [r3, #32]
}
 80025ea:	46c0      	nop			@ (mov r8, r8)
 80025ec:	46bd      	mov	sp, r7
 80025ee:	b006      	add	sp, #24
 80025f0:	bd80      	pop	{r7, pc}
 80025f2:	46c0      	nop			@ (mov r8, r8)
 80025f4:	ffff0fff 	.word	0xffff0fff

080025f8 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b084      	sub	sp, #16
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
 8002600:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	689b      	ldr	r3, [r3, #8]
 8002606:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	2270      	movs	r2, #112	@ 0x70
 800260c:	4393      	bics	r3, r2
 800260e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002610:	683a      	ldr	r2, [r7, #0]
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	4313      	orrs	r3, r2
 8002616:	2207      	movs	r2, #7
 8002618:	4313      	orrs	r3, r2
 800261a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	68fa      	ldr	r2, [r7, #12]
 8002620:	609a      	str	r2, [r3, #8]
}
 8002622:	46c0      	nop			@ (mov r8, r8)
 8002624:	46bd      	mov	sp, r7
 8002626:	b004      	add	sp, #16
 8002628:	bd80      	pop	{r7, pc}
	...

0800262c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b086      	sub	sp, #24
 8002630:	af00      	add	r7, sp, #0
 8002632:	60f8      	str	r0, [r7, #12]
 8002634:	60b9      	str	r1, [r7, #8]
 8002636:	607a      	str	r2, [r7, #4]
 8002638:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	689b      	ldr	r3, [r3, #8]
 800263e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002640:	697b      	ldr	r3, [r7, #20]
 8002642:	4a09      	ldr	r2, [pc, #36]	@ (8002668 <TIM_ETR_SetConfig+0x3c>)
 8002644:	4013      	ands	r3, r2
 8002646:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	021a      	lsls	r2, r3, #8
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	431a      	orrs	r2, r3
 8002650:	68bb      	ldr	r3, [r7, #8]
 8002652:	4313      	orrs	r3, r2
 8002654:	697a      	ldr	r2, [r7, #20]
 8002656:	4313      	orrs	r3, r2
 8002658:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	697a      	ldr	r2, [r7, #20]
 800265e:	609a      	str	r2, [r3, #8]
}
 8002660:	46c0      	nop			@ (mov r8, r8)
 8002662:	46bd      	mov	sp, r7
 8002664:	b006      	add	sp, #24
 8002666:	bd80      	pop	{r7, pc}
 8002668:	ffff00ff 	.word	0xffff00ff

0800266c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b084      	sub	sp, #16
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
 8002674:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	223c      	movs	r2, #60	@ 0x3c
 800267a:	5c9b      	ldrb	r3, [r3, r2]
 800267c:	2b01      	cmp	r3, #1
 800267e:	d101      	bne.n	8002684 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002680:	2302      	movs	r3, #2
 8002682:	e03c      	b.n	80026fe <HAL_TIMEx_MasterConfigSynchronization+0x92>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	223c      	movs	r2, #60	@ 0x3c
 8002688:	2101      	movs	r1, #1
 800268a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	223d      	movs	r2, #61	@ 0x3d
 8002690:	2102      	movs	r1, #2
 8002692:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	689b      	ldr	r3, [r3, #8]
 80026a2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	2270      	movs	r2, #112	@ 0x70
 80026a8:	4393      	bics	r3, r2
 80026aa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	68fa      	ldr	r2, [r7, #12]
 80026b2:	4313      	orrs	r3, r2
 80026b4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	68fa      	ldr	r2, [r7, #12]
 80026bc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4a11      	ldr	r2, [pc, #68]	@ (8002708 <HAL_TIMEx_MasterConfigSynchronization+0x9c>)
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d004      	beq.n	80026d2 <HAL_TIMEx_MasterConfigSynchronization+0x66>
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a0f      	ldr	r2, [pc, #60]	@ (800270c <HAL_TIMEx_MasterConfigSynchronization+0xa0>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d10c      	bne.n	80026ec <HAL_TIMEx_MasterConfigSynchronization+0x80>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80026d2:	68bb      	ldr	r3, [r7, #8]
 80026d4:	2280      	movs	r2, #128	@ 0x80
 80026d6:	4393      	bics	r3, r2
 80026d8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	68ba      	ldr	r2, [r7, #8]
 80026e0:	4313      	orrs	r3, r2
 80026e2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	68ba      	ldr	r2, [r7, #8]
 80026ea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	223d      	movs	r2, #61	@ 0x3d
 80026f0:	2101      	movs	r1, #1
 80026f2:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	223c      	movs	r2, #60	@ 0x3c
 80026f8:	2100      	movs	r1, #0
 80026fa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80026fc:	2300      	movs	r3, #0
}
 80026fe:	0018      	movs	r0, r3
 8002700:	46bd      	mov	sp, r7
 8002702:	b004      	add	sp, #16
 8002704:	bd80      	pop	{r7, pc}
 8002706:	46c0      	nop			@ (mov r8, r8)
 8002708:	40012c00 	.word	0x40012c00
 800270c:	40000400 	.word	0x40000400

08002710 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b082      	sub	sp, #8
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002718:	46c0      	nop			@ (mov r8, r8)
 800271a:	46bd      	mov	sp, r7
 800271c:	b002      	add	sp, #8
 800271e:	bd80      	pop	{r7, pc}

08002720 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b082      	sub	sp, #8
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002728:	46c0      	nop			@ (mov r8, r8)
 800272a:	46bd      	mov	sp, r7
 800272c:	b002      	add	sp, #8
 800272e:	bd80      	pop	{r7, pc}

08002730 <memset>:
 8002730:	0003      	movs	r3, r0
 8002732:	1882      	adds	r2, r0, r2
 8002734:	4293      	cmp	r3, r2
 8002736:	d100      	bne.n	800273a <memset+0xa>
 8002738:	4770      	bx	lr
 800273a:	7019      	strb	r1, [r3, #0]
 800273c:	3301      	adds	r3, #1
 800273e:	e7f9      	b.n	8002734 <memset+0x4>

08002740 <__libc_init_array>:
 8002740:	b570      	push	{r4, r5, r6, lr}
 8002742:	2600      	movs	r6, #0
 8002744:	4c0c      	ldr	r4, [pc, #48]	@ (8002778 <__libc_init_array+0x38>)
 8002746:	4d0d      	ldr	r5, [pc, #52]	@ (800277c <__libc_init_array+0x3c>)
 8002748:	1b64      	subs	r4, r4, r5
 800274a:	10a4      	asrs	r4, r4, #2
 800274c:	42a6      	cmp	r6, r4
 800274e:	d109      	bne.n	8002764 <__libc_init_array+0x24>
 8002750:	2600      	movs	r6, #0
 8002752:	f000 f819 	bl	8002788 <_init>
 8002756:	4c0a      	ldr	r4, [pc, #40]	@ (8002780 <__libc_init_array+0x40>)
 8002758:	4d0a      	ldr	r5, [pc, #40]	@ (8002784 <__libc_init_array+0x44>)
 800275a:	1b64      	subs	r4, r4, r5
 800275c:	10a4      	asrs	r4, r4, #2
 800275e:	42a6      	cmp	r6, r4
 8002760:	d105      	bne.n	800276e <__libc_init_array+0x2e>
 8002762:	bd70      	pop	{r4, r5, r6, pc}
 8002764:	00b3      	lsls	r3, r6, #2
 8002766:	58eb      	ldr	r3, [r5, r3]
 8002768:	4798      	blx	r3
 800276a:	3601      	adds	r6, #1
 800276c:	e7ee      	b.n	800274c <__libc_init_array+0xc>
 800276e:	00b3      	lsls	r3, r6, #2
 8002770:	58eb      	ldr	r3, [r5, r3]
 8002772:	4798      	blx	r3
 8002774:	3601      	adds	r6, #1
 8002776:	e7f2      	b.n	800275e <__libc_init_array+0x1e>
 8002778:	080027d0 	.word	0x080027d0
 800277c:	080027d0 	.word	0x080027d0
 8002780:	080027d4 	.word	0x080027d4
 8002784:	080027d0 	.word	0x080027d0

08002788 <_init>:
 8002788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800278a:	46c0      	nop			@ (mov r8, r8)
 800278c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800278e:	bc08      	pop	{r3}
 8002790:	469e      	mov	lr, r3
 8002792:	4770      	bx	lr

08002794 <_fini>:
 8002794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002796:	46c0      	nop			@ (mov r8, r8)
 8002798:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800279a:	bc08      	pop	{r3}
 800279c:	469e      	mov	lr, r3
 800279e:	4770      	bx	lr
