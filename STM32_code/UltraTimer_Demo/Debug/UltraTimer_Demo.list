
UltraTimer_Demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002e94  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08002f54  08002f54  00003f54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002fc8  08002fc8  00004010  2**0
                  CONTENTS
  4 .ARM          00000000  08002fc8  08002fc8  00004010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002fc8  08002fc8  00004010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002fc8  08002fc8  00003fc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002fcc  08002fcc  00003fcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08002fd0  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b4  20000010  08002fe0  00004010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000c4  08002fe0  000040c4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00004010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007b02  00000000  00000000  00004038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001623  00000000  00000000  0000bb3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008e8  00000000  00000000  0000d160  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000006ea  00000000  00000000  0000da48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000ed1c  00000000  00000000  0000e132  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009dc0  00000000  00000000  0001ce4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005c18c  00000000  00000000  00026c0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00082d9a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001ff0  00000000  00000000  00082de0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  00084dd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000010 	.word	0x20000010
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002f3c 	.word	0x08002f3c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000014 	.word	0x20000014
 8000104:	08002f3c 	.word	0x08002f3c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	@ 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	@ 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			@ (mov r8, r8)

080003f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b082      	sub	sp, #8
 80003f8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003fa:	f000 fe09 	bl	8001010 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003fe:	f000 f885 	bl	800050c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000402:	f000 f999 	bl	8000738 <MX_GPIO_Init>
  MX_TIM3_Init();
 8000406:	f000 f919 	bl	800063c <MX_TIM3_Init>
  MX_TIM1_Init();
 800040a:	f000 f8bf 	bl	800058c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  int Ref_time=2;
 800040e:	2302      	movs	r3, #2
 8000410:	607b      	str	r3, [r7, #4]

  /* Blue Start */
  HAL_GPIO_TogglePin(LED_Red_GPIO_Port, LED_Red_Pin);
 8000412:	4b3b      	ldr	r3, [pc, #236]	@ (8000500 <main+0x10c>)
 8000414:	2102      	movs	r1, #2
 8000416:	0018      	movs	r0, r3
 8000418:	f001 f90a 	bl	8001630 <HAL_GPIO_TogglePin>
  /* Eyes on*/
  HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 800041c:	2390      	movs	r3, #144	@ 0x90
 800041e:	05db      	lsls	r3, r3, #23
 8000420:	2108      	movs	r1, #8
 8000422:	0018      	movs	r0, r3
 8000424:	f001 f904 	bl	8001630 <HAL_GPIO_TogglePin>
  HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8000428:	2390      	movs	r3, #144	@ 0x90
 800042a:	05db      	lsls	r3, r3, #23
 800042c:	2110      	movs	r1, #16
 800042e:	0018      	movs	r0, r3
 8000430:	f001 f8fe 	bl	8001630 <HAL_GPIO_TogglePin>

  /* Display OFF */
  DisplayNumber(0,10);
 8000434:	210a      	movs	r1, #10
 8000436:	2000      	movs	r0, #0
 8000438:	f000 fab2 	bl	80009a0 <DisplayNumber>

  /* Start PWM */
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800043c:	4b31      	ldr	r3, [pc, #196]	@ (8000504 <main+0x110>)
 800043e:	2100      	movs	r1, #0
 8000440:	0018      	movs	r0, r3
 8000442:	f001 fe87 	bl	8002154 <HAL_TIM_PWM_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  switch (mode){
 8000446:	4b30      	ldr	r3, [pc, #192]	@ (8000508 <main+0x114>)
 8000448:	781b      	ldrb	r3, [r3, #0]
 800044a:	2b00      	cmp	r3, #0
 800044c:	d002      	beq.n	8000454 <main+0x60>
 800044e:	2b01      	cmp	r3, #1
 8000450:	d02d      	beq.n	80004ae <main+0xba>
 8000452:	e7f8      	b.n	8000446 <main+0x52>
	  case 0:
		  __HAL_TIM_SET_PRESCALER(&htim3, 0);
 8000454:	4b2b      	ldr	r3, [pc, #172]	@ (8000504 <main+0x110>)
 8000456:	681b      	ldr	r3, [r3, #0]
 8000458:	2200      	movs	r2, #0
 800045a:	629a      	str	r2, [r3, #40]	@ 0x28

		  DisplayNumber(1,1);
 800045c:	2101      	movs	r1, #1
 800045e:	2001      	movs	r0, #1
 8000460:	f000 fa9e 	bl	80009a0 <DisplayNumber>
		  HAL_Delay(Ref_time);
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	0018      	movs	r0, r3
 8000468:	f000 fe36 	bl	80010d8 <HAL_Delay>
		  DisplayNumber(2,2);
 800046c:	2102      	movs	r1, #2
 800046e:	2002      	movs	r0, #2
 8000470:	f000 fa96 	bl	80009a0 <DisplayNumber>
		  HAL_Delay(Ref_time);
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	0018      	movs	r0, r3
 8000478:	f000 fe2e 	bl	80010d8 <HAL_Delay>
		  DisplayNumber(3,3);
 800047c:	2103      	movs	r1, #3
 800047e:	2003      	movs	r0, #3
 8000480:	f000 fa8e 	bl	80009a0 <DisplayNumber>
		  HAL_Delay(Ref_time);
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	0018      	movs	r0, r3
 8000488:	f000 fe26 	bl	80010d8 <HAL_Delay>
		  DisplayNumber(4,4);
 800048c:	2104      	movs	r1, #4
 800048e:	2004      	movs	r0, #4
 8000490:	f000 fa86 	bl	80009a0 <DisplayNumber>
		  HAL_Delay(Ref_time);
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	0018      	movs	r0, r3
 8000498:	f000 fe1e 	bl	80010d8 <HAL_Delay>
		  DisplayNumber(5,10);
 800049c:	210a      	movs	r1, #10
 800049e:	2005      	movs	r0, #5
 80004a0:	f000 fa7e 	bl	80009a0 <DisplayNumber>
		  HAL_Delay(Ref_time);
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	0018      	movs	r0, r3
 80004a8:	f000 fe16 	bl	80010d8 <HAL_Delay>

		  break;
 80004ac:	e027      	b.n	80004fe <main+0x10a>

	  case 1:
		  DisplayNumber(0,10);
 80004ae:	210a      	movs	r1, #10
 80004b0:	2000      	movs	r0, #0
 80004b2:	f000 fa75 	bl	80009a0 <DisplayNumber>
		  __HAL_TIM_SET_PRESCALER(&htim3, presForFrequency(900));
 80004b6:	23e1      	movs	r3, #225	@ 0xe1
 80004b8:	009b      	lsls	r3, r3, #2
 80004ba:	0018      	movs	r0, r3
 80004bc:	f000 f9e2 	bl	8000884 <presForFrequency>
 80004c0:	0002      	movs	r2, r0
 80004c2:	4b10      	ldr	r3, [pc, #64]	@ (8000504 <main+0x110>)
 80004c4:	681b      	ldr	r3, [r3, #0]
 80004c6:	629a      	str	r2, [r3, #40]	@ 0x28
		  HAL_Delay(150);
 80004c8:	2096      	movs	r0, #150	@ 0x96
 80004ca:	f000 fe05 	bl	80010d8 <HAL_Delay>
		  __HAL_TIM_SET_PRESCALER(&htim3, presForFrequency(500));
 80004ce:	23fa      	movs	r3, #250	@ 0xfa
 80004d0:	005b      	lsls	r3, r3, #1
 80004d2:	0018      	movs	r0, r3
 80004d4:	f000 f9d6 	bl	8000884 <presForFrequency>
 80004d8:	0002      	movs	r2, r0
 80004da:	4b0a      	ldr	r3, [pc, #40]	@ (8000504 <main+0x110>)
 80004dc:	681b      	ldr	r3, [r3, #0]
 80004de:	629a      	str	r2, [r3, #40]	@ 0x28
		  HAL_Delay(400);
 80004e0:	23c8      	movs	r3, #200	@ 0xc8
 80004e2:	005b      	lsls	r3, r3, #1
 80004e4:	0018      	movs	r0, r3
 80004e6:	f000 fdf7 	bl	80010d8 <HAL_Delay>
		  __HAL_TIM_SET_PRESCALER(&htim3, 0);
 80004ea:	4b06      	ldr	r3, [pc, #24]	@ (8000504 <main+0x110>)
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	2200      	movs	r2, #0
 80004f0:	629a      	str	r2, [r3, #40]	@ 0x28
		  HAL_Delay(1000);
 80004f2:	23fa      	movs	r3, #250	@ 0xfa
 80004f4:	009b      	lsls	r3, r3, #2
 80004f6:	0018      	movs	r0, r3
 80004f8:	f000 fdee 	bl	80010d8 <HAL_Delay>
		  break;
 80004fc:	46c0      	nop			@ (mov r8, r8)
	  switch (mode){
 80004fe:	e7a2      	b.n	8000446 <main+0x52>
 8000500:	48001400 	.word	0x48001400
 8000504:	20000074 	.word	0x20000074
 8000508:	200000bc 	.word	0x200000bc

0800050c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800050c:	b590      	push	{r4, r7, lr}
 800050e:	b091      	sub	sp, #68	@ 0x44
 8000510:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000512:	2410      	movs	r4, #16
 8000514:	193b      	adds	r3, r7, r4
 8000516:	0018      	movs	r0, r3
 8000518:	2330      	movs	r3, #48	@ 0x30
 800051a:	001a      	movs	r2, r3
 800051c:	2100      	movs	r1, #0
 800051e:	f002 fce1 	bl	8002ee4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000522:	003b      	movs	r3, r7
 8000524:	0018      	movs	r0, r3
 8000526:	2310      	movs	r3, #16
 8000528:	001a      	movs	r2, r3
 800052a:	2100      	movs	r1, #0
 800052c:	f002 fcda 	bl	8002ee4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000530:	0021      	movs	r1, r4
 8000532:	187b      	adds	r3, r7, r1
 8000534:	2202      	movs	r2, #2
 8000536:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000538:	187b      	adds	r3, r7, r1
 800053a:	2201      	movs	r2, #1
 800053c:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800053e:	187b      	adds	r3, r7, r1
 8000540:	2210      	movs	r2, #16
 8000542:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000544:	187b      	adds	r3, r7, r1
 8000546:	2200      	movs	r2, #0
 8000548:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800054a:	187b      	adds	r3, r7, r1
 800054c:	0018      	movs	r0, r3
 800054e:	f001 f8a7 	bl	80016a0 <HAL_RCC_OscConfig>
 8000552:	1e03      	subs	r3, r0, #0
 8000554:	d001      	beq.n	800055a <SystemClock_Config+0x4e>
  {
    Error_Handler();
 8000556:	f000 fc43 	bl	8000de0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800055a:	003b      	movs	r3, r7
 800055c:	2207      	movs	r2, #7
 800055e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000560:	003b      	movs	r3, r7
 8000562:	2200      	movs	r2, #0
 8000564:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000566:	003b      	movs	r3, r7
 8000568:	2200      	movs	r2, #0
 800056a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800056c:	003b      	movs	r3, r7
 800056e:	2200      	movs	r2, #0
 8000570:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000572:	003b      	movs	r3, r7
 8000574:	2100      	movs	r1, #0
 8000576:	0018      	movs	r0, r3
 8000578:	f001 fbac 	bl	8001cd4 <HAL_RCC_ClockConfig>
 800057c:	1e03      	subs	r3, r0, #0
 800057e:	d001      	beq.n	8000584 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000580:	f000 fc2e 	bl	8000de0 <Error_Handler>
  }
}
 8000584:	46c0      	nop			@ (mov r8, r8)
 8000586:	46bd      	mov	sp, r7
 8000588:	b011      	add	sp, #68	@ 0x44
 800058a:	bd90      	pop	{r4, r7, pc}

0800058c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b086      	sub	sp, #24
 8000590:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000592:	2308      	movs	r3, #8
 8000594:	18fb      	adds	r3, r7, r3
 8000596:	0018      	movs	r0, r3
 8000598:	2310      	movs	r3, #16
 800059a:	001a      	movs	r2, r3
 800059c:	2100      	movs	r1, #0
 800059e:	f002 fca1 	bl	8002ee4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005a2:	003b      	movs	r3, r7
 80005a4:	0018      	movs	r0, r3
 80005a6:	2308      	movs	r3, #8
 80005a8:	001a      	movs	r2, r3
 80005aa:	2100      	movs	r1, #0
 80005ac:	f002 fc9a 	bl	8002ee4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80005b0:	4b20      	ldr	r3, [pc, #128]	@ (8000634 <MX_TIM1_Init+0xa8>)
 80005b2:	4a21      	ldr	r2, [pc, #132]	@ (8000638 <MX_TIM1_Init+0xac>)
 80005b4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 4000;
 80005b6:	4b1f      	ldr	r3, [pc, #124]	@ (8000634 <MX_TIM1_Init+0xa8>)
 80005b8:	22fa      	movs	r2, #250	@ 0xfa
 80005ba:	0112      	lsls	r2, r2, #4
 80005bc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005be:	4b1d      	ldr	r3, [pc, #116]	@ (8000634 <MX_TIM1_Init+0xa8>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 50;
 80005c4:	4b1b      	ldr	r3, [pc, #108]	@ (8000634 <MX_TIM1_Init+0xa8>)
 80005c6:	2232      	movs	r2, #50	@ 0x32
 80005c8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005ca:	4b1a      	ldr	r3, [pc, #104]	@ (8000634 <MX_TIM1_Init+0xa8>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80005d0:	4b18      	ldr	r3, [pc, #96]	@ (8000634 <MX_TIM1_Init+0xa8>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005d6:	4b17      	ldr	r3, [pc, #92]	@ (8000634 <MX_TIM1_Init+0xa8>)
 80005d8:	2200      	movs	r2, #0
 80005da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80005dc:	4b15      	ldr	r3, [pc, #84]	@ (8000634 <MX_TIM1_Init+0xa8>)
 80005de:	0018      	movs	r0, r3
 80005e0:	f001 fc9c 	bl	8001f1c <HAL_TIM_Base_Init>
 80005e4:	1e03      	subs	r3, r0, #0
 80005e6:	d001      	beq.n	80005ec <MX_TIM1_Init+0x60>
  {
    Error_Handler();
 80005e8:	f000 fbfa 	bl	8000de0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80005ec:	2108      	movs	r1, #8
 80005ee:	187b      	adds	r3, r7, r1
 80005f0:	2280      	movs	r2, #128	@ 0x80
 80005f2:	0152      	lsls	r2, r2, #5
 80005f4:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80005f6:	187a      	adds	r2, r7, r1
 80005f8:	4b0e      	ldr	r3, [pc, #56]	@ (8000634 <MX_TIM1_Init+0xa8>)
 80005fa:	0011      	movs	r1, r2
 80005fc:	0018      	movs	r0, r3
 80005fe:	f002 f803 	bl	8002608 <HAL_TIM_ConfigClockSource>
 8000602:	1e03      	subs	r3, r0, #0
 8000604:	d001      	beq.n	800060a <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 8000606:	f000 fbeb 	bl	8000de0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800060a:	003b      	movs	r3, r7
 800060c:	2200      	movs	r2, #0
 800060e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000610:	003b      	movs	r3, r7
 8000612:	2200      	movs	r2, #0
 8000614:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000616:	003a      	movs	r2, r7
 8000618:	4b06      	ldr	r3, [pc, #24]	@ (8000634 <MX_TIM1_Init+0xa8>)
 800061a:	0011      	movs	r1, r2
 800061c:	0018      	movs	r0, r3
 800061e:	f002 fbff 	bl	8002e20 <HAL_TIMEx_MasterConfigSynchronization>
 8000622:	1e03      	subs	r3, r0, #0
 8000624:	d001      	beq.n	800062a <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8000626:	f000 fbdb 	bl	8000de0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800062a:	46c0      	nop			@ (mov r8, r8)
 800062c:	46bd      	mov	sp, r7
 800062e:	b006      	add	sp, #24
 8000630:	bd80      	pop	{r7, pc}
 8000632:	46c0      	nop			@ (mov r8, r8)
 8000634:	2000002c 	.word	0x2000002c
 8000638:	40012c00 	.word	0x40012c00

0800063c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b08e      	sub	sp, #56	@ 0x38
 8000640:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000642:	2328      	movs	r3, #40	@ 0x28
 8000644:	18fb      	adds	r3, r7, r3
 8000646:	0018      	movs	r0, r3
 8000648:	2310      	movs	r3, #16
 800064a:	001a      	movs	r2, r3
 800064c:	2100      	movs	r1, #0
 800064e:	f002 fc49 	bl	8002ee4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000652:	2320      	movs	r3, #32
 8000654:	18fb      	adds	r3, r7, r3
 8000656:	0018      	movs	r0, r3
 8000658:	2308      	movs	r3, #8
 800065a:	001a      	movs	r2, r3
 800065c:	2100      	movs	r1, #0
 800065e:	f002 fc41 	bl	8002ee4 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000662:	1d3b      	adds	r3, r7, #4
 8000664:	0018      	movs	r0, r3
 8000666:	231c      	movs	r3, #28
 8000668:	001a      	movs	r2, r3
 800066a:	2100      	movs	r1, #0
 800066c:	f002 fc3a 	bl	8002ee4 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000670:	4b2f      	ldr	r3, [pc, #188]	@ (8000730 <MX_TIM3_Init+0xf4>)
 8000672:	4a30      	ldr	r2, [pc, #192]	@ (8000734 <MX_TIM3_Init+0xf8>)
 8000674:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000676:	4b2e      	ldr	r3, [pc, #184]	@ (8000730 <MX_TIM3_Init+0xf4>)
 8000678:	2200      	movs	r2, #0
 800067a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800067c:	4b2c      	ldr	r3, [pc, #176]	@ (8000730 <MX_TIM3_Init+0xf4>)
 800067e:	2200      	movs	r2, #0
 8000680:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 8000682:	4b2b      	ldr	r3, [pc, #172]	@ (8000730 <MX_TIM3_Init+0xf4>)
 8000684:	2264      	movs	r2, #100	@ 0x64
 8000686:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000688:	4b29      	ldr	r3, [pc, #164]	@ (8000730 <MX_TIM3_Init+0xf4>)
 800068a:	2200      	movs	r2, #0
 800068c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800068e:	4b28      	ldr	r3, [pc, #160]	@ (8000730 <MX_TIM3_Init+0xf4>)
 8000690:	2280      	movs	r2, #128	@ 0x80
 8000692:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000694:	4b26      	ldr	r3, [pc, #152]	@ (8000730 <MX_TIM3_Init+0xf4>)
 8000696:	0018      	movs	r0, r3
 8000698:	f001 fc40 	bl	8001f1c <HAL_TIM_Base_Init>
 800069c:	1e03      	subs	r3, r0, #0
 800069e:	d001      	beq.n	80006a4 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80006a0:	f000 fb9e 	bl	8000de0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006a4:	2128      	movs	r1, #40	@ 0x28
 80006a6:	187b      	adds	r3, r7, r1
 80006a8:	2280      	movs	r2, #128	@ 0x80
 80006aa:	0152      	lsls	r2, r2, #5
 80006ac:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80006ae:	187a      	adds	r2, r7, r1
 80006b0:	4b1f      	ldr	r3, [pc, #124]	@ (8000730 <MX_TIM3_Init+0xf4>)
 80006b2:	0011      	movs	r1, r2
 80006b4:	0018      	movs	r0, r3
 80006b6:	f001 ffa7 	bl	8002608 <HAL_TIM_ConfigClockSource>
 80006ba:	1e03      	subs	r3, r0, #0
 80006bc:	d001      	beq.n	80006c2 <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 80006be:	f000 fb8f 	bl	8000de0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80006c2:	4b1b      	ldr	r3, [pc, #108]	@ (8000730 <MX_TIM3_Init+0xf4>)
 80006c4:	0018      	movs	r0, r3
 80006c6:	f001 fced 	bl	80020a4 <HAL_TIM_PWM_Init>
 80006ca:	1e03      	subs	r3, r0, #0
 80006cc:	d001      	beq.n	80006d2 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 80006ce:	f000 fb87 	bl	8000de0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006d2:	2120      	movs	r1, #32
 80006d4:	187b      	adds	r3, r7, r1
 80006d6:	2200      	movs	r2, #0
 80006d8:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006da:	187b      	adds	r3, r7, r1
 80006dc:	2200      	movs	r2, #0
 80006de:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80006e0:	187a      	adds	r2, r7, r1
 80006e2:	4b13      	ldr	r3, [pc, #76]	@ (8000730 <MX_TIM3_Init+0xf4>)
 80006e4:	0011      	movs	r1, r2
 80006e6:	0018      	movs	r0, r3
 80006e8:	f002 fb9a 	bl	8002e20 <HAL_TIMEx_MasterConfigSynchronization>
 80006ec:	1e03      	subs	r3, r0, #0
 80006ee:	d001      	beq.n	80006f4 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 80006f0:	f000 fb76 	bl	8000de0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80006f4:	1d3b      	adds	r3, r7, #4
 80006f6:	2260      	movs	r2, #96	@ 0x60
 80006f8:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 50;
 80006fa:	1d3b      	adds	r3, r7, #4
 80006fc:	2232      	movs	r2, #50	@ 0x32
 80006fe:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000700:	1d3b      	adds	r3, r7, #4
 8000702:	2200      	movs	r2, #0
 8000704:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000706:	1d3b      	adds	r3, r7, #4
 8000708:	2200      	movs	r2, #0
 800070a:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800070c:	1d39      	adds	r1, r7, #4
 800070e:	4b08      	ldr	r3, [pc, #32]	@ (8000730 <MX_TIM3_Init+0xf4>)
 8000710:	2200      	movs	r2, #0
 8000712:	0018      	movs	r0, r3
 8000714:	f001 feb2 	bl	800247c <HAL_TIM_PWM_ConfigChannel>
 8000718:	1e03      	subs	r3, r0, #0
 800071a:	d001      	beq.n	8000720 <MX_TIM3_Init+0xe4>
  {
    Error_Handler();
 800071c:	f000 fb60 	bl	8000de0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000720:	4b03      	ldr	r3, [pc, #12]	@ (8000730 <MX_TIM3_Init+0xf4>)
 8000722:	0018      	movs	r0, r3
 8000724:	f000 fbca 	bl	8000ebc <HAL_TIM_MspPostInit>

}
 8000728:	46c0      	nop			@ (mov r8, r8)
 800072a:	46bd      	mov	sp, r7
 800072c:	b00e      	add	sp, #56	@ 0x38
 800072e:	bd80      	pop	{r7, pc}
 8000730:	20000074 	.word	0x20000074
 8000734:	40000400 	.word	0x40000400

08000738 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000738:	b590      	push	{r4, r7, lr}
 800073a:	b089      	sub	sp, #36	@ 0x24
 800073c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800073e:	240c      	movs	r4, #12
 8000740:	193b      	adds	r3, r7, r4
 8000742:	0018      	movs	r0, r3
 8000744:	2314      	movs	r3, #20
 8000746:	001a      	movs	r2, r3
 8000748:	2100      	movs	r1, #0
 800074a:	f002 fbcb 	bl	8002ee4 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800074e:	4b49      	ldr	r3, [pc, #292]	@ (8000874 <MX_GPIO_Init+0x13c>)
 8000750:	695a      	ldr	r2, [r3, #20]
 8000752:	4b48      	ldr	r3, [pc, #288]	@ (8000874 <MX_GPIO_Init+0x13c>)
 8000754:	2180      	movs	r1, #128	@ 0x80
 8000756:	03c9      	lsls	r1, r1, #15
 8000758:	430a      	orrs	r2, r1
 800075a:	615a      	str	r2, [r3, #20]
 800075c:	4b45      	ldr	r3, [pc, #276]	@ (8000874 <MX_GPIO_Init+0x13c>)
 800075e:	695a      	ldr	r2, [r3, #20]
 8000760:	2380      	movs	r3, #128	@ 0x80
 8000762:	03db      	lsls	r3, r3, #15
 8000764:	4013      	ands	r3, r2
 8000766:	60bb      	str	r3, [r7, #8]
 8000768:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800076a:	4b42      	ldr	r3, [pc, #264]	@ (8000874 <MX_GPIO_Init+0x13c>)
 800076c:	695a      	ldr	r2, [r3, #20]
 800076e:	4b41      	ldr	r3, [pc, #260]	@ (8000874 <MX_GPIO_Init+0x13c>)
 8000770:	2180      	movs	r1, #128	@ 0x80
 8000772:	0289      	lsls	r1, r1, #10
 8000774:	430a      	orrs	r2, r1
 8000776:	615a      	str	r2, [r3, #20]
 8000778:	4b3e      	ldr	r3, [pc, #248]	@ (8000874 <MX_GPIO_Init+0x13c>)
 800077a:	695a      	ldr	r2, [r3, #20]
 800077c:	2380      	movs	r3, #128	@ 0x80
 800077e:	029b      	lsls	r3, r3, #10
 8000780:	4013      	ands	r3, r2
 8000782:	607b      	str	r3, [r7, #4]
 8000784:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000786:	4b3b      	ldr	r3, [pc, #236]	@ (8000874 <MX_GPIO_Init+0x13c>)
 8000788:	695a      	ldr	r2, [r3, #20]
 800078a:	4b3a      	ldr	r3, [pc, #232]	@ (8000874 <MX_GPIO_Init+0x13c>)
 800078c:	2180      	movs	r1, #128	@ 0x80
 800078e:	02c9      	lsls	r1, r1, #11
 8000790:	430a      	orrs	r2, r1
 8000792:	615a      	str	r2, [r3, #20]
 8000794:	4b37      	ldr	r3, [pc, #220]	@ (8000874 <MX_GPIO_Init+0x13c>)
 8000796:	695a      	ldr	r2, [r3, #20]
 8000798:	2380      	movs	r3, #128	@ 0x80
 800079a:	02db      	lsls	r3, r3, #11
 800079c:	4013      	ands	r3, r2
 800079e:	603b      	str	r3, [r7, #0]
 80007a0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, LED_Blue_Pin|LED_Red_Pin, GPIO_PIN_RESET);
 80007a2:	4b35      	ldr	r3, [pc, #212]	@ (8000878 <MX_GPIO_Init+0x140>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	2103      	movs	r1, #3
 80007a8:	0018      	movs	r0, r3
 80007aa:	f000 ff24 	bl	80015f6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED1_Pin|LED2_Pin|DispD_Pin|Display1_Pin
 80007ae:	4933      	ldr	r1, [pc, #204]	@ (800087c <MX_GPIO_Init+0x144>)
 80007b0:	2390      	movs	r3, #144	@ 0x90
 80007b2:	05db      	lsls	r3, r3, #23
 80007b4:	2200      	movs	r2, #0
 80007b6:	0018      	movs	r0, r3
 80007b8:	f000 ff1d 	bl	80015f6 <HAL_GPIO_WritePin>
                          |Display2_Pin|DisplayL_Pin|Display3_Pin|Display4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DispDP_Pin|DispE_Pin|DispF_Pin|DispC_Pin
 80007bc:	4b30      	ldr	r3, [pc, #192]	@ (8000880 <MX_GPIO_Init+0x148>)
 80007be:	2200      	movs	r2, #0
 80007c0:	21fb      	movs	r1, #251	@ 0xfb
 80007c2:	0018      	movs	r0, r3
 80007c4:	f000 ff17 	bl	80015f6 <HAL_GPIO_WritePin>
                          |DispA_Pin|DispG_Pin|DispB_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LED_Blue_Pin LED_Red_Pin */
  GPIO_InitStruct.Pin = LED_Blue_Pin|LED_Red_Pin;
 80007c8:	193b      	adds	r3, r7, r4
 80007ca:	2203      	movs	r2, #3
 80007cc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ce:	193b      	adds	r3, r7, r4
 80007d0:	2201      	movs	r2, #1
 80007d2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d4:	193b      	adds	r3, r7, r4
 80007d6:	2200      	movs	r2, #0
 80007d8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007da:	193b      	adds	r3, r7, r4
 80007dc:	2200      	movs	r2, #0
 80007de:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80007e0:	193b      	adds	r3, r7, r4
 80007e2:	4a25      	ldr	r2, [pc, #148]	@ (8000878 <MX_GPIO_Init+0x140>)
 80007e4:	0019      	movs	r1, r3
 80007e6:	0010      	movs	r0, r2
 80007e8:	f000 fd78 	bl	80012dc <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED2_Pin DispD_Pin Display1_Pin
                           Display2_Pin DisplayL_Pin Display3_Pin Display4_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|DispD_Pin|Display1_Pin
 80007ec:	193b      	adds	r3, r7, r4
 80007ee:	4a23      	ldr	r2, [pc, #140]	@ (800087c <MX_GPIO_Init+0x144>)
 80007f0:	601a      	str	r2, [r3, #0]
                          |Display2_Pin|DisplayL_Pin|Display3_Pin|Display4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007f2:	193b      	adds	r3, r7, r4
 80007f4:	2201      	movs	r2, #1
 80007f6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f8:	193b      	adds	r3, r7, r4
 80007fa:	2200      	movs	r2, #0
 80007fc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007fe:	193b      	adds	r3, r7, r4
 8000800:	2200      	movs	r2, #0
 8000802:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000804:	193a      	adds	r2, r7, r4
 8000806:	2390      	movs	r3, #144	@ 0x90
 8000808:	05db      	lsls	r3, r3, #23
 800080a:	0011      	movs	r1, r2
 800080c:	0018      	movs	r0, r3
 800080e:	f000 fd65 	bl	80012dc <HAL_GPIO_Init>

  /*Configure GPIO pins : B_Button_EXTI_Pin A_Button_EXTI_Pin */
  GPIO_InitStruct.Pin = B_Button_EXTI_Pin|A_Button_EXTI_Pin;
 8000812:	193b      	adds	r3, r7, r4
 8000814:	22a0      	movs	r2, #160	@ 0xa0
 8000816:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000818:	193b      	adds	r3, r7, r4
 800081a:	2284      	movs	r2, #132	@ 0x84
 800081c:	0392      	lsls	r2, r2, #14
 800081e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000820:	193b      	adds	r3, r7, r4
 8000822:	2202      	movs	r2, #2
 8000824:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000826:	193a      	adds	r2, r7, r4
 8000828:	2390      	movs	r3, #144	@ 0x90
 800082a:	05db      	lsls	r3, r3, #23
 800082c:	0011      	movs	r1, r2
 800082e:	0018      	movs	r0, r3
 8000830:	f000 fd54 	bl	80012dc <HAL_GPIO_Init>

  /*Configure GPIO pins : DispDP_Pin DispE_Pin DispF_Pin DispC_Pin
                           DispA_Pin DispG_Pin DispB_Pin */
  GPIO_InitStruct.Pin = DispDP_Pin|DispE_Pin|DispF_Pin|DispC_Pin
 8000834:	0021      	movs	r1, r4
 8000836:	187b      	adds	r3, r7, r1
 8000838:	22fb      	movs	r2, #251	@ 0xfb
 800083a:	601a      	str	r2, [r3, #0]
                          |DispA_Pin|DispG_Pin|DispB_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800083c:	187b      	adds	r3, r7, r1
 800083e:	2201      	movs	r2, #1
 8000840:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000842:	187b      	adds	r3, r7, r1
 8000844:	2200      	movs	r2, #0
 8000846:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000848:	187b      	adds	r3, r7, r1
 800084a:	2200      	movs	r2, #0
 800084c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800084e:	187b      	adds	r3, r7, r1
 8000850:	4a0b      	ldr	r2, [pc, #44]	@ (8000880 <MX_GPIO_Init+0x148>)
 8000852:	0019      	movs	r1, r3
 8000854:	0010      	movs	r0, r2
 8000856:	f000 fd41 	bl	80012dc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 800085a:	2200      	movs	r2, #0
 800085c:	2100      	movs	r1, #0
 800085e:	2007      	movs	r0, #7
 8000860:	f000 fd0a 	bl	8001278 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8000864:	2007      	movs	r0, #7
 8000866:	f000 fd1c 	bl	80012a2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800086a:	46c0      	nop			@ (mov r8, r8)
 800086c:	46bd      	mov	sp, r7
 800086e:	b009      	add	sp, #36	@ 0x24
 8000870:	bd90      	pop	{r4, r7, pc}
 8000872:	46c0      	nop			@ (mov r8, r8)
 8000874:	40021000 	.word	0x40021000
 8000878:	48001400 	.word	0x48001400
 800087c:	00009f18 	.word	0x00009f18
 8000880:	48000400 	.word	0x48000400

08000884 <presForFrequency>:

/* USER CODE BEGIN 4 */

int presForFrequency (int frequency)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b082      	sub	sp, #8
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
	if (frequency == 0) return 0;
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	2b00      	cmp	r3, #0
 8000890:	d101      	bne.n	8000896 <presForFrequency+0x12>
 8000892:	2300      	movs	r3, #0
 8000894:	e008      	b.n	80008a8 <presForFrequency+0x24>
	return ((TIM_FREQ/(100*frequency))-1);
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	2264      	movs	r2, #100	@ 0x64
 800089a:	4353      	muls	r3, r2
 800089c:	0019      	movs	r1, r3
 800089e:	4804      	ldr	r0, [pc, #16]	@ (80008b0 <presForFrequency+0x2c>)
 80008a0:	f7ff fcbc 	bl	800021c <__divsi3>
 80008a4:	0003      	movs	r3, r0
 80008a6:	3b01      	subs	r3, #1
}
 80008a8:	0018      	movs	r0, r3
 80008aa:	46bd      	mov	sp, r7
 80008ac:	b002      	add	sp, #8
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	007a1200 	.word	0x007a1200

080008b4 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b082      	sub	sp, #8
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	0002      	movs	r2, r0
 80008bc:	1dbb      	adds	r3, r7, #6
 80008be:	801a      	strh	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
	if(GPIO_Pin == A_Button_EXTI_Pin && state == true){
 80008c0:	1dbb      	adds	r3, r7, #6
 80008c2:	881b      	ldrh	r3, [r3, #0]
 80008c4:	2b80      	cmp	r3, #128	@ 0x80
 80008c6:	d10b      	bne.n	80008e0 <HAL_GPIO_EXTI_Callback+0x2c>
 80008c8:	4b10      	ldr	r3, [pc, #64]	@ (800090c <HAL_GPIO_EXTI_Callback+0x58>)
 80008ca:	781b      	ldrb	r3, [r3, #0]
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d007      	beq.n	80008e0 <HAL_GPIO_EXTI_Callback+0x2c>
		HAL_TIM_Base_Start_IT(&htim1);
 80008d0:	4b0f      	ldr	r3, [pc, #60]	@ (8000910 <HAL_GPIO_EXTI_Callback+0x5c>)
 80008d2:	0018      	movs	r0, r3
 80008d4:	f001 fb72 	bl	8001fbc <HAL_TIM_Base_Start_IT>
		state = false;
 80008d8:	4b0c      	ldr	r3, [pc, #48]	@ (800090c <HAL_GPIO_EXTI_Callback+0x58>)
 80008da:	2200      	movs	r2, #0
 80008dc:	701a      	strb	r2, [r3, #0]
 80008de:	e011      	b.n	8000904 <HAL_GPIO_EXTI_Callback+0x50>
	}

	else if(GPIO_Pin == B_Button_EXTI_Pin && state == true){
 80008e0:	1dbb      	adds	r3, r7, #6
 80008e2:	881b      	ldrh	r3, [r3, #0]
 80008e4:	2b20      	cmp	r3, #32
 80008e6:	d10b      	bne.n	8000900 <HAL_GPIO_EXTI_Callback+0x4c>
 80008e8:	4b08      	ldr	r3, [pc, #32]	@ (800090c <HAL_GPIO_EXTI_Callback+0x58>)
 80008ea:	781b      	ldrb	r3, [r3, #0]
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d007      	beq.n	8000900 <HAL_GPIO_EXTI_Callback+0x4c>
		HAL_TIM_Base_Start_IT(&htim1);
 80008f0:	4b07      	ldr	r3, [pc, #28]	@ (8000910 <HAL_GPIO_EXTI_Callback+0x5c>)
 80008f2:	0018      	movs	r0, r3
 80008f4:	f001 fb62 	bl	8001fbc <HAL_TIM_Base_Start_IT>
		state = false;
 80008f8:	4b04      	ldr	r3, [pc, #16]	@ (800090c <HAL_GPIO_EXTI_Callback+0x58>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	701a      	strb	r2, [r3, #0]
 80008fe:	e001      	b.n	8000904 <HAL_GPIO_EXTI_Callback+0x50>
	}

	else{
		__NOP();
 8000900:	46c0      	nop			@ (mov r8, r8)
	}

}
 8000902:	46c0      	nop			@ (mov r8, r8)
 8000904:	46c0      	nop			@ (mov r8, r8)
 8000906:	46bd      	mov	sp, r7
 8000908:	b002      	add	sp, #8
 800090a:	bd80      	pop	{r7, pc}
 800090c:	20000000 	.word	0x20000000
 8000910:	2000002c 	.word	0x2000002c

08000914 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b082      	sub	sp, #8
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]

	if(HAL_GPIO_ReadPin(B_Button_EXTI_GPIO_Port, B_Button_EXTI_Pin) == GPIO_PIN_RESET){
 800091c:	2390      	movs	r3, #144	@ 0x90
 800091e:	05db      	lsls	r3, r3, #23
 8000920:	2120      	movs	r1, #32
 8000922:	0018      	movs	r0, r3
 8000924:	f000 fe4a 	bl	80015bc <HAL_GPIO_ReadPin>
 8000928:	1e03      	subs	r3, r0, #0
 800092a:	d111      	bne.n	8000950 <HAL_TIM_PeriodElapsedCallback+0x3c>
		HAL_GPIO_TogglePin(LED_Blue_GPIO_Port, LED_Red_Pin);
 800092c:	4b18      	ldr	r3, [pc, #96]	@ (8000990 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 800092e:	2102      	movs	r1, #2
 8000930:	0018      	movs	r0, r3
 8000932:	f000 fe7d 	bl	8001630 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(LED_Blue_GPIO_Port, LED_Blue_Pin);
 8000936:	4b16      	ldr	r3, [pc, #88]	@ (8000990 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000938:	2101      	movs	r1, #1
 800093a:	0018      	movs	r0, r3
 800093c:	f000 fe78 	bl	8001630 <HAL_GPIO_TogglePin>
		state = true;
 8000940:	4b14      	ldr	r3, [pc, #80]	@ (8000994 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000942:	2201      	movs	r2, #1
 8000944:	701a      	strb	r2, [r3, #0]
		HAL_TIM_Base_Stop_IT(&htim1);
 8000946:	4b14      	ldr	r3, [pc, #80]	@ (8000998 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000948:	0018      	movs	r0, r3
 800094a:	f001 fb7d 	bl	8002048 <HAL_TIM_Base_Stop_IT>
		if (mode>=2)
			mode=0;
		state = true;
		HAL_TIM_Base_Stop_IT(&htim1);
	}
}
 800094e:	e01b      	b.n	8000988 <HAL_TIM_PeriodElapsedCallback+0x74>
	else if(HAL_GPIO_ReadPin(A_Button_EXTI_GPIO_Port, A_Button_EXTI_Pin) == GPIO_PIN_RESET){
 8000950:	2390      	movs	r3, #144	@ 0x90
 8000952:	05db      	lsls	r3, r3, #23
 8000954:	2180      	movs	r1, #128	@ 0x80
 8000956:	0018      	movs	r0, r3
 8000958:	f000 fe30 	bl	80015bc <HAL_GPIO_ReadPin>
 800095c:	1e03      	subs	r3, r0, #0
 800095e:	d113      	bne.n	8000988 <HAL_TIM_PeriodElapsedCallback+0x74>
		mode=mode+1;
 8000960:	4b0e      	ldr	r3, [pc, #56]	@ (800099c <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000962:	781b      	ldrb	r3, [r3, #0]
 8000964:	3301      	adds	r3, #1
 8000966:	b2da      	uxtb	r2, r3
 8000968:	4b0c      	ldr	r3, [pc, #48]	@ (800099c <HAL_TIM_PeriodElapsedCallback+0x88>)
 800096a:	701a      	strb	r2, [r3, #0]
		if (mode>=2)
 800096c:	4b0b      	ldr	r3, [pc, #44]	@ (800099c <HAL_TIM_PeriodElapsedCallback+0x88>)
 800096e:	781b      	ldrb	r3, [r3, #0]
 8000970:	2b01      	cmp	r3, #1
 8000972:	d902      	bls.n	800097a <HAL_TIM_PeriodElapsedCallback+0x66>
			mode=0;
 8000974:	4b09      	ldr	r3, [pc, #36]	@ (800099c <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000976:	2200      	movs	r2, #0
 8000978:	701a      	strb	r2, [r3, #0]
		state = true;
 800097a:	4b06      	ldr	r3, [pc, #24]	@ (8000994 <HAL_TIM_PeriodElapsedCallback+0x80>)
 800097c:	2201      	movs	r2, #1
 800097e:	701a      	strb	r2, [r3, #0]
		HAL_TIM_Base_Stop_IT(&htim1);
 8000980:	4b05      	ldr	r3, [pc, #20]	@ (8000998 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000982:	0018      	movs	r0, r3
 8000984:	f001 fb60 	bl	8002048 <HAL_TIM_Base_Stop_IT>
}
 8000988:	46c0      	nop			@ (mov r8, r8)
 800098a:	46bd      	mov	sp, r7
 800098c:	b002      	add	sp, #8
 800098e:	bd80      	pop	{r7, pc}
 8000990:	48001400 	.word	0x48001400
 8000994:	20000000 	.word	0x20000000
 8000998:	2000002c 	.word	0x2000002c
 800099c:	200000bc 	.word	0x200000bc

080009a0 <DisplayNumber>:

/* 7seg display related from here */
void DisplayNumber(uint8_t Position, uint8_t Number){
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b082      	sub	sp, #8
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	0002      	movs	r2, r0
 80009a8:	1dfb      	adds	r3, r7, #7
 80009aa:	701a      	strb	r2, [r3, #0]
 80009ac:	1dbb      	adds	r3, r7, #6
 80009ae:	1c0a      	adds	r2, r1, #0
 80009b0:	701a      	strb	r2, [r3, #0]
	switch (Position){
 80009b2:	1dfb      	adds	r3, r7, #7
 80009b4:	781b      	ldrb	r3, [r3, #0]
 80009b6:	2b05      	cmp	r3, #5
 80009b8:	d900      	bls.n	80009bc <DisplayNumber+0x1c>
 80009ba:	e0fa      	b.n	8000bb2 <DisplayNumber+0x212>
 80009bc:	009a      	lsls	r2, r3, #2
 80009be:	4be8      	ldr	r3, [pc, #928]	@ (8000d60 <DisplayNumber+0x3c0>)
 80009c0:	18d3      	adds	r3, r2, r3
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	469f      	mov	pc, r3
		case 1:
			HAL_GPIO_WritePin(Display1_GPIO_Port, Display1_Pin, GPIO_PIN_RESET);
 80009c6:	2380      	movs	r3, #128	@ 0x80
 80009c8:	0099      	lsls	r1, r3, #2
 80009ca:	2390      	movs	r3, #144	@ 0x90
 80009cc:	05db      	lsls	r3, r3, #23
 80009ce:	2200      	movs	r2, #0
 80009d0:	0018      	movs	r0, r3
 80009d2:	f000 fe10 	bl	80015f6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Display2_GPIO_Port, Display2_Pin, GPIO_PIN_SET);
 80009d6:	2380      	movs	r3, #128	@ 0x80
 80009d8:	00d9      	lsls	r1, r3, #3
 80009da:	2390      	movs	r3, #144	@ 0x90
 80009dc:	05db      	lsls	r3, r3, #23
 80009de:	2201      	movs	r2, #1
 80009e0:	0018      	movs	r0, r3
 80009e2:	f000 fe08 	bl	80015f6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Display3_GPIO_Port, Display3_Pin, GPIO_PIN_SET);
 80009e6:	2380      	movs	r3, #128	@ 0x80
 80009e8:	0159      	lsls	r1, r3, #5
 80009ea:	2390      	movs	r3, #144	@ 0x90
 80009ec:	05db      	lsls	r3, r3, #23
 80009ee:	2201      	movs	r2, #1
 80009f0:	0018      	movs	r0, r3
 80009f2:	f000 fe00 	bl	80015f6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Display4_GPIO_Port, Display4_Pin, GPIO_PIN_SET);
 80009f6:	2380      	movs	r3, #128	@ 0x80
 80009f8:	0219      	lsls	r1, r3, #8
 80009fa:	2390      	movs	r3, #144	@ 0x90
 80009fc:	05db      	lsls	r3, r3, #23
 80009fe:	2201      	movs	r2, #1
 8000a00:	0018      	movs	r0, r3
 8000a02:	f000 fdf8 	bl	80015f6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(DisplayL_GPIO_Port, DisplayL_Pin, GPIO_PIN_SET);
 8000a06:	2380      	movs	r3, #128	@ 0x80
 8000a08:	0119      	lsls	r1, r3, #4
 8000a0a:	2390      	movs	r3, #144	@ 0x90
 8000a0c:	05db      	lsls	r3, r3, #23
 8000a0e:	2201      	movs	r2, #1
 8000a10:	0018      	movs	r0, r3
 8000a12:	f000 fdf0 	bl	80015f6 <HAL_GPIO_WritePin>
			break;
 8000a16:	e0cc      	b.n	8000bb2 <DisplayNumber+0x212>
		case 2:
			HAL_GPIO_WritePin(Display1_GPIO_Port, Display1_Pin, GPIO_PIN_SET);
 8000a18:	2380      	movs	r3, #128	@ 0x80
 8000a1a:	0099      	lsls	r1, r3, #2
 8000a1c:	2390      	movs	r3, #144	@ 0x90
 8000a1e:	05db      	lsls	r3, r3, #23
 8000a20:	2201      	movs	r2, #1
 8000a22:	0018      	movs	r0, r3
 8000a24:	f000 fde7 	bl	80015f6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Display2_GPIO_Port, Display2_Pin, GPIO_PIN_RESET);
 8000a28:	2380      	movs	r3, #128	@ 0x80
 8000a2a:	00d9      	lsls	r1, r3, #3
 8000a2c:	2390      	movs	r3, #144	@ 0x90
 8000a2e:	05db      	lsls	r3, r3, #23
 8000a30:	2200      	movs	r2, #0
 8000a32:	0018      	movs	r0, r3
 8000a34:	f000 fddf 	bl	80015f6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Display3_GPIO_Port, Display3_Pin, GPIO_PIN_SET);
 8000a38:	2380      	movs	r3, #128	@ 0x80
 8000a3a:	0159      	lsls	r1, r3, #5
 8000a3c:	2390      	movs	r3, #144	@ 0x90
 8000a3e:	05db      	lsls	r3, r3, #23
 8000a40:	2201      	movs	r2, #1
 8000a42:	0018      	movs	r0, r3
 8000a44:	f000 fdd7 	bl	80015f6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Display4_GPIO_Port, Display4_Pin, GPIO_PIN_SET);
 8000a48:	2380      	movs	r3, #128	@ 0x80
 8000a4a:	0219      	lsls	r1, r3, #8
 8000a4c:	2390      	movs	r3, #144	@ 0x90
 8000a4e:	05db      	lsls	r3, r3, #23
 8000a50:	2201      	movs	r2, #1
 8000a52:	0018      	movs	r0, r3
 8000a54:	f000 fdcf 	bl	80015f6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(DisplayL_GPIO_Port, DisplayL_Pin, GPIO_PIN_SET);
 8000a58:	2380      	movs	r3, #128	@ 0x80
 8000a5a:	0119      	lsls	r1, r3, #4
 8000a5c:	2390      	movs	r3, #144	@ 0x90
 8000a5e:	05db      	lsls	r3, r3, #23
 8000a60:	2201      	movs	r2, #1
 8000a62:	0018      	movs	r0, r3
 8000a64:	f000 fdc7 	bl	80015f6 <HAL_GPIO_WritePin>
			break;
 8000a68:	e0a3      	b.n	8000bb2 <DisplayNumber+0x212>
		case 3:
			HAL_GPIO_WritePin(Display1_GPIO_Port, Display1_Pin, GPIO_PIN_SET);
 8000a6a:	2380      	movs	r3, #128	@ 0x80
 8000a6c:	0099      	lsls	r1, r3, #2
 8000a6e:	2390      	movs	r3, #144	@ 0x90
 8000a70:	05db      	lsls	r3, r3, #23
 8000a72:	2201      	movs	r2, #1
 8000a74:	0018      	movs	r0, r3
 8000a76:	f000 fdbe 	bl	80015f6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Display2_GPIO_Port, Display2_Pin, GPIO_PIN_SET);
 8000a7a:	2380      	movs	r3, #128	@ 0x80
 8000a7c:	00d9      	lsls	r1, r3, #3
 8000a7e:	2390      	movs	r3, #144	@ 0x90
 8000a80:	05db      	lsls	r3, r3, #23
 8000a82:	2201      	movs	r2, #1
 8000a84:	0018      	movs	r0, r3
 8000a86:	f000 fdb6 	bl	80015f6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Display3_GPIO_Port, Display3_Pin, GPIO_PIN_RESET);
 8000a8a:	2380      	movs	r3, #128	@ 0x80
 8000a8c:	0159      	lsls	r1, r3, #5
 8000a8e:	2390      	movs	r3, #144	@ 0x90
 8000a90:	05db      	lsls	r3, r3, #23
 8000a92:	2200      	movs	r2, #0
 8000a94:	0018      	movs	r0, r3
 8000a96:	f000 fdae 	bl	80015f6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Display4_GPIO_Port, Display4_Pin, GPIO_PIN_SET);
 8000a9a:	2380      	movs	r3, #128	@ 0x80
 8000a9c:	0219      	lsls	r1, r3, #8
 8000a9e:	2390      	movs	r3, #144	@ 0x90
 8000aa0:	05db      	lsls	r3, r3, #23
 8000aa2:	2201      	movs	r2, #1
 8000aa4:	0018      	movs	r0, r3
 8000aa6:	f000 fda6 	bl	80015f6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(DisplayL_GPIO_Port, DisplayL_Pin, GPIO_PIN_SET);
 8000aaa:	2380      	movs	r3, #128	@ 0x80
 8000aac:	0119      	lsls	r1, r3, #4
 8000aae:	2390      	movs	r3, #144	@ 0x90
 8000ab0:	05db      	lsls	r3, r3, #23
 8000ab2:	2201      	movs	r2, #1
 8000ab4:	0018      	movs	r0, r3
 8000ab6:	f000 fd9e 	bl	80015f6 <HAL_GPIO_WritePin>
			break;
 8000aba:	e07a      	b.n	8000bb2 <DisplayNumber+0x212>
		case 4:
			HAL_GPIO_WritePin(Display1_GPIO_Port, Display1_Pin, GPIO_PIN_SET);
 8000abc:	2380      	movs	r3, #128	@ 0x80
 8000abe:	0099      	lsls	r1, r3, #2
 8000ac0:	2390      	movs	r3, #144	@ 0x90
 8000ac2:	05db      	lsls	r3, r3, #23
 8000ac4:	2201      	movs	r2, #1
 8000ac6:	0018      	movs	r0, r3
 8000ac8:	f000 fd95 	bl	80015f6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Display2_GPIO_Port, Display2_Pin, GPIO_PIN_SET);
 8000acc:	2380      	movs	r3, #128	@ 0x80
 8000ace:	00d9      	lsls	r1, r3, #3
 8000ad0:	2390      	movs	r3, #144	@ 0x90
 8000ad2:	05db      	lsls	r3, r3, #23
 8000ad4:	2201      	movs	r2, #1
 8000ad6:	0018      	movs	r0, r3
 8000ad8:	f000 fd8d 	bl	80015f6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Display3_GPIO_Port, Display3_Pin, GPIO_PIN_SET);
 8000adc:	2380      	movs	r3, #128	@ 0x80
 8000ade:	0159      	lsls	r1, r3, #5
 8000ae0:	2390      	movs	r3, #144	@ 0x90
 8000ae2:	05db      	lsls	r3, r3, #23
 8000ae4:	2201      	movs	r2, #1
 8000ae6:	0018      	movs	r0, r3
 8000ae8:	f000 fd85 	bl	80015f6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Display4_GPIO_Port, Display4_Pin, GPIO_PIN_RESET);
 8000aec:	2380      	movs	r3, #128	@ 0x80
 8000aee:	0219      	lsls	r1, r3, #8
 8000af0:	2390      	movs	r3, #144	@ 0x90
 8000af2:	05db      	lsls	r3, r3, #23
 8000af4:	2200      	movs	r2, #0
 8000af6:	0018      	movs	r0, r3
 8000af8:	f000 fd7d 	bl	80015f6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(DisplayL_GPIO_Port, DisplayL_Pin, GPIO_PIN_SET);
 8000afc:	2380      	movs	r3, #128	@ 0x80
 8000afe:	0119      	lsls	r1, r3, #4
 8000b00:	2390      	movs	r3, #144	@ 0x90
 8000b02:	05db      	lsls	r3, r3, #23
 8000b04:	2201      	movs	r2, #1
 8000b06:	0018      	movs	r0, r3
 8000b08:	f000 fd75 	bl	80015f6 <HAL_GPIO_WritePin>
			break;
 8000b0c:	e051      	b.n	8000bb2 <DisplayNumber+0x212>
		case 5:
			HAL_GPIO_WritePin(Display1_GPIO_Port, Display1_Pin, GPIO_PIN_SET);
 8000b0e:	2380      	movs	r3, #128	@ 0x80
 8000b10:	0099      	lsls	r1, r3, #2
 8000b12:	2390      	movs	r3, #144	@ 0x90
 8000b14:	05db      	lsls	r3, r3, #23
 8000b16:	2201      	movs	r2, #1
 8000b18:	0018      	movs	r0, r3
 8000b1a:	f000 fd6c 	bl	80015f6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Display2_GPIO_Port, Display2_Pin, GPIO_PIN_SET);
 8000b1e:	2380      	movs	r3, #128	@ 0x80
 8000b20:	00d9      	lsls	r1, r3, #3
 8000b22:	2390      	movs	r3, #144	@ 0x90
 8000b24:	05db      	lsls	r3, r3, #23
 8000b26:	2201      	movs	r2, #1
 8000b28:	0018      	movs	r0, r3
 8000b2a:	f000 fd64 	bl	80015f6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Display3_GPIO_Port, Display3_Pin, GPIO_PIN_SET);
 8000b2e:	2380      	movs	r3, #128	@ 0x80
 8000b30:	0159      	lsls	r1, r3, #5
 8000b32:	2390      	movs	r3, #144	@ 0x90
 8000b34:	05db      	lsls	r3, r3, #23
 8000b36:	2201      	movs	r2, #1
 8000b38:	0018      	movs	r0, r3
 8000b3a:	f000 fd5c 	bl	80015f6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Display4_GPIO_Port, Display4_Pin, GPIO_PIN_SET);
 8000b3e:	2380      	movs	r3, #128	@ 0x80
 8000b40:	0219      	lsls	r1, r3, #8
 8000b42:	2390      	movs	r3, #144	@ 0x90
 8000b44:	05db      	lsls	r3, r3, #23
 8000b46:	2201      	movs	r2, #1
 8000b48:	0018      	movs	r0, r3
 8000b4a:	f000 fd54 	bl	80015f6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(DisplayL_GPIO_Port, DisplayL_Pin, GPIO_PIN_RESET);
 8000b4e:	2380      	movs	r3, #128	@ 0x80
 8000b50:	0119      	lsls	r1, r3, #4
 8000b52:	2390      	movs	r3, #144	@ 0x90
 8000b54:	05db      	lsls	r3, r3, #23
 8000b56:	2200      	movs	r2, #0
 8000b58:	0018      	movs	r0, r3
 8000b5a:	f000 fd4c 	bl	80015f6 <HAL_GPIO_WritePin>
			break;
 8000b5e:	e028      	b.n	8000bb2 <DisplayNumber+0x212>
		case 0:
			//all off
			HAL_GPIO_WritePin(Display1_GPIO_Port, Display1_Pin, GPIO_PIN_SET);
 8000b60:	2380      	movs	r3, #128	@ 0x80
 8000b62:	0099      	lsls	r1, r3, #2
 8000b64:	2390      	movs	r3, #144	@ 0x90
 8000b66:	05db      	lsls	r3, r3, #23
 8000b68:	2201      	movs	r2, #1
 8000b6a:	0018      	movs	r0, r3
 8000b6c:	f000 fd43 	bl	80015f6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Display2_GPIO_Port, Display2_Pin, GPIO_PIN_SET);
 8000b70:	2380      	movs	r3, #128	@ 0x80
 8000b72:	00d9      	lsls	r1, r3, #3
 8000b74:	2390      	movs	r3, #144	@ 0x90
 8000b76:	05db      	lsls	r3, r3, #23
 8000b78:	2201      	movs	r2, #1
 8000b7a:	0018      	movs	r0, r3
 8000b7c:	f000 fd3b 	bl	80015f6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Display3_GPIO_Port, Display3_Pin, GPIO_PIN_SET);
 8000b80:	2380      	movs	r3, #128	@ 0x80
 8000b82:	0159      	lsls	r1, r3, #5
 8000b84:	2390      	movs	r3, #144	@ 0x90
 8000b86:	05db      	lsls	r3, r3, #23
 8000b88:	2201      	movs	r2, #1
 8000b8a:	0018      	movs	r0, r3
 8000b8c:	f000 fd33 	bl	80015f6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Display4_GPIO_Port, Display4_Pin, GPIO_PIN_SET);
 8000b90:	2380      	movs	r3, #128	@ 0x80
 8000b92:	0219      	lsls	r1, r3, #8
 8000b94:	2390      	movs	r3, #144	@ 0x90
 8000b96:	05db      	lsls	r3, r3, #23
 8000b98:	2201      	movs	r2, #1
 8000b9a:	0018      	movs	r0, r3
 8000b9c:	f000 fd2b 	bl	80015f6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(DisplayL_GPIO_Port, DisplayL_Pin, GPIO_PIN_SET);
 8000ba0:	2380      	movs	r3, #128	@ 0x80
 8000ba2:	0119      	lsls	r1, r3, #4
 8000ba4:	2390      	movs	r3, #144	@ 0x90
 8000ba6:	05db      	lsls	r3, r3, #23
 8000ba8:	2201      	movs	r2, #1
 8000baa:	0018      	movs	r0, r3
 8000bac:	f000 fd23 	bl	80015f6 <HAL_GPIO_WritePin>
			break;
 8000bb0:	46c0      	nop			@ (mov r8, r8)

	}

	switch (Number){
 8000bb2:	1dbb      	adds	r3, r7, #6
 8000bb4:	781b      	ldrb	r3, [r3, #0]
 8000bb6:	2b0a      	cmp	r3, #10
 8000bb8:	d900      	bls.n	8000bbc <DisplayNumber+0x21c>
 8000bba:	e10a      	b.n	8000dd2 <DisplayNumber+0x432>
 8000bbc:	009a      	lsls	r2, r3, #2
 8000bbe:	4b69      	ldr	r3, [pc, #420]	@ (8000d64 <DisplayNumber+0x3c4>)
 8000bc0:	18d3      	adds	r3, r2, r3
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	469f      	mov	pc, r3
		//case 0:

		case 1:
			HAL_GPIO_WritePin(DispA_GPIO_Port, DispA_Pin, GPIO_PIN_SET);
 8000bc6:	4b68      	ldr	r3, [pc, #416]	@ (8000d68 <DisplayNumber+0x3c8>)
 8000bc8:	2201      	movs	r2, #1
 8000bca:	2120      	movs	r1, #32
 8000bcc:	0018      	movs	r0, r3
 8000bce:	f000 fd12 	bl	80015f6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(DispB_GPIO_Port, DispB_Pin, GPIO_PIN_RESET);
 8000bd2:	4b65      	ldr	r3, [pc, #404]	@ (8000d68 <DisplayNumber+0x3c8>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	2180      	movs	r1, #128	@ 0x80
 8000bd8:	0018      	movs	r0, r3
 8000bda:	f000 fd0c 	bl	80015f6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(DispC_GPIO_Port, DispC_Pin, GPIO_PIN_RESET);
 8000bde:	4b62      	ldr	r3, [pc, #392]	@ (8000d68 <DisplayNumber+0x3c8>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	2110      	movs	r1, #16
 8000be4:	0018      	movs	r0, r3
 8000be6:	f000 fd06 	bl	80015f6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(DispD_GPIO_Port, DispD_Pin, GPIO_PIN_SET);
 8000bea:	2380      	movs	r3, #128	@ 0x80
 8000bec:	0059      	lsls	r1, r3, #1
 8000bee:	2390      	movs	r3, #144	@ 0x90
 8000bf0:	05db      	lsls	r3, r3, #23
 8000bf2:	2201      	movs	r2, #1
 8000bf4:	0018      	movs	r0, r3
 8000bf6:	f000 fcfe 	bl	80015f6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(DispE_GPIO_Port, DispE_Pin, GPIO_PIN_SET);
 8000bfa:	4b5b      	ldr	r3, [pc, #364]	@ (8000d68 <DisplayNumber+0x3c8>)
 8000bfc:	2201      	movs	r2, #1
 8000bfe:	2102      	movs	r1, #2
 8000c00:	0018      	movs	r0, r3
 8000c02:	f000 fcf8 	bl	80015f6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(DispF_GPIO_Port, DispF_Pin, GPIO_PIN_SET);
 8000c06:	4b58      	ldr	r3, [pc, #352]	@ (8000d68 <DisplayNumber+0x3c8>)
 8000c08:	2201      	movs	r2, #1
 8000c0a:	2108      	movs	r1, #8
 8000c0c:	0018      	movs	r0, r3
 8000c0e:	f000 fcf2 	bl	80015f6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(DispG_GPIO_Port, DispG_Pin, GPIO_PIN_SET);
 8000c12:	4b55      	ldr	r3, [pc, #340]	@ (8000d68 <DisplayNumber+0x3c8>)
 8000c14:	2201      	movs	r2, #1
 8000c16:	2140      	movs	r1, #64	@ 0x40
 8000c18:	0018      	movs	r0, r3
 8000c1a:	f000 fcec 	bl	80015f6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(DispDP_GPIO_Port, DispDP_Pin, GPIO_PIN_SET);
 8000c1e:	4b52      	ldr	r3, [pc, #328]	@ (8000d68 <DisplayNumber+0x3c8>)
 8000c20:	2201      	movs	r2, #1
 8000c22:	2101      	movs	r1, #1
 8000c24:	0018      	movs	r0, r3
 8000c26:	f000 fce6 	bl	80015f6 <HAL_GPIO_WritePin>
			break;
 8000c2a:	e0d2      	b.n	8000dd2 <DisplayNumber+0x432>
		case 2:
			HAL_GPIO_WritePin(DispA_GPIO_Port, DispA_Pin, GPIO_PIN_RESET);
 8000c2c:	4b4e      	ldr	r3, [pc, #312]	@ (8000d68 <DisplayNumber+0x3c8>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	2120      	movs	r1, #32
 8000c32:	0018      	movs	r0, r3
 8000c34:	f000 fcdf 	bl	80015f6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(DispB_GPIO_Port, DispB_Pin, GPIO_PIN_RESET);
 8000c38:	4b4b      	ldr	r3, [pc, #300]	@ (8000d68 <DisplayNumber+0x3c8>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	2180      	movs	r1, #128	@ 0x80
 8000c3e:	0018      	movs	r0, r3
 8000c40:	f000 fcd9 	bl	80015f6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(DispC_GPIO_Port, DispC_Pin, GPIO_PIN_SET);
 8000c44:	4b48      	ldr	r3, [pc, #288]	@ (8000d68 <DisplayNumber+0x3c8>)
 8000c46:	2201      	movs	r2, #1
 8000c48:	2110      	movs	r1, #16
 8000c4a:	0018      	movs	r0, r3
 8000c4c:	f000 fcd3 	bl	80015f6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(DispD_GPIO_Port, DispD_Pin, GPIO_PIN_RESET);
 8000c50:	2380      	movs	r3, #128	@ 0x80
 8000c52:	0059      	lsls	r1, r3, #1
 8000c54:	2390      	movs	r3, #144	@ 0x90
 8000c56:	05db      	lsls	r3, r3, #23
 8000c58:	2200      	movs	r2, #0
 8000c5a:	0018      	movs	r0, r3
 8000c5c:	f000 fccb 	bl	80015f6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(DispE_GPIO_Port, DispE_Pin, GPIO_PIN_RESET);
 8000c60:	4b41      	ldr	r3, [pc, #260]	@ (8000d68 <DisplayNumber+0x3c8>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	2102      	movs	r1, #2
 8000c66:	0018      	movs	r0, r3
 8000c68:	f000 fcc5 	bl	80015f6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(DispF_GPIO_Port, DispF_Pin, GPIO_PIN_SET);
 8000c6c:	4b3e      	ldr	r3, [pc, #248]	@ (8000d68 <DisplayNumber+0x3c8>)
 8000c6e:	2201      	movs	r2, #1
 8000c70:	2108      	movs	r1, #8
 8000c72:	0018      	movs	r0, r3
 8000c74:	f000 fcbf 	bl	80015f6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(DispG_GPIO_Port, DispG_Pin, GPIO_PIN_RESET);
 8000c78:	4b3b      	ldr	r3, [pc, #236]	@ (8000d68 <DisplayNumber+0x3c8>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	2140      	movs	r1, #64	@ 0x40
 8000c7e:	0018      	movs	r0, r3
 8000c80:	f000 fcb9 	bl	80015f6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(DispDP_GPIO_Port, DispDP_Pin, GPIO_PIN_SET);
 8000c84:	4b38      	ldr	r3, [pc, #224]	@ (8000d68 <DisplayNumber+0x3c8>)
 8000c86:	2201      	movs	r2, #1
 8000c88:	2101      	movs	r1, #1
 8000c8a:	0018      	movs	r0, r3
 8000c8c:	f000 fcb3 	bl	80015f6 <HAL_GPIO_WritePin>
			break;
 8000c90:	e09f      	b.n	8000dd2 <DisplayNumber+0x432>
		case 3:
			HAL_GPIO_WritePin(DispA_GPIO_Port, DispA_Pin, GPIO_PIN_RESET);
 8000c92:	4b35      	ldr	r3, [pc, #212]	@ (8000d68 <DisplayNumber+0x3c8>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	2120      	movs	r1, #32
 8000c98:	0018      	movs	r0, r3
 8000c9a:	f000 fcac 	bl	80015f6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(DispB_GPIO_Port, DispB_Pin, GPIO_PIN_RESET);
 8000c9e:	4b32      	ldr	r3, [pc, #200]	@ (8000d68 <DisplayNumber+0x3c8>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	2180      	movs	r1, #128	@ 0x80
 8000ca4:	0018      	movs	r0, r3
 8000ca6:	f000 fca6 	bl	80015f6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(DispC_GPIO_Port, DispC_Pin, GPIO_PIN_RESET);
 8000caa:	4b2f      	ldr	r3, [pc, #188]	@ (8000d68 <DisplayNumber+0x3c8>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	2110      	movs	r1, #16
 8000cb0:	0018      	movs	r0, r3
 8000cb2:	f000 fca0 	bl	80015f6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(DispD_GPIO_Port, DispD_Pin, GPIO_PIN_RESET);
 8000cb6:	2380      	movs	r3, #128	@ 0x80
 8000cb8:	0059      	lsls	r1, r3, #1
 8000cba:	2390      	movs	r3, #144	@ 0x90
 8000cbc:	05db      	lsls	r3, r3, #23
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	0018      	movs	r0, r3
 8000cc2:	f000 fc98 	bl	80015f6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(DispE_GPIO_Port, DispE_Pin, GPIO_PIN_SET);
 8000cc6:	4b28      	ldr	r3, [pc, #160]	@ (8000d68 <DisplayNumber+0x3c8>)
 8000cc8:	2201      	movs	r2, #1
 8000cca:	2102      	movs	r1, #2
 8000ccc:	0018      	movs	r0, r3
 8000cce:	f000 fc92 	bl	80015f6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(DispF_GPIO_Port, DispF_Pin, GPIO_PIN_SET);
 8000cd2:	4b25      	ldr	r3, [pc, #148]	@ (8000d68 <DisplayNumber+0x3c8>)
 8000cd4:	2201      	movs	r2, #1
 8000cd6:	2108      	movs	r1, #8
 8000cd8:	0018      	movs	r0, r3
 8000cda:	f000 fc8c 	bl	80015f6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(DispG_GPIO_Port, DispG_Pin, GPIO_PIN_RESET);
 8000cde:	4b22      	ldr	r3, [pc, #136]	@ (8000d68 <DisplayNumber+0x3c8>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	2140      	movs	r1, #64	@ 0x40
 8000ce4:	0018      	movs	r0, r3
 8000ce6:	f000 fc86 	bl	80015f6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(DispDP_GPIO_Port, DispDP_Pin, GPIO_PIN_SET);
 8000cea:	4b1f      	ldr	r3, [pc, #124]	@ (8000d68 <DisplayNumber+0x3c8>)
 8000cec:	2201      	movs	r2, #1
 8000cee:	2101      	movs	r1, #1
 8000cf0:	0018      	movs	r0, r3
 8000cf2:	f000 fc80 	bl	80015f6 <HAL_GPIO_WritePin>
			break;
 8000cf6:	e06c      	b.n	8000dd2 <DisplayNumber+0x432>
		case 4:
			HAL_GPIO_WritePin(DispA_GPIO_Port, DispA_Pin, GPIO_PIN_SET);
 8000cf8:	4b1b      	ldr	r3, [pc, #108]	@ (8000d68 <DisplayNumber+0x3c8>)
 8000cfa:	2201      	movs	r2, #1
 8000cfc:	2120      	movs	r1, #32
 8000cfe:	0018      	movs	r0, r3
 8000d00:	f000 fc79 	bl	80015f6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(DispB_GPIO_Port, DispB_Pin, GPIO_PIN_RESET);
 8000d04:	4b18      	ldr	r3, [pc, #96]	@ (8000d68 <DisplayNumber+0x3c8>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	2180      	movs	r1, #128	@ 0x80
 8000d0a:	0018      	movs	r0, r3
 8000d0c:	f000 fc73 	bl	80015f6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(DispC_GPIO_Port, DispC_Pin, GPIO_PIN_RESET);
 8000d10:	4b15      	ldr	r3, [pc, #84]	@ (8000d68 <DisplayNumber+0x3c8>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	2110      	movs	r1, #16
 8000d16:	0018      	movs	r0, r3
 8000d18:	f000 fc6d 	bl	80015f6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(DispD_GPIO_Port, DispD_Pin, GPIO_PIN_SET);
 8000d1c:	2380      	movs	r3, #128	@ 0x80
 8000d1e:	0059      	lsls	r1, r3, #1
 8000d20:	2390      	movs	r3, #144	@ 0x90
 8000d22:	05db      	lsls	r3, r3, #23
 8000d24:	2201      	movs	r2, #1
 8000d26:	0018      	movs	r0, r3
 8000d28:	f000 fc65 	bl	80015f6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(DispE_GPIO_Port, DispE_Pin, GPIO_PIN_SET);
 8000d2c:	4b0e      	ldr	r3, [pc, #56]	@ (8000d68 <DisplayNumber+0x3c8>)
 8000d2e:	2201      	movs	r2, #1
 8000d30:	2102      	movs	r1, #2
 8000d32:	0018      	movs	r0, r3
 8000d34:	f000 fc5f 	bl	80015f6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(DispF_GPIO_Port, DispF_Pin, GPIO_PIN_RESET);
 8000d38:	4b0b      	ldr	r3, [pc, #44]	@ (8000d68 <DisplayNumber+0x3c8>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	2108      	movs	r1, #8
 8000d3e:	0018      	movs	r0, r3
 8000d40:	f000 fc59 	bl	80015f6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(DispG_GPIO_Port, DispG_Pin, GPIO_PIN_RESET);
 8000d44:	4b08      	ldr	r3, [pc, #32]	@ (8000d68 <DisplayNumber+0x3c8>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	2140      	movs	r1, #64	@ 0x40
 8000d4a:	0018      	movs	r0, r3
 8000d4c:	f000 fc53 	bl	80015f6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(DispDP_GPIO_Port, DispDP_Pin, GPIO_PIN_SET);
 8000d50:	4b05      	ldr	r3, [pc, #20]	@ (8000d68 <DisplayNumber+0x3c8>)
 8000d52:	2201      	movs	r2, #1
 8000d54:	2101      	movs	r1, #1
 8000d56:	0018      	movs	r0, r3
 8000d58:	f000 fc4d 	bl	80015f6 <HAL_GPIO_WritePin>
			break;
 8000d5c:	e039      	b.n	8000dd2 <DisplayNumber+0x432>
 8000d5e:	46c0      	nop			@ (mov r8, r8)
 8000d60:	08002f54 	.word	0x08002f54
 8000d64:	08002f6c 	.word	0x08002f6c
 8000d68:	48000400 	.word	0x48000400
		case 10:
			//all off
			HAL_GPIO_WritePin(DispA_GPIO_Port, DispA_Pin, GPIO_PIN_SET);
 8000d6c:	4b1b      	ldr	r3, [pc, #108]	@ (8000ddc <DisplayNumber+0x43c>)
 8000d6e:	2201      	movs	r2, #1
 8000d70:	2120      	movs	r1, #32
 8000d72:	0018      	movs	r0, r3
 8000d74:	f000 fc3f 	bl	80015f6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(DispB_GPIO_Port, DispB_Pin, GPIO_PIN_SET);
 8000d78:	4b18      	ldr	r3, [pc, #96]	@ (8000ddc <DisplayNumber+0x43c>)
 8000d7a:	2201      	movs	r2, #1
 8000d7c:	2180      	movs	r1, #128	@ 0x80
 8000d7e:	0018      	movs	r0, r3
 8000d80:	f000 fc39 	bl	80015f6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(DispC_GPIO_Port, DispC_Pin, GPIO_PIN_SET);
 8000d84:	4b15      	ldr	r3, [pc, #84]	@ (8000ddc <DisplayNumber+0x43c>)
 8000d86:	2201      	movs	r2, #1
 8000d88:	2110      	movs	r1, #16
 8000d8a:	0018      	movs	r0, r3
 8000d8c:	f000 fc33 	bl	80015f6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(DispD_GPIO_Port, DispD_Pin, GPIO_PIN_SET);
 8000d90:	2380      	movs	r3, #128	@ 0x80
 8000d92:	0059      	lsls	r1, r3, #1
 8000d94:	2390      	movs	r3, #144	@ 0x90
 8000d96:	05db      	lsls	r3, r3, #23
 8000d98:	2201      	movs	r2, #1
 8000d9a:	0018      	movs	r0, r3
 8000d9c:	f000 fc2b 	bl	80015f6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(DispE_GPIO_Port, DispE_Pin, GPIO_PIN_SET);
 8000da0:	4b0e      	ldr	r3, [pc, #56]	@ (8000ddc <DisplayNumber+0x43c>)
 8000da2:	2201      	movs	r2, #1
 8000da4:	2102      	movs	r1, #2
 8000da6:	0018      	movs	r0, r3
 8000da8:	f000 fc25 	bl	80015f6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(DispF_GPIO_Port, DispF_Pin, GPIO_PIN_SET);
 8000dac:	4b0b      	ldr	r3, [pc, #44]	@ (8000ddc <DisplayNumber+0x43c>)
 8000dae:	2201      	movs	r2, #1
 8000db0:	2108      	movs	r1, #8
 8000db2:	0018      	movs	r0, r3
 8000db4:	f000 fc1f 	bl	80015f6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(DispG_GPIO_Port, DispG_Pin, GPIO_PIN_SET);
 8000db8:	4b08      	ldr	r3, [pc, #32]	@ (8000ddc <DisplayNumber+0x43c>)
 8000dba:	2201      	movs	r2, #1
 8000dbc:	2140      	movs	r1, #64	@ 0x40
 8000dbe:	0018      	movs	r0, r3
 8000dc0:	f000 fc19 	bl	80015f6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(DispDP_GPIO_Port, DispDP_Pin, GPIO_PIN_SET);
 8000dc4:	4b05      	ldr	r3, [pc, #20]	@ (8000ddc <DisplayNumber+0x43c>)
 8000dc6:	2201      	movs	r2, #1
 8000dc8:	2101      	movs	r1, #1
 8000dca:	0018      	movs	r0, r3
 8000dcc:	f000 fc13 	bl	80015f6 <HAL_GPIO_WritePin>
			break;
 8000dd0:	46c0      	nop			@ (mov r8, r8)
	}

}
 8000dd2:	46c0      	nop			@ (mov r8, r8)
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	b002      	add	sp, #8
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	46c0      	nop			@ (mov r8, r8)
 8000ddc:	48000400 	.word	0x48000400

08000de0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000de4:	b672      	cpsid	i
}
 8000de6:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000de8:	46c0      	nop			@ (mov r8, r8)
 8000dea:	e7fd      	b.n	8000de8 <Error_Handler+0x8>

08000dec <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b082      	sub	sp, #8
 8000df0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000df2:	4b0f      	ldr	r3, [pc, #60]	@ (8000e30 <HAL_MspInit+0x44>)
 8000df4:	699a      	ldr	r2, [r3, #24]
 8000df6:	4b0e      	ldr	r3, [pc, #56]	@ (8000e30 <HAL_MspInit+0x44>)
 8000df8:	2101      	movs	r1, #1
 8000dfa:	430a      	orrs	r2, r1
 8000dfc:	619a      	str	r2, [r3, #24]
 8000dfe:	4b0c      	ldr	r3, [pc, #48]	@ (8000e30 <HAL_MspInit+0x44>)
 8000e00:	699b      	ldr	r3, [r3, #24]
 8000e02:	2201      	movs	r2, #1
 8000e04:	4013      	ands	r3, r2
 8000e06:	607b      	str	r3, [r7, #4]
 8000e08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e0a:	4b09      	ldr	r3, [pc, #36]	@ (8000e30 <HAL_MspInit+0x44>)
 8000e0c:	69da      	ldr	r2, [r3, #28]
 8000e0e:	4b08      	ldr	r3, [pc, #32]	@ (8000e30 <HAL_MspInit+0x44>)
 8000e10:	2180      	movs	r1, #128	@ 0x80
 8000e12:	0549      	lsls	r1, r1, #21
 8000e14:	430a      	orrs	r2, r1
 8000e16:	61da      	str	r2, [r3, #28]
 8000e18:	4b05      	ldr	r3, [pc, #20]	@ (8000e30 <HAL_MspInit+0x44>)
 8000e1a:	69da      	ldr	r2, [r3, #28]
 8000e1c:	2380      	movs	r3, #128	@ 0x80
 8000e1e:	055b      	lsls	r3, r3, #21
 8000e20:	4013      	ands	r3, r2
 8000e22:	603b      	str	r3, [r7, #0]
 8000e24:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e26:	46c0      	nop			@ (mov r8, r8)
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	b002      	add	sp, #8
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	46c0      	nop			@ (mov r8, r8)
 8000e30:	40021000 	.word	0x40021000

08000e34 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b084      	sub	sp, #16
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	4a1b      	ldr	r2, [pc, #108]	@ (8000eb0 <HAL_TIM_Base_MspInit+0x7c>)
 8000e42:	4293      	cmp	r3, r2
 8000e44:	d11e      	bne.n	8000e84 <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000e46:	4b1b      	ldr	r3, [pc, #108]	@ (8000eb4 <HAL_TIM_Base_MspInit+0x80>)
 8000e48:	699a      	ldr	r2, [r3, #24]
 8000e4a:	4b1a      	ldr	r3, [pc, #104]	@ (8000eb4 <HAL_TIM_Base_MspInit+0x80>)
 8000e4c:	2180      	movs	r1, #128	@ 0x80
 8000e4e:	0109      	lsls	r1, r1, #4
 8000e50:	430a      	orrs	r2, r1
 8000e52:	619a      	str	r2, [r3, #24]
 8000e54:	4b17      	ldr	r3, [pc, #92]	@ (8000eb4 <HAL_TIM_Base_MspInit+0x80>)
 8000e56:	699a      	ldr	r2, [r3, #24]
 8000e58:	2380      	movs	r3, #128	@ 0x80
 8000e5a:	011b      	lsls	r3, r3, #4
 8000e5c:	4013      	ands	r3, r2
 8000e5e:	60fb      	str	r3, [r7, #12]
 8000e60:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 0, 0);
 8000e62:	2200      	movs	r2, #0
 8000e64:	2100      	movs	r1, #0
 8000e66:	200d      	movs	r0, #13
 8000e68:	f000 fa06 	bl	8001278 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 8000e6c:	200d      	movs	r0, #13
 8000e6e:	f000 fa18 	bl	80012a2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8000e72:	2200      	movs	r2, #0
 8000e74:	2100      	movs	r1, #0
 8000e76:	200e      	movs	r0, #14
 8000e78:	f000 f9fe 	bl	8001278 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8000e7c:	200e      	movs	r0, #14
 8000e7e:	f000 fa10 	bl	80012a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000e82:	e010      	b.n	8000ea6 <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM3)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	4a0b      	ldr	r2, [pc, #44]	@ (8000eb8 <HAL_TIM_Base_MspInit+0x84>)
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	d10b      	bne.n	8000ea6 <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000e8e:	4b09      	ldr	r3, [pc, #36]	@ (8000eb4 <HAL_TIM_Base_MspInit+0x80>)
 8000e90:	69da      	ldr	r2, [r3, #28]
 8000e92:	4b08      	ldr	r3, [pc, #32]	@ (8000eb4 <HAL_TIM_Base_MspInit+0x80>)
 8000e94:	2102      	movs	r1, #2
 8000e96:	430a      	orrs	r2, r1
 8000e98:	61da      	str	r2, [r3, #28]
 8000e9a:	4b06      	ldr	r3, [pc, #24]	@ (8000eb4 <HAL_TIM_Base_MspInit+0x80>)
 8000e9c:	69db      	ldr	r3, [r3, #28]
 8000e9e:	2202      	movs	r2, #2
 8000ea0:	4013      	ands	r3, r2
 8000ea2:	60bb      	str	r3, [r7, #8]
 8000ea4:	68bb      	ldr	r3, [r7, #8]
}
 8000ea6:	46c0      	nop			@ (mov r8, r8)
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	b004      	add	sp, #16
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	46c0      	nop			@ (mov r8, r8)
 8000eb0:	40012c00 	.word	0x40012c00
 8000eb4:	40021000 	.word	0x40021000
 8000eb8:	40000400 	.word	0x40000400

08000ebc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000ebc:	b590      	push	{r4, r7, lr}
 8000ebe:	b089      	sub	sp, #36	@ 0x24
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ec4:	240c      	movs	r4, #12
 8000ec6:	193b      	adds	r3, r7, r4
 8000ec8:	0018      	movs	r0, r3
 8000eca:	2314      	movs	r3, #20
 8000ecc:	001a      	movs	r2, r3
 8000ece:	2100      	movs	r1, #0
 8000ed0:	f002 f808 	bl	8002ee4 <memset>
  if(htim->Instance==TIM3)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	4a15      	ldr	r2, [pc, #84]	@ (8000f30 <HAL_TIM_MspPostInit+0x74>)
 8000eda:	4293      	cmp	r3, r2
 8000edc:	d124      	bne.n	8000f28 <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ede:	4b15      	ldr	r3, [pc, #84]	@ (8000f34 <HAL_TIM_MspPostInit+0x78>)
 8000ee0:	695a      	ldr	r2, [r3, #20]
 8000ee2:	4b14      	ldr	r3, [pc, #80]	@ (8000f34 <HAL_TIM_MspPostInit+0x78>)
 8000ee4:	2180      	movs	r1, #128	@ 0x80
 8000ee6:	0289      	lsls	r1, r1, #10
 8000ee8:	430a      	orrs	r2, r1
 8000eea:	615a      	str	r2, [r3, #20]
 8000eec:	4b11      	ldr	r3, [pc, #68]	@ (8000f34 <HAL_TIM_MspPostInit+0x78>)
 8000eee:	695a      	ldr	r2, [r3, #20]
 8000ef0:	2380      	movs	r3, #128	@ 0x80
 8000ef2:	029b      	lsls	r3, r3, #10
 8000ef4:	4013      	ands	r3, r2
 8000ef6:	60bb      	str	r3, [r7, #8]
 8000ef8:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = Timer3_PWM_Pin;
 8000efa:	0021      	movs	r1, r4
 8000efc:	187b      	adds	r3, r7, r1
 8000efe:	2240      	movs	r2, #64	@ 0x40
 8000f00:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f02:	187b      	adds	r3, r7, r1
 8000f04:	2202      	movs	r2, #2
 8000f06:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f08:	187b      	adds	r3, r7, r1
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f0e:	187b      	adds	r3, r7, r1
 8000f10:	2200      	movs	r2, #0
 8000f12:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8000f14:	187b      	adds	r3, r7, r1
 8000f16:	2201      	movs	r2, #1
 8000f18:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(Timer3_PWM_GPIO_Port, &GPIO_InitStruct);
 8000f1a:	187a      	adds	r2, r7, r1
 8000f1c:	2390      	movs	r3, #144	@ 0x90
 8000f1e:	05db      	lsls	r3, r3, #23
 8000f20:	0011      	movs	r1, r2
 8000f22:	0018      	movs	r0, r3
 8000f24:	f000 f9da 	bl	80012dc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000f28:	46c0      	nop			@ (mov r8, r8)
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	b009      	add	sp, #36	@ 0x24
 8000f2e:	bd90      	pop	{r4, r7, pc}
 8000f30:	40000400 	.word	0x40000400
 8000f34:	40021000 	.word	0x40021000

08000f38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f3c:	46c0      	nop			@ (mov r8, r8)
 8000f3e:	e7fd      	b.n	8000f3c <NMI_Handler+0x4>

08000f40 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f44:	46c0      	nop			@ (mov r8, r8)
 8000f46:	e7fd      	b.n	8000f44 <HardFault_Handler+0x4>

08000f48 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000f4c:	46c0      	nop			@ (mov r8, r8)
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}

08000f52 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f52:	b580      	push	{r7, lr}
 8000f54:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f56:	46c0      	nop			@ (mov r8, r8)
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}

08000f5c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f60:	f000 f89e 	bl	80010a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f64:	46c0      	nop			@ (mov r8, r8)
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}

08000f6a <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8000f6a:	b580      	push	{r7, lr}
 8000f6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B_Button_EXTI_Pin);
 8000f6e:	2020      	movs	r0, #32
 8000f70:	f000 fb7a 	bl	8001668 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(A_Button_EXTI_Pin);
 8000f74:	2080      	movs	r0, #128	@ 0x80
 8000f76:	f000 fb77 	bl	8001668 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8000f7a:	46c0      	nop			@ (mov r8, r8)
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}

08000f80 <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000f84:	4b03      	ldr	r3, [pc, #12]	@ (8000f94 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 8000f86:	0018      	movs	r0, r3
 8000f88:	f001 f98a 	bl	80022a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 8000f8c:	46c0      	nop			@ (mov r8, r8)
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	46c0      	nop			@ (mov r8, r8)
 8000f94:	2000002c 	.word	0x2000002c

08000f98 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000f9c:	4b03      	ldr	r3, [pc, #12]	@ (8000fac <TIM1_CC_IRQHandler+0x14>)
 8000f9e:	0018      	movs	r0, r3
 8000fa0:	f001 f97e 	bl	80022a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8000fa4:	46c0      	nop			@ (mov r8, r8)
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	46c0      	nop			@ (mov r8, r8)
 8000fac:	2000002c 	.word	0x2000002c

08000fb0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000fb4:	46c0      	nop			@ (mov r8, r8)
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
	...

08000fbc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000fbc:	480d      	ldr	r0, [pc, #52]	@ (8000ff4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000fbe:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000fc0:	f7ff fff6 	bl	8000fb0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fc4:	480c      	ldr	r0, [pc, #48]	@ (8000ff8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000fc6:	490d      	ldr	r1, [pc, #52]	@ (8000ffc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000fc8:	4a0d      	ldr	r2, [pc, #52]	@ (8001000 <LoopForever+0xe>)
  movs r3, #0
 8000fca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fcc:	e002      	b.n	8000fd4 <LoopCopyDataInit>

08000fce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fd0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fd2:	3304      	adds	r3, #4

08000fd4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fd4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fd6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fd8:	d3f9      	bcc.n	8000fce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fda:	4a0a      	ldr	r2, [pc, #40]	@ (8001004 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000fdc:	4c0a      	ldr	r4, [pc, #40]	@ (8001008 <LoopForever+0x16>)
  movs r3, #0
 8000fde:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fe0:	e001      	b.n	8000fe6 <LoopFillZerobss>

08000fe2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fe2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fe4:	3204      	adds	r2, #4

08000fe6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fe6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fe8:	d3fb      	bcc.n	8000fe2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000fea:	f001 ff83 	bl	8002ef4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000fee:	f7ff fa01 	bl	80003f4 <main>

08000ff2 <LoopForever>:

LoopForever:
    b LoopForever
 8000ff2:	e7fe      	b.n	8000ff2 <LoopForever>
  ldr   r0, =_estack
 8000ff4:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 8000ff8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ffc:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001000:	08002fd0 	.word	0x08002fd0
  ldr r2, =_sbss
 8001004:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001008:	200000c4 	.word	0x200000c4

0800100c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800100c:	e7fe      	b.n	800100c <ADC1_IRQHandler>
	...

08001010 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001014:	4b07      	ldr	r3, [pc, #28]	@ (8001034 <HAL_Init+0x24>)
 8001016:	681a      	ldr	r2, [r3, #0]
 8001018:	4b06      	ldr	r3, [pc, #24]	@ (8001034 <HAL_Init+0x24>)
 800101a:	2110      	movs	r1, #16
 800101c:	430a      	orrs	r2, r1
 800101e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001020:	2003      	movs	r0, #3
 8001022:	f000 f809 	bl	8001038 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001026:	f7ff fee1 	bl	8000dec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800102a:	2300      	movs	r3, #0
}
 800102c:	0018      	movs	r0, r3
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
 8001032:	46c0      	nop			@ (mov r8, r8)
 8001034:	40022000 	.word	0x40022000

08001038 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001038:	b590      	push	{r4, r7, lr}
 800103a:	b083      	sub	sp, #12
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001040:	4b14      	ldr	r3, [pc, #80]	@ (8001094 <HAL_InitTick+0x5c>)
 8001042:	681c      	ldr	r4, [r3, #0]
 8001044:	4b14      	ldr	r3, [pc, #80]	@ (8001098 <HAL_InitTick+0x60>)
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	0019      	movs	r1, r3
 800104a:	23fa      	movs	r3, #250	@ 0xfa
 800104c:	0098      	lsls	r0, r3, #2
 800104e:	f7ff f85b 	bl	8000108 <__udivsi3>
 8001052:	0003      	movs	r3, r0
 8001054:	0019      	movs	r1, r3
 8001056:	0020      	movs	r0, r4
 8001058:	f7ff f856 	bl	8000108 <__udivsi3>
 800105c:	0003      	movs	r3, r0
 800105e:	0018      	movs	r0, r3
 8001060:	f000 f92f 	bl	80012c2 <HAL_SYSTICK_Config>
 8001064:	1e03      	subs	r3, r0, #0
 8001066:	d001      	beq.n	800106c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001068:	2301      	movs	r3, #1
 800106a:	e00f      	b.n	800108c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	2b03      	cmp	r3, #3
 8001070:	d80b      	bhi.n	800108a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001072:	6879      	ldr	r1, [r7, #4]
 8001074:	2301      	movs	r3, #1
 8001076:	425b      	negs	r3, r3
 8001078:	2200      	movs	r2, #0
 800107a:	0018      	movs	r0, r3
 800107c:	f000 f8fc 	bl	8001278 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001080:	4b06      	ldr	r3, [pc, #24]	@ (800109c <HAL_InitTick+0x64>)
 8001082:	687a      	ldr	r2, [r7, #4]
 8001084:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8001086:	2300      	movs	r3, #0
 8001088:	e000      	b.n	800108c <HAL_InitTick+0x54>
    return HAL_ERROR;
 800108a:	2301      	movs	r3, #1
}
 800108c:	0018      	movs	r0, r3
 800108e:	46bd      	mov	sp, r7
 8001090:	b003      	add	sp, #12
 8001092:	bd90      	pop	{r4, r7, pc}
 8001094:	20000004 	.word	0x20000004
 8001098:	2000000c 	.word	0x2000000c
 800109c:	20000008 	.word	0x20000008

080010a0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010a4:	4b05      	ldr	r3, [pc, #20]	@ (80010bc <HAL_IncTick+0x1c>)
 80010a6:	781b      	ldrb	r3, [r3, #0]
 80010a8:	001a      	movs	r2, r3
 80010aa:	4b05      	ldr	r3, [pc, #20]	@ (80010c0 <HAL_IncTick+0x20>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	18d2      	adds	r2, r2, r3
 80010b0:	4b03      	ldr	r3, [pc, #12]	@ (80010c0 <HAL_IncTick+0x20>)
 80010b2:	601a      	str	r2, [r3, #0]
}
 80010b4:	46c0      	nop			@ (mov r8, r8)
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	46c0      	nop			@ (mov r8, r8)
 80010bc:	2000000c 	.word	0x2000000c
 80010c0:	200000c0 	.word	0x200000c0

080010c4 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	af00      	add	r7, sp, #0
  return uwTick;
 80010c8:	4b02      	ldr	r3, [pc, #8]	@ (80010d4 <HAL_GetTick+0x10>)
 80010ca:	681b      	ldr	r3, [r3, #0]
}
 80010cc:	0018      	movs	r0, r3
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	46c0      	nop			@ (mov r8, r8)
 80010d4:	200000c0 	.word	0x200000c0

080010d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b084      	sub	sp, #16
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010e0:	f7ff fff0 	bl	80010c4 <HAL_GetTick>
 80010e4:	0003      	movs	r3, r0
 80010e6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	3301      	adds	r3, #1
 80010f0:	d005      	beq.n	80010fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010f2:	4b0a      	ldr	r3, [pc, #40]	@ (800111c <HAL_Delay+0x44>)
 80010f4:	781b      	ldrb	r3, [r3, #0]
 80010f6:	001a      	movs	r2, r3
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	189b      	adds	r3, r3, r2
 80010fc:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80010fe:	46c0      	nop			@ (mov r8, r8)
 8001100:	f7ff ffe0 	bl	80010c4 <HAL_GetTick>
 8001104:	0002      	movs	r2, r0
 8001106:	68bb      	ldr	r3, [r7, #8]
 8001108:	1ad3      	subs	r3, r2, r3
 800110a:	68fa      	ldr	r2, [r7, #12]
 800110c:	429a      	cmp	r2, r3
 800110e:	d8f7      	bhi.n	8001100 <HAL_Delay+0x28>
  {
  }
}
 8001110:	46c0      	nop			@ (mov r8, r8)
 8001112:	46c0      	nop			@ (mov r8, r8)
 8001114:	46bd      	mov	sp, r7
 8001116:	b004      	add	sp, #16
 8001118:	bd80      	pop	{r7, pc}
 800111a:	46c0      	nop			@ (mov r8, r8)
 800111c:	2000000c 	.word	0x2000000c

08001120 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b082      	sub	sp, #8
 8001124:	af00      	add	r7, sp, #0
 8001126:	0002      	movs	r2, r0
 8001128:	1dfb      	adds	r3, r7, #7
 800112a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800112c:	1dfb      	adds	r3, r7, #7
 800112e:	781b      	ldrb	r3, [r3, #0]
 8001130:	2b7f      	cmp	r3, #127	@ 0x7f
 8001132:	d809      	bhi.n	8001148 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001134:	1dfb      	adds	r3, r7, #7
 8001136:	781b      	ldrb	r3, [r3, #0]
 8001138:	001a      	movs	r2, r3
 800113a:	231f      	movs	r3, #31
 800113c:	401a      	ands	r2, r3
 800113e:	4b04      	ldr	r3, [pc, #16]	@ (8001150 <__NVIC_EnableIRQ+0x30>)
 8001140:	2101      	movs	r1, #1
 8001142:	4091      	lsls	r1, r2
 8001144:	000a      	movs	r2, r1
 8001146:	601a      	str	r2, [r3, #0]
  }
}
 8001148:	46c0      	nop			@ (mov r8, r8)
 800114a:	46bd      	mov	sp, r7
 800114c:	b002      	add	sp, #8
 800114e:	bd80      	pop	{r7, pc}
 8001150:	e000e100 	.word	0xe000e100

08001154 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001154:	b590      	push	{r4, r7, lr}
 8001156:	b083      	sub	sp, #12
 8001158:	af00      	add	r7, sp, #0
 800115a:	0002      	movs	r2, r0
 800115c:	6039      	str	r1, [r7, #0]
 800115e:	1dfb      	adds	r3, r7, #7
 8001160:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001162:	1dfb      	adds	r3, r7, #7
 8001164:	781b      	ldrb	r3, [r3, #0]
 8001166:	2b7f      	cmp	r3, #127	@ 0x7f
 8001168:	d828      	bhi.n	80011bc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800116a:	4a2f      	ldr	r2, [pc, #188]	@ (8001228 <__NVIC_SetPriority+0xd4>)
 800116c:	1dfb      	adds	r3, r7, #7
 800116e:	781b      	ldrb	r3, [r3, #0]
 8001170:	b25b      	sxtb	r3, r3
 8001172:	089b      	lsrs	r3, r3, #2
 8001174:	33c0      	adds	r3, #192	@ 0xc0
 8001176:	009b      	lsls	r3, r3, #2
 8001178:	589b      	ldr	r3, [r3, r2]
 800117a:	1dfa      	adds	r2, r7, #7
 800117c:	7812      	ldrb	r2, [r2, #0]
 800117e:	0011      	movs	r1, r2
 8001180:	2203      	movs	r2, #3
 8001182:	400a      	ands	r2, r1
 8001184:	00d2      	lsls	r2, r2, #3
 8001186:	21ff      	movs	r1, #255	@ 0xff
 8001188:	4091      	lsls	r1, r2
 800118a:	000a      	movs	r2, r1
 800118c:	43d2      	mvns	r2, r2
 800118e:	401a      	ands	r2, r3
 8001190:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	019b      	lsls	r3, r3, #6
 8001196:	22ff      	movs	r2, #255	@ 0xff
 8001198:	401a      	ands	r2, r3
 800119a:	1dfb      	adds	r3, r7, #7
 800119c:	781b      	ldrb	r3, [r3, #0]
 800119e:	0018      	movs	r0, r3
 80011a0:	2303      	movs	r3, #3
 80011a2:	4003      	ands	r3, r0
 80011a4:	00db      	lsls	r3, r3, #3
 80011a6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80011a8:	481f      	ldr	r0, [pc, #124]	@ (8001228 <__NVIC_SetPriority+0xd4>)
 80011aa:	1dfb      	adds	r3, r7, #7
 80011ac:	781b      	ldrb	r3, [r3, #0]
 80011ae:	b25b      	sxtb	r3, r3
 80011b0:	089b      	lsrs	r3, r3, #2
 80011b2:	430a      	orrs	r2, r1
 80011b4:	33c0      	adds	r3, #192	@ 0xc0
 80011b6:	009b      	lsls	r3, r3, #2
 80011b8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80011ba:	e031      	b.n	8001220 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80011bc:	4a1b      	ldr	r2, [pc, #108]	@ (800122c <__NVIC_SetPriority+0xd8>)
 80011be:	1dfb      	adds	r3, r7, #7
 80011c0:	781b      	ldrb	r3, [r3, #0]
 80011c2:	0019      	movs	r1, r3
 80011c4:	230f      	movs	r3, #15
 80011c6:	400b      	ands	r3, r1
 80011c8:	3b08      	subs	r3, #8
 80011ca:	089b      	lsrs	r3, r3, #2
 80011cc:	3306      	adds	r3, #6
 80011ce:	009b      	lsls	r3, r3, #2
 80011d0:	18d3      	adds	r3, r2, r3
 80011d2:	3304      	adds	r3, #4
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	1dfa      	adds	r2, r7, #7
 80011d8:	7812      	ldrb	r2, [r2, #0]
 80011da:	0011      	movs	r1, r2
 80011dc:	2203      	movs	r2, #3
 80011de:	400a      	ands	r2, r1
 80011e0:	00d2      	lsls	r2, r2, #3
 80011e2:	21ff      	movs	r1, #255	@ 0xff
 80011e4:	4091      	lsls	r1, r2
 80011e6:	000a      	movs	r2, r1
 80011e8:	43d2      	mvns	r2, r2
 80011ea:	401a      	ands	r2, r3
 80011ec:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	019b      	lsls	r3, r3, #6
 80011f2:	22ff      	movs	r2, #255	@ 0xff
 80011f4:	401a      	ands	r2, r3
 80011f6:	1dfb      	adds	r3, r7, #7
 80011f8:	781b      	ldrb	r3, [r3, #0]
 80011fa:	0018      	movs	r0, r3
 80011fc:	2303      	movs	r3, #3
 80011fe:	4003      	ands	r3, r0
 8001200:	00db      	lsls	r3, r3, #3
 8001202:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001204:	4809      	ldr	r0, [pc, #36]	@ (800122c <__NVIC_SetPriority+0xd8>)
 8001206:	1dfb      	adds	r3, r7, #7
 8001208:	781b      	ldrb	r3, [r3, #0]
 800120a:	001c      	movs	r4, r3
 800120c:	230f      	movs	r3, #15
 800120e:	4023      	ands	r3, r4
 8001210:	3b08      	subs	r3, #8
 8001212:	089b      	lsrs	r3, r3, #2
 8001214:	430a      	orrs	r2, r1
 8001216:	3306      	adds	r3, #6
 8001218:	009b      	lsls	r3, r3, #2
 800121a:	18c3      	adds	r3, r0, r3
 800121c:	3304      	adds	r3, #4
 800121e:	601a      	str	r2, [r3, #0]
}
 8001220:	46c0      	nop			@ (mov r8, r8)
 8001222:	46bd      	mov	sp, r7
 8001224:	b003      	add	sp, #12
 8001226:	bd90      	pop	{r4, r7, pc}
 8001228:	e000e100 	.word	0xe000e100
 800122c:	e000ed00 	.word	0xe000ed00

08001230 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b082      	sub	sp, #8
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	1e5a      	subs	r2, r3, #1
 800123c:	2380      	movs	r3, #128	@ 0x80
 800123e:	045b      	lsls	r3, r3, #17
 8001240:	429a      	cmp	r2, r3
 8001242:	d301      	bcc.n	8001248 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001244:	2301      	movs	r3, #1
 8001246:	e010      	b.n	800126a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001248:	4b0a      	ldr	r3, [pc, #40]	@ (8001274 <SysTick_Config+0x44>)
 800124a:	687a      	ldr	r2, [r7, #4]
 800124c:	3a01      	subs	r2, #1
 800124e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001250:	2301      	movs	r3, #1
 8001252:	425b      	negs	r3, r3
 8001254:	2103      	movs	r1, #3
 8001256:	0018      	movs	r0, r3
 8001258:	f7ff ff7c 	bl	8001154 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800125c:	4b05      	ldr	r3, [pc, #20]	@ (8001274 <SysTick_Config+0x44>)
 800125e:	2200      	movs	r2, #0
 8001260:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001262:	4b04      	ldr	r3, [pc, #16]	@ (8001274 <SysTick_Config+0x44>)
 8001264:	2207      	movs	r2, #7
 8001266:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001268:	2300      	movs	r3, #0
}
 800126a:	0018      	movs	r0, r3
 800126c:	46bd      	mov	sp, r7
 800126e:	b002      	add	sp, #8
 8001270:	bd80      	pop	{r7, pc}
 8001272:	46c0      	nop			@ (mov r8, r8)
 8001274:	e000e010 	.word	0xe000e010

08001278 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b084      	sub	sp, #16
 800127c:	af00      	add	r7, sp, #0
 800127e:	60b9      	str	r1, [r7, #8]
 8001280:	607a      	str	r2, [r7, #4]
 8001282:	210f      	movs	r1, #15
 8001284:	187b      	adds	r3, r7, r1
 8001286:	1c02      	adds	r2, r0, #0
 8001288:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800128a:	68ba      	ldr	r2, [r7, #8]
 800128c:	187b      	adds	r3, r7, r1
 800128e:	781b      	ldrb	r3, [r3, #0]
 8001290:	b25b      	sxtb	r3, r3
 8001292:	0011      	movs	r1, r2
 8001294:	0018      	movs	r0, r3
 8001296:	f7ff ff5d 	bl	8001154 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 800129a:	46c0      	nop			@ (mov r8, r8)
 800129c:	46bd      	mov	sp, r7
 800129e:	b004      	add	sp, #16
 80012a0:	bd80      	pop	{r7, pc}

080012a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012a2:	b580      	push	{r7, lr}
 80012a4:	b082      	sub	sp, #8
 80012a6:	af00      	add	r7, sp, #0
 80012a8:	0002      	movs	r2, r0
 80012aa:	1dfb      	adds	r3, r7, #7
 80012ac:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012ae:	1dfb      	adds	r3, r7, #7
 80012b0:	781b      	ldrb	r3, [r3, #0]
 80012b2:	b25b      	sxtb	r3, r3
 80012b4:	0018      	movs	r0, r3
 80012b6:	f7ff ff33 	bl	8001120 <__NVIC_EnableIRQ>
}
 80012ba:	46c0      	nop			@ (mov r8, r8)
 80012bc:	46bd      	mov	sp, r7
 80012be:	b002      	add	sp, #8
 80012c0:	bd80      	pop	{r7, pc}

080012c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012c2:	b580      	push	{r7, lr}
 80012c4:	b082      	sub	sp, #8
 80012c6:	af00      	add	r7, sp, #0
 80012c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	0018      	movs	r0, r3
 80012ce:	f7ff ffaf 	bl	8001230 <SysTick_Config>
 80012d2:	0003      	movs	r3, r0
}
 80012d4:	0018      	movs	r0, r3
 80012d6:	46bd      	mov	sp, r7
 80012d8:	b002      	add	sp, #8
 80012da:	bd80      	pop	{r7, pc}

080012dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b086      	sub	sp, #24
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
 80012e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80012e6:	2300      	movs	r3, #0
 80012e8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012ea:	e14f      	b.n	800158c <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	2101      	movs	r1, #1
 80012f2:	697a      	ldr	r2, [r7, #20]
 80012f4:	4091      	lsls	r1, r2
 80012f6:	000a      	movs	r2, r1
 80012f8:	4013      	ands	r3, r2
 80012fa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d100      	bne.n	8001304 <HAL_GPIO_Init+0x28>
 8001302:	e140      	b.n	8001586 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	2203      	movs	r2, #3
 800130a:	4013      	ands	r3, r2
 800130c:	2b01      	cmp	r3, #1
 800130e:	d005      	beq.n	800131c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	2203      	movs	r2, #3
 8001316:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001318:	2b02      	cmp	r3, #2
 800131a:	d130      	bne.n	800137e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	689b      	ldr	r3, [r3, #8]
 8001320:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001322:	697b      	ldr	r3, [r7, #20]
 8001324:	005b      	lsls	r3, r3, #1
 8001326:	2203      	movs	r2, #3
 8001328:	409a      	lsls	r2, r3
 800132a:	0013      	movs	r3, r2
 800132c:	43da      	mvns	r2, r3
 800132e:	693b      	ldr	r3, [r7, #16]
 8001330:	4013      	ands	r3, r2
 8001332:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	68da      	ldr	r2, [r3, #12]
 8001338:	697b      	ldr	r3, [r7, #20]
 800133a:	005b      	lsls	r3, r3, #1
 800133c:	409a      	lsls	r2, r3
 800133e:	0013      	movs	r3, r2
 8001340:	693a      	ldr	r2, [r7, #16]
 8001342:	4313      	orrs	r3, r2
 8001344:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	693a      	ldr	r2, [r7, #16]
 800134a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001352:	2201      	movs	r2, #1
 8001354:	697b      	ldr	r3, [r7, #20]
 8001356:	409a      	lsls	r2, r3
 8001358:	0013      	movs	r3, r2
 800135a:	43da      	mvns	r2, r3
 800135c:	693b      	ldr	r3, [r7, #16]
 800135e:	4013      	ands	r3, r2
 8001360:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	091b      	lsrs	r3, r3, #4
 8001368:	2201      	movs	r2, #1
 800136a:	401a      	ands	r2, r3
 800136c:	697b      	ldr	r3, [r7, #20]
 800136e:	409a      	lsls	r2, r3
 8001370:	0013      	movs	r3, r2
 8001372:	693a      	ldr	r2, [r7, #16]
 8001374:	4313      	orrs	r3, r2
 8001376:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	693a      	ldr	r2, [r7, #16]
 800137c:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	685b      	ldr	r3, [r3, #4]
 8001382:	2203      	movs	r2, #3
 8001384:	4013      	ands	r3, r2
 8001386:	2b03      	cmp	r3, #3
 8001388:	d017      	beq.n	80013ba <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	68db      	ldr	r3, [r3, #12]
 800138e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001390:	697b      	ldr	r3, [r7, #20]
 8001392:	005b      	lsls	r3, r3, #1
 8001394:	2203      	movs	r2, #3
 8001396:	409a      	lsls	r2, r3
 8001398:	0013      	movs	r3, r2
 800139a:	43da      	mvns	r2, r3
 800139c:	693b      	ldr	r3, [r7, #16]
 800139e:	4013      	ands	r3, r2
 80013a0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	689a      	ldr	r2, [r3, #8]
 80013a6:	697b      	ldr	r3, [r7, #20]
 80013a8:	005b      	lsls	r3, r3, #1
 80013aa:	409a      	lsls	r2, r3
 80013ac:	0013      	movs	r3, r2
 80013ae:	693a      	ldr	r2, [r7, #16]
 80013b0:	4313      	orrs	r3, r2
 80013b2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	693a      	ldr	r2, [r7, #16]
 80013b8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	2203      	movs	r2, #3
 80013c0:	4013      	ands	r3, r2
 80013c2:	2b02      	cmp	r3, #2
 80013c4:	d123      	bne.n	800140e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80013c6:	697b      	ldr	r3, [r7, #20]
 80013c8:	08da      	lsrs	r2, r3, #3
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	3208      	adds	r2, #8
 80013ce:	0092      	lsls	r2, r2, #2
 80013d0:	58d3      	ldr	r3, [r2, r3]
 80013d2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80013d4:	697b      	ldr	r3, [r7, #20]
 80013d6:	2207      	movs	r2, #7
 80013d8:	4013      	ands	r3, r2
 80013da:	009b      	lsls	r3, r3, #2
 80013dc:	220f      	movs	r2, #15
 80013de:	409a      	lsls	r2, r3
 80013e0:	0013      	movs	r3, r2
 80013e2:	43da      	mvns	r2, r3
 80013e4:	693b      	ldr	r3, [r7, #16]
 80013e6:	4013      	ands	r3, r2
 80013e8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	691a      	ldr	r2, [r3, #16]
 80013ee:	697b      	ldr	r3, [r7, #20]
 80013f0:	2107      	movs	r1, #7
 80013f2:	400b      	ands	r3, r1
 80013f4:	009b      	lsls	r3, r3, #2
 80013f6:	409a      	lsls	r2, r3
 80013f8:	0013      	movs	r3, r2
 80013fa:	693a      	ldr	r2, [r7, #16]
 80013fc:	4313      	orrs	r3, r2
 80013fe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001400:	697b      	ldr	r3, [r7, #20]
 8001402:	08da      	lsrs	r2, r3, #3
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	3208      	adds	r2, #8
 8001408:	0092      	lsls	r2, r2, #2
 800140a:	6939      	ldr	r1, [r7, #16]
 800140c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001414:	697b      	ldr	r3, [r7, #20]
 8001416:	005b      	lsls	r3, r3, #1
 8001418:	2203      	movs	r2, #3
 800141a:	409a      	lsls	r2, r3
 800141c:	0013      	movs	r3, r2
 800141e:	43da      	mvns	r2, r3
 8001420:	693b      	ldr	r3, [r7, #16]
 8001422:	4013      	ands	r3, r2
 8001424:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	685b      	ldr	r3, [r3, #4]
 800142a:	2203      	movs	r2, #3
 800142c:	401a      	ands	r2, r3
 800142e:	697b      	ldr	r3, [r7, #20]
 8001430:	005b      	lsls	r3, r3, #1
 8001432:	409a      	lsls	r2, r3
 8001434:	0013      	movs	r3, r2
 8001436:	693a      	ldr	r2, [r7, #16]
 8001438:	4313      	orrs	r3, r2
 800143a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	693a      	ldr	r2, [r7, #16]
 8001440:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	685a      	ldr	r2, [r3, #4]
 8001446:	23c0      	movs	r3, #192	@ 0xc0
 8001448:	029b      	lsls	r3, r3, #10
 800144a:	4013      	ands	r3, r2
 800144c:	d100      	bne.n	8001450 <HAL_GPIO_Init+0x174>
 800144e:	e09a      	b.n	8001586 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001450:	4b54      	ldr	r3, [pc, #336]	@ (80015a4 <HAL_GPIO_Init+0x2c8>)
 8001452:	699a      	ldr	r2, [r3, #24]
 8001454:	4b53      	ldr	r3, [pc, #332]	@ (80015a4 <HAL_GPIO_Init+0x2c8>)
 8001456:	2101      	movs	r1, #1
 8001458:	430a      	orrs	r2, r1
 800145a:	619a      	str	r2, [r3, #24]
 800145c:	4b51      	ldr	r3, [pc, #324]	@ (80015a4 <HAL_GPIO_Init+0x2c8>)
 800145e:	699b      	ldr	r3, [r3, #24]
 8001460:	2201      	movs	r2, #1
 8001462:	4013      	ands	r3, r2
 8001464:	60bb      	str	r3, [r7, #8]
 8001466:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001468:	4a4f      	ldr	r2, [pc, #316]	@ (80015a8 <HAL_GPIO_Init+0x2cc>)
 800146a:	697b      	ldr	r3, [r7, #20]
 800146c:	089b      	lsrs	r3, r3, #2
 800146e:	3302      	adds	r3, #2
 8001470:	009b      	lsls	r3, r3, #2
 8001472:	589b      	ldr	r3, [r3, r2]
 8001474:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001476:	697b      	ldr	r3, [r7, #20]
 8001478:	2203      	movs	r2, #3
 800147a:	4013      	ands	r3, r2
 800147c:	009b      	lsls	r3, r3, #2
 800147e:	220f      	movs	r2, #15
 8001480:	409a      	lsls	r2, r3
 8001482:	0013      	movs	r3, r2
 8001484:	43da      	mvns	r2, r3
 8001486:	693b      	ldr	r3, [r7, #16]
 8001488:	4013      	ands	r3, r2
 800148a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800148c:	687a      	ldr	r2, [r7, #4]
 800148e:	2390      	movs	r3, #144	@ 0x90
 8001490:	05db      	lsls	r3, r3, #23
 8001492:	429a      	cmp	r2, r3
 8001494:	d013      	beq.n	80014be <HAL_GPIO_Init+0x1e2>
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	4a44      	ldr	r2, [pc, #272]	@ (80015ac <HAL_GPIO_Init+0x2d0>)
 800149a:	4293      	cmp	r3, r2
 800149c:	d00d      	beq.n	80014ba <HAL_GPIO_Init+0x1de>
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	4a43      	ldr	r2, [pc, #268]	@ (80015b0 <HAL_GPIO_Init+0x2d4>)
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d007      	beq.n	80014b6 <HAL_GPIO_Init+0x1da>
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	4a42      	ldr	r2, [pc, #264]	@ (80015b4 <HAL_GPIO_Init+0x2d8>)
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d101      	bne.n	80014b2 <HAL_GPIO_Init+0x1d6>
 80014ae:	2303      	movs	r3, #3
 80014b0:	e006      	b.n	80014c0 <HAL_GPIO_Init+0x1e4>
 80014b2:	2305      	movs	r3, #5
 80014b4:	e004      	b.n	80014c0 <HAL_GPIO_Init+0x1e4>
 80014b6:	2302      	movs	r3, #2
 80014b8:	e002      	b.n	80014c0 <HAL_GPIO_Init+0x1e4>
 80014ba:	2301      	movs	r3, #1
 80014bc:	e000      	b.n	80014c0 <HAL_GPIO_Init+0x1e4>
 80014be:	2300      	movs	r3, #0
 80014c0:	697a      	ldr	r2, [r7, #20]
 80014c2:	2103      	movs	r1, #3
 80014c4:	400a      	ands	r2, r1
 80014c6:	0092      	lsls	r2, r2, #2
 80014c8:	4093      	lsls	r3, r2
 80014ca:	693a      	ldr	r2, [r7, #16]
 80014cc:	4313      	orrs	r3, r2
 80014ce:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80014d0:	4935      	ldr	r1, [pc, #212]	@ (80015a8 <HAL_GPIO_Init+0x2cc>)
 80014d2:	697b      	ldr	r3, [r7, #20]
 80014d4:	089b      	lsrs	r3, r3, #2
 80014d6:	3302      	adds	r3, #2
 80014d8:	009b      	lsls	r3, r3, #2
 80014da:	693a      	ldr	r2, [r7, #16]
 80014dc:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80014de:	4b36      	ldr	r3, [pc, #216]	@ (80015b8 <HAL_GPIO_Init+0x2dc>)
 80014e0:	689b      	ldr	r3, [r3, #8]
 80014e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	43da      	mvns	r2, r3
 80014e8:	693b      	ldr	r3, [r7, #16]
 80014ea:	4013      	ands	r3, r2
 80014ec:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	685a      	ldr	r2, [r3, #4]
 80014f2:	2380      	movs	r3, #128	@ 0x80
 80014f4:	035b      	lsls	r3, r3, #13
 80014f6:	4013      	ands	r3, r2
 80014f8:	d003      	beq.n	8001502 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 80014fa:	693a      	ldr	r2, [r7, #16]
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	4313      	orrs	r3, r2
 8001500:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001502:	4b2d      	ldr	r3, [pc, #180]	@ (80015b8 <HAL_GPIO_Init+0x2dc>)
 8001504:	693a      	ldr	r2, [r7, #16]
 8001506:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001508:	4b2b      	ldr	r3, [pc, #172]	@ (80015b8 <HAL_GPIO_Init+0x2dc>)
 800150a:	68db      	ldr	r3, [r3, #12]
 800150c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	43da      	mvns	r2, r3
 8001512:	693b      	ldr	r3, [r7, #16]
 8001514:	4013      	ands	r3, r2
 8001516:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	685a      	ldr	r2, [r3, #4]
 800151c:	2380      	movs	r3, #128	@ 0x80
 800151e:	039b      	lsls	r3, r3, #14
 8001520:	4013      	ands	r3, r2
 8001522:	d003      	beq.n	800152c <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8001524:	693a      	ldr	r2, [r7, #16]
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	4313      	orrs	r3, r2
 800152a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800152c:	4b22      	ldr	r3, [pc, #136]	@ (80015b8 <HAL_GPIO_Init+0x2dc>)
 800152e:	693a      	ldr	r2, [r7, #16]
 8001530:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8001532:	4b21      	ldr	r3, [pc, #132]	@ (80015b8 <HAL_GPIO_Init+0x2dc>)
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	43da      	mvns	r2, r3
 800153c:	693b      	ldr	r3, [r7, #16]
 800153e:	4013      	ands	r3, r2
 8001540:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	685a      	ldr	r2, [r3, #4]
 8001546:	2380      	movs	r3, #128	@ 0x80
 8001548:	029b      	lsls	r3, r3, #10
 800154a:	4013      	ands	r3, r2
 800154c:	d003      	beq.n	8001556 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 800154e:	693a      	ldr	r2, [r7, #16]
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	4313      	orrs	r3, r2
 8001554:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001556:	4b18      	ldr	r3, [pc, #96]	@ (80015b8 <HAL_GPIO_Init+0x2dc>)
 8001558:	693a      	ldr	r2, [r7, #16]
 800155a:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 800155c:	4b16      	ldr	r3, [pc, #88]	@ (80015b8 <HAL_GPIO_Init+0x2dc>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	43da      	mvns	r2, r3
 8001566:	693b      	ldr	r3, [r7, #16]
 8001568:	4013      	ands	r3, r2
 800156a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	685a      	ldr	r2, [r3, #4]
 8001570:	2380      	movs	r3, #128	@ 0x80
 8001572:	025b      	lsls	r3, r3, #9
 8001574:	4013      	ands	r3, r2
 8001576:	d003      	beq.n	8001580 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8001578:	693a      	ldr	r2, [r7, #16]
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	4313      	orrs	r3, r2
 800157e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001580:	4b0d      	ldr	r3, [pc, #52]	@ (80015b8 <HAL_GPIO_Init+0x2dc>)
 8001582:	693a      	ldr	r2, [r7, #16]
 8001584:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001586:	697b      	ldr	r3, [r7, #20]
 8001588:	3301      	adds	r3, #1
 800158a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	681a      	ldr	r2, [r3, #0]
 8001590:	697b      	ldr	r3, [r7, #20]
 8001592:	40da      	lsrs	r2, r3
 8001594:	1e13      	subs	r3, r2, #0
 8001596:	d000      	beq.n	800159a <HAL_GPIO_Init+0x2be>
 8001598:	e6a8      	b.n	80012ec <HAL_GPIO_Init+0x10>
  } 
}
 800159a:	46c0      	nop			@ (mov r8, r8)
 800159c:	46c0      	nop			@ (mov r8, r8)
 800159e:	46bd      	mov	sp, r7
 80015a0:	b006      	add	sp, #24
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	40021000 	.word	0x40021000
 80015a8:	40010000 	.word	0x40010000
 80015ac:	48000400 	.word	0x48000400
 80015b0:	48000800 	.word	0x48000800
 80015b4:	48000c00 	.word	0x48000c00
 80015b8:	40010400 	.word	0x40010400

080015bc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b084      	sub	sp, #16
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
 80015c4:	000a      	movs	r2, r1
 80015c6:	1cbb      	adds	r3, r7, #2
 80015c8:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	691b      	ldr	r3, [r3, #16]
 80015ce:	1cba      	adds	r2, r7, #2
 80015d0:	8812      	ldrh	r2, [r2, #0]
 80015d2:	4013      	ands	r3, r2
 80015d4:	d004      	beq.n	80015e0 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80015d6:	230f      	movs	r3, #15
 80015d8:	18fb      	adds	r3, r7, r3
 80015da:	2201      	movs	r2, #1
 80015dc:	701a      	strb	r2, [r3, #0]
 80015de:	e003      	b.n	80015e8 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80015e0:	230f      	movs	r3, #15
 80015e2:	18fb      	adds	r3, r7, r3
 80015e4:	2200      	movs	r2, #0
 80015e6:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80015e8:	230f      	movs	r3, #15
 80015ea:	18fb      	adds	r3, r7, r3
 80015ec:	781b      	ldrb	r3, [r3, #0]
  }
 80015ee:	0018      	movs	r0, r3
 80015f0:	46bd      	mov	sp, r7
 80015f2:	b004      	add	sp, #16
 80015f4:	bd80      	pop	{r7, pc}

080015f6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015f6:	b580      	push	{r7, lr}
 80015f8:	b082      	sub	sp, #8
 80015fa:	af00      	add	r7, sp, #0
 80015fc:	6078      	str	r0, [r7, #4]
 80015fe:	0008      	movs	r0, r1
 8001600:	0011      	movs	r1, r2
 8001602:	1cbb      	adds	r3, r7, #2
 8001604:	1c02      	adds	r2, r0, #0
 8001606:	801a      	strh	r2, [r3, #0]
 8001608:	1c7b      	adds	r3, r7, #1
 800160a:	1c0a      	adds	r2, r1, #0
 800160c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800160e:	1c7b      	adds	r3, r7, #1
 8001610:	781b      	ldrb	r3, [r3, #0]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d004      	beq.n	8001620 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001616:	1cbb      	adds	r3, r7, #2
 8001618:	881a      	ldrh	r2, [r3, #0]
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800161e:	e003      	b.n	8001628 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001620:	1cbb      	adds	r3, r7, #2
 8001622:	881a      	ldrh	r2, [r3, #0]
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001628:	46c0      	nop			@ (mov r8, r8)
 800162a:	46bd      	mov	sp, r7
 800162c:	b002      	add	sp, #8
 800162e:	bd80      	pop	{r7, pc}

08001630 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b084      	sub	sp, #16
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
 8001638:	000a      	movs	r2, r1
 800163a:	1cbb      	adds	r3, r7, #2
 800163c:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	695b      	ldr	r3, [r3, #20]
 8001642:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001644:	1cbb      	adds	r3, r7, #2
 8001646:	881b      	ldrh	r3, [r3, #0]
 8001648:	68fa      	ldr	r2, [r7, #12]
 800164a:	4013      	ands	r3, r2
 800164c:	041a      	lsls	r2, r3, #16
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	43db      	mvns	r3, r3
 8001652:	1cb9      	adds	r1, r7, #2
 8001654:	8809      	ldrh	r1, [r1, #0]
 8001656:	400b      	ands	r3, r1
 8001658:	431a      	orrs	r2, r3
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	619a      	str	r2, [r3, #24]
}
 800165e:	46c0      	nop			@ (mov r8, r8)
 8001660:	46bd      	mov	sp, r7
 8001662:	b004      	add	sp, #16
 8001664:	bd80      	pop	{r7, pc}
	...

08001668 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b082      	sub	sp, #8
 800166c:	af00      	add	r7, sp, #0
 800166e:	0002      	movs	r2, r0
 8001670:	1dbb      	adds	r3, r7, #6
 8001672:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001674:	4b09      	ldr	r3, [pc, #36]	@ (800169c <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8001676:	695b      	ldr	r3, [r3, #20]
 8001678:	1dba      	adds	r2, r7, #6
 800167a:	8812      	ldrh	r2, [r2, #0]
 800167c:	4013      	ands	r3, r2
 800167e:	d008      	beq.n	8001692 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001680:	4b06      	ldr	r3, [pc, #24]	@ (800169c <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8001682:	1dba      	adds	r2, r7, #6
 8001684:	8812      	ldrh	r2, [r2, #0]
 8001686:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001688:	1dbb      	adds	r3, r7, #6
 800168a:	881b      	ldrh	r3, [r3, #0]
 800168c:	0018      	movs	r0, r3
 800168e:	f7ff f911 	bl	80008b4 <HAL_GPIO_EXTI_Callback>
  }
}
 8001692:	46c0      	nop			@ (mov r8, r8)
 8001694:	46bd      	mov	sp, r7
 8001696:	b002      	add	sp, #8
 8001698:	bd80      	pop	{r7, pc}
 800169a:	46c0      	nop			@ (mov r8, r8)
 800169c:	40010400 	.word	0x40010400

080016a0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b088      	sub	sp, #32
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d101      	bne.n	80016b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80016ae:	2301      	movs	r3, #1
 80016b0:	e301      	b.n	8001cb6 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	2201      	movs	r2, #1
 80016b8:	4013      	ands	r3, r2
 80016ba:	d100      	bne.n	80016be <HAL_RCC_OscConfig+0x1e>
 80016bc:	e08d      	b.n	80017da <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80016be:	4bc3      	ldr	r3, [pc, #780]	@ (80019cc <HAL_RCC_OscConfig+0x32c>)
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	220c      	movs	r2, #12
 80016c4:	4013      	ands	r3, r2
 80016c6:	2b04      	cmp	r3, #4
 80016c8:	d00e      	beq.n	80016e8 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80016ca:	4bc0      	ldr	r3, [pc, #768]	@ (80019cc <HAL_RCC_OscConfig+0x32c>)
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	220c      	movs	r2, #12
 80016d0:	4013      	ands	r3, r2
 80016d2:	2b08      	cmp	r3, #8
 80016d4:	d116      	bne.n	8001704 <HAL_RCC_OscConfig+0x64>
 80016d6:	4bbd      	ldr	r3, [pc, #756]	@ (80019cc <HAL_RCC_OscConfig+0x32c>)
 80016d8:	685a      	ldr	r2, [r3, #4]
 80016da:	2380      	movs	r3, #128	@ 0x80
 80016dc:	025b      	lsls	r3, r3, #9
 80016de:	401a      	ands	r2, r3
 80016e0:	2380      	movs	r3, #128	@ 0x80
 80016e2:	025b      	lsls	r3, r3, #9
 80016e4:	429a      	cmp	r2, r3
 80016e6:	d10d      	bne.n	8001704 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016e8:	4bb8      	ldr	r3, [pc, #736]	@ (80019cc <HAL_RCC_OscConfig+0x32c>)
 80016ea:	681a      	ldr	r2, [r3, #0]
 80016ec:	2380      	movs	r3, #128	@ 0x80
 80016ee:	029b      	lsls	r3, r3, #10
 80016f0:	4013      	ands	r3, r2
 80016f2:	d100      	bne.n	80016f6 <HAL_RCC_OscConfig+0x56>
 80016f4:	e070      	b.n	80017d8 <HAL_RCC_OscConfig+0x138>
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d000      	beq.n	8001700 <HAL_RCC_OscConfig+0x60>
 80016fe:	e06b      	b.n	80017d8 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8001700:	2301      	movs	r3, #1
 8001702:	e2d8      	b.n	8001cb6 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	2b01      	cmp	r3, #1
 800170a:	d107      	bne.n	800171c <HAL_RCC_OscConfig+0x7c>
 800170c:	4baf      	ldr	r3, [pc, #700]	@ (80019cc <HAL_RCC_OscConfig+0x32c>)
 800170e:	681a      	ldr	r2, [r3, #0]
 8001710:	4bae      	ldr	r3, [pc, #696]	@ (80019cc <HAL_RCC_OscConfig+0x32c>)
 8001712:	2180      	movs	r1, #128	@ 0x80
 8001714:	0249      	lsls	r1, r1, #9
 8001716:	430a      	orrs	r2, r1
 8001718:	601a      	str	r2, [r3, #0]
 800171a:	e02f      	b.n	800177c <HAL_RCC_OscConfig+0xdc>
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d10c      	bne.n	800173e <HAL_RCC_OscConfig+0x9e>
 8001724:	4ba9      	ldr	r3, [pc, #676]	@ (80019cc <HAL_RCC_OscConfig+0x32c>)
 8001726:	681a      	ldr	r2, [r3, #0]
 8001728:	4ba8      	ldr	r3, [pc, #672]	@ (80019cc <HAL_RCC_OscConfig+0x32c>)
 800172a:	49a9      	ldr	r1, [pc, #676]	@ (80019d0 <HAL_RCC_OscConfig+0x330>)
 800172c:	400a      	ands	r2, r1
 800172e:	601a      	str	r2, [r3, #0]
 8001730:	4ba6      	ldr	r3, [pc, #664]	@ (80019cc <HAL_RCC_OscConfig+0x32c>)
 8001732:	681a      	ldr	r2, [r3, #0]
 8001734:	4ba5      	ldr	r3, [pc, #660]	@ (80019cc <HAL_RCC_OscConfig+0x32c>)
 8001736:	49a7      	ldr	r1, [pc, #668]	@ (80019d4 <HAL_RCC_OscConfig+0x334>)
 8001738:	400a      	ands	r2, r1
 800173a:	601a      	str	r2, [r3, #0]
 800173c:	e01e      	b.n	800177c <HAL_RCC_OscConfig+0xdc>
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	2b05      	cmp	r3, #5
 8001744:	d10e      	bne.n	8001764 <HAL_RCC_OscConfig+0xc4>
 8001746:	4ba1      	ldr	r3, [pc, #644]	@ (80019cc <HAL_RCC_OscConfig+0x32c>)
 8001748:	681a      	ldr	r2, [r3, #0]
 800174a:	4ba0      	ldr	r3, [pc, #640]	@ (80019cc <HAL_RCC_OscConfig+0x32c>)
 800174c:	2180      	movs	r1, #128	@ 0x80
 800174e:	02c9      	lsls	r1, r1, #11
 8001750:	430a      	orrs	r2, r1
 8001752:	601a      	str	r2, [r3, #0]
 8001754:	4b9d      	ldr	r3, [pc, #628]	@ (80019cc <HAL_RCC_OscConfig+0x32c>)
 8001756:	681a      	ldr	r2, [r3, #0]
 8001758:	4b9c      	ldr	r3, [pc, #624]	@ (80019cc <HAL_RCC_OscConfig+0x32c>)
 800175a:	2180      	movs	r1, #128	@ 0x80
 800175c:	0249      	lsls	r1, r1, #9
 800175e:	430a      	orrs	r2, r1
 8001760:	601a      	str	r2, [r3, #0]
 8001762:	e00b      	b.n	800177c <HAL_RCC_OscConfig+0xdc>
 8001764:	4b99      	ldr	r3, [pc, #612]	@ (80019cc <HAL_RCC_OscConfig+0x32c>)
 8001766:	681a      	ldr	r2, [r3, #0]
 8001768:	4b98      	ldr	r3, [pc, #608]	@ (80019cc <HAL_RCC_OscConfig+0x32c>)
 800176a:	4999      	ldr	r1, [pc, #612]	@ (80019d0 <HAL_RCC_OscConfig+0x330>)
 800176c:	400a      	ands	r2, r1
 800176e:	601a      	str	r2, [r3, #0]
 8001770:	4b96      	ldr	r3, [pc, #600]	@ (80019cc <HAL_RCC_OscConfig+0x32c>)
 8001772:	681a      	ldr	r2, [r3, #0]
 8001774:	4b95      	ldr	r3, [pc, #596]	@ (80019cc <HAL_RCC_OscConfig+0x32c>)
 8001776:	4997      	ldr	r1, [pc, #604]	@ (80019d4 <HAL_RCC_OscConfig+0x334>)
 8001778:	400a      	ands	r2, r1
 800177a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d014      	beq.n	80017ae <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001784:	f7ff fc9e 	bl	80010c4 <HAL_GetTick>
 8001788:	0003      	movs	r3, r0
 800178a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800178c:	e008      	b.n	80017a0 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800178e:	f7ff fc99 	bl	80010c4 <HAL_GetTick>
 8001792:	0002      	movs	r2, r0
 8001794:	69bb      	ldr	r3, [r7, #24]
 8001796:	1ad3      	subs	r3, r2, r3
 8001798:	2b64      	cmp	r3, #100	@ 0x64
 800179a:	d901      	bls.n	80017a0 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 800179c:	2303      	movs	r3, #3
 800179e:	e28a      	b.n	8001cb6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017a0:	4b8a      	ldr	r3, [pc, #552]	@ (80019cc <HAL_RCC_OscConfig+0x32c>)
 80017a2:	681a      	ldr	r2, [r3, #0]
 80017a4:	2380      	movs	r3, #128	@ 0x80
 80017a6:	029b      	lsls	r3, r3, #10
 80017a8:	4013      	ands	r3, r2
 80017aa:	d0f0      	beq.n	800178e <HAL_RCC_OscConfig+0xee>
 80017ac:	e015      	b.n	80017da <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017ae:	f7ff fc89 	bl	80010c4 <HAL_GetTick>
 80017b2:	0003      	movs	r3, r0
 80017b4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017b6:	e008      	b.n	80017ca <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017b8:	f7ff fc84 	bl	80010c4 <HAL_GetTick>
 80017bc:	0002      	movs	r2, r0
 80017be:	69bb      	ldr	r3, [r7, #24]
 80017c0:	1ad3      	subs	r3, r2, r3
 80017c2:	2b64      	cmp	r3, #100	@ 0x64
 80017c4:	d901      	bls.n	80017ca <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80017c6:	2303      	movs	r3, #3
 80017c8:	e275      	b.n	8001cb6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017ca:	4b80      	ldr	r3, [pc, #512]	@ (80019cc <HAL_RCC_OscConfig+0x32c>)
 80017cc:	681a      	ldr	r2, [r3, #0]
 80017ce:	2380      	movs	r3, #128	@ 0x80
 80017d0:	029b      	lsls	r3, r3, #10
 80017d2:	4013      	ands	r3, r2
 80017d4:	d1f0      	bne.n	80017b8 <HAL_RCC_OscConfig+0x118>
 80017d6:	e000      	b.n	80017da <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017d8:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	2202      	movs	r2, #2
 80017e0:	4013      	ands	r3, r2
 80017e2:	d100      	bne.n	80017e6 <HAL_RCC_OscConfig+0x146>
 80017e4:	e069      	b.n	80018ba <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80017e6:	4b79      	ldr	r3, [pc, #484]	@ (80019cc <HAL_RCC_OscConfig+0x32c>)
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	220c      	movs	r2, #12
 80017ec:	4013      	ands	r3, r2
 80017ee:	d00b      	beq.n	8001808 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80017f0:	4b76      	ldr	r3, [pc, #472]	@ (80019cc <HAL_RCC_OscConfig+0x32c>)
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	220c      	movs	r2, #12
 80017f6:	4013      	ands	r3, r2
 80017f8:	2b08      	cmp	r3, #8
 80017fa:	d11c      	bne.n	8001836 <HAL_RCC_OscConfig+0x196>
 80017fc:	4b73      	ldr	r3, [pc, #460]	@ (80019cc <HAL_RCC_OscConfig+0x32c>)
 80017fe:	685a      	ldr	r2, [r3, #4]
 8001800:	2380      	movs	r3, #128	@ 0x80
 8001802:	025b      	lsls	r3, r3, #9
 8001804:	4013      	ands	r3, r2
 8001806:	d116      	bne.n	8001836 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001808:	4b70      	ldr	r3, [pc, #448]	@ (80019cc <HAL_RCC_OscConfig+0x32c>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	2202      	movs	r2, #2
 800180e:	4013      	ands	r3, r2
 8001810:	d005      	beq.n	800181e <HAL_RCC_OscConfig+0x17e>
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	68db      	ldr	r3, [r3, #12]
 8001816:	2b01      	cmp	r3, #1
 8001818:	d001      	beq.n	800181e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800181a:	2301      	movs	r3, #1
 800181c:	e24b      	b.n	8001cb6 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800181e:	4b6b      	ldr	r3, [pc, #428]	@ (80019cc <HAL_RCC_OscConfig+0x32c>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	22f8      	movs	r2, #248	@ 0xf8
 8001824:	4393      	bics	r3, r2
 8001826:	0019      	movs	r1, r3
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	691b      	ldr	r3, [r3, #16]
 800182c:	00da      	lsls	r2, r3, #3
 800182e:	4b67      	ldr	r3, [pc, #412]	@ (80019cc <HAL_RCC_OscConfig+0x32c>)
 8001830:	430a      	orrs	r2, r1
 8001832:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001834:	e041      	b.n	80018ba <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	68db      	ldr	r3, [r3, #12]
 800183a:	2b00      	cmp	r3, #0
 800183c:	d024      	beq.n	8001888 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800183e:	4b63      	ldr	r3, [pc, #396]	@ (80019cc <HAL_RCC_OscConfig+0x32c>)
 8001840:	681a      	ldr	r2, [r3, #0]
 8001842:	4b62      	ldr	r3, [pc, #392]	@ (80019cc <HAL_RCC_OscConfig+0x32c>)
 8001844:	2101      	movs	r1, #1
 8001846:	430a      	orrs	r2, r1
 8001848:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800184a:	f7ff fc3b 	bl	80010c4 <HAL_GetTick>
 800184e:	0003      	movs	r3, r0
 8001850:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001852:	e008      	b.n	8001866 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001854:	f7ff fc36 	bl	80010c4 <HAL_GetTick>
 8001858:	0002      	movs	r2, r0
 800185a:	69bb      	ldr	r3, [r7, #24]
 800185c:	1ad3      	subs	r3, r2, r3
 800185e:	2b02      	cmp	r3, #2
 8001860:	d901      	bls.n	8001866 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8001862:	2303      	movs	r3, #3
 8001864:	e227      	b.n	8001cb6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001866:	4b59      	ldr	r3, [pc, #356]	@ (80019cc <HAL_RCC_OscConfig+0x32c>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	2202      	movs	r2, #2
 800186c:	4013      	ands	r3, r2
 800186e:	d0f1      	beq.n	8001854 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001870:	4b56      	ldr	r3, [pc, #344]	@ (80019cc <HAL_RCC_OscConfig+0x32c>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	22f8      	movs	r2, #248	@ 0xf8
 8001876:	4393      	bics	r3, r2
 8001878:	0019      	movs	r1, r3
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	691b      	ldr	r3, [r3, #16]
 800187e:	00da      	lsls	r2, r3, #3
 8001880:	4b52      	ldr	r3, [pc, #328]	@ (80019cc <HAL_RCC_OscConfig+0x32c>)
 8001882:	430a      	orrs	r2, r1
 8001884:	601a      	str	r2, [r3, #0]
 8001886:	e018      	b.n	80018ba <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001888:	4b50      	ldr	r3, [pc, #320]	@ (80019cc <HAL_RCC_OscConfig+0x32c>)
 800188a:	681a      	ldr	r2, [r3, #0]
 800188c:	4b4f      	ldr	r3, [pc, #316]	@ (80019cc <HAL_RCC_OscConfig+0x32c>)
 800188e:	2101      	movs	r1, #1
 8001890:	438a      	bics	r2, r1
 8001892:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001894:	f7ff fc16 	bl	80010c4 <HAL_GetTick>
 8001898:	0003      	movs	r3, r0
 800189a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800189c:	e008      	b.n	80018b0 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800189e:	f7ff fc11 	bl	80010c4 <HAL_GetTick>
 80018a2:	0002      	movs	r2, r0
 80018a4:	69bb      	ldr	r3, [r7, #24]
 80018a6:	1ad3      	subs	r3, r2, r3
 80018a8:	2b02      	cmp	r3, #2
 80018aa:	d901      	bls.n	80018b0 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 80018ac:	2303      	movs	r3, #3
 80018ae:	e202      	b.n	8001cb6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018b0:	4b46      	ldr	r3, [pc, #280]	@ (80019cc <HAL_RCC_OscConfig+0x32c>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	2202      	movs	r2, #2
 80018b6:	4013      	ands	r3, r2
 80018b8:	d1f1      	bne.n	800189e <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	2208      	movs	r2, #8
 80018c0:	4013      	ands	r3, r2
 80018c2:	d036      	beq.n	8001932 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	69db      	ldr	r3, [r3, #28]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d019      	beq.n	8001900 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018cc:	4b3f      	ldr	r3, [pc, #252]	@ (80019cc <HAL_RCC_OscConfig+0x32c>)
 80018ce:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80018d0:	4b3e      	ldr	r3, [pc, #248]	@ (80019cc <HAL_RCC_OscConfig+0x32c>)
 80018d2:	2101      	movs	r1, #1
 80018d4:	430a      	orrs	r2, r1
 80018d6:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018d8:	f7ff fbf4 	bl	80010c4 <HAL_GetTick>
 80018dc:	0003      	movs	r3, r0
 80018de:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018e0:	e008      	b.n	80018f4 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80018e2:	f7ff fbef 	bl	80010c4 <HAL_GetTick>
 80018e6:	0002      	movs	r2, r0
 80018e8:	69bb      	ldr	r3, [r7, #24]
 80018ea:	1ad3      	subs	r3, r2, r3
 80018ec:	2b02      	cmp	r3, #2
 80018ee:	d901      	bls.n	80018f4 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 80018f0:	2303      	movs	r3, #3
 80018f2:	e1e0      	b.n	8001cb6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018f4:	4b35      	ldr	r3, [pc, #212]	@ (80019cc <HAL_RCC_OscConfig+0x32c>)
 80018f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018f8:	2202      	movs	r2, #2
 80018fa:	4013      	ands	r3, r2
 80018fc:	d0f1      	beq.n	80018e2 <HAL_RCC_OscConfig+0x242>
 80018fe:	e018      	b.n	8001932 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001900:	4b32      	ldr	r3, [pc, #200]	@ (80019cc <HAL_RCC_OscConfig+0x32c>)
 8001902:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001904:	4b31      	ldr	r3, [pc, #196]	@ (80019cc <HAL_RCC_OscConfig+0x32c>)
 8001906:	2101      	movs	r1, #1
 8001908:	438a      	bics	r2, r1
 800190a:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800190c:	f7ff fbda 	bl	80010c4 <HAL_GetTick>
 8001910:	0003      	movs	r3, r0
 8001912:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001914:	e008      	b.n	8001928 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001916:	f7ff fbd5 	bl	80010c4 <HAL_GetTick>
 800191a:	0002      	movs	r2, r0
 800191c:	69bb      	ldr	r3, [r7, #24]
 800191e:	1ad3      	subs	r3, r2, r3
 8001920:	2b02      	cmp	r3, #2
 8001922:	d901      	bls.n	8001928 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8001924:	2303      	movs	r3, #3
 8001926:	e1c6      	b.n	8001cb6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001928:	4b28      	ldr	r3, [pc, #160]	@ (80019cc <HAL_RCC_OscConfig+0x32c>)
 800192a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800192c:	2202      	movs	r2, #2
 800192e:	4013      	ands	r3, r2
 8001930:	d1f1      	bne.n	8001916 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	2204      	movs	r2, #4
 8001938:	4013      	ands	r3, r2
 800193a:	d100      	bne.n	800193e <HAL_RCC_OscConfig+0x29e>
 800193c:	e0b4      	b.n	8001aa8 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 800193e:	201f      	movs	r0, #31
 8001940:	183b      	adds	r3, r7, r0
 8001942:	2200      	movs	r2, #0
 8001944:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001946:	4b21      	ldr	r3, [pc, #132]	@ (80019cc <HAL_RCC_OscConfig+0x32c>)
 8001948:	69da      	ldr	r2, [r3, #28]
 800194a:	2380      	movs	r3, #128	@ 0x80
 800194c:	055b      	lsls	r3, r3, #21
 800194e:	4013      	ands	r3, r2
 8001950:	d110      	bne.n	8001974 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001952:	4b1e      	ldr	r3, [pc, #120]	@ (80019cc <HAL_RCC_OscConfig+0x32c>)
 8001954:	69da      	ldr	r2, [r3, #28]
 8001956:	4b1d      	ldr	r3, [pc, #116]	@ (80019cc <HAL_RCC_OscConfig+0x32c>)
 8001958:	2180      	movs	r1, #128	@ 0x80
 800195a:	0549      	lsls	r1, r1, #21
 800195c:	430a      	orrs	r2, r1
 800195e:	61da      	str	r2, [r3, #28]
 8001960:	4b1a      	ldr	r3, [pc, #104]	@ (80019cc <HAL_RCC_OscConfig+0x32c>)
 8001962:	69da      	ldr	r2, [r3, #28]
 8001964:	2380      	movs	r3, #128	@ 0x80
 8001966:	055b      	lsls	r3, r3, #21
 8001968:	4013      	ands	r3, r2
 800196a:	60fb      	str	r3, [r7, #12]
 800196c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800196e:	183b      	adds	r3, r7, r0
 8001970:	2201      	movs	r2, #1
 8001972:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001974:	4b18      	ldr	r3, [pc, #96]	@ (80019d8 <HAL_RCC_OscConfig+0x338>)
 8001976:	681a      	ldr	r2, [r3, #0]
 8001978:	2380      	movs	r3, #128	@ 0x80
 800197a:	005b      	lsls	r3, r3, #1
 800197c:	4013      	ands	r3, r2
 800197e:	d11a      	bne.n	80019b6 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001980:	4b15      	ldr	r3, [pc, #84]	@ (80019d8 <HAL_RCC_OscConfig+0x338>)
 8001982:	681a      	ldr	r2, [r3, #0]
 8001984:	4b14      	ldr	r3, [pc, #80]	@ (80019d8 <HAL_RCC_OscConfig+0x338>)
 8001986:	2180      	movs	r1, #128	@ 0x80
 8001988:	0049      	lsls	r1, r1, #1
 800198a:	430a      	orrs	r2, r1
 800198c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800198e:	f7ff fb99 	bl	80010c4 <HAL_GetTick>
 8001992:	0003      	movs	r3, r0
 8001994:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001996:	e008      	b.n	80019aa <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001998:	f7ff fb94 	bl	80010c4 <HAL_GetTick>
 800199c:	0002      	movs	r2, r0
 800199e:	69bb      	ldr	r3, [r7, #24]
 80019a0:	1ad3      	subs	r3, r2, r3
 80019a2:	2b64      	cmp	r3, #100	@ 0x64
 80019a4:	d901      	bls.n	80019aa <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 80019a6:	2303      	movs	r3, #3
 80019a8:	e185      	b.n	8001cb6 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019aa:	4b0b      	ldr	r3, [pc, #44]	@ (80019d8 <HAL_RCC_OscConfig+0x338>)
 80019ac:	681a      	ldr	r2, [r3, #0]
 80019ae:	2380      	movs	r3, #128	@ 0x80
 80019b0:	005b      	lsls	r3, r3, #1
 80019b2:	4013      	ands	r3, r2
 80019b4:	d0f0      	beq.n	8001998 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	689b      	ldr	r3, [r3, #8]
 80019ba:	2b01      	cmp	r3, #1
 80019bc:	d10e      	bne.n	80019dc <HAL_RCC_OscConfig+0x33c>
 80019be:	4b03      	ldr	r3, [pc, #12]	@ (80019cc <HAL_RCC_OscConfig+0x32c>)
 80019c0:	6a1a      	ldr	r2, [r3, #32]
 80019c2:	4b02      	ldr	r3, [pc, #8]	@ (80019cc <HAL_RCC_OscConfig+0x32c>)
 80019c4:	2101      	movs	r1, #1
 80019c6:	430a      	orrs	r2, r1
 80019c8:	621a      	str	r2, [r3, #32]
 80019ca:	e035      	b.n	8001a38 <HAL_RCC_OscConfig+0x398>
 80019cc:	40021000 	.word	0x40021000
 80019d0:	fffeffff 	.word	0xfffeffff
 80019d4:	fffbffff 	.word	0xfffbffff
 80019d8:	40007000 	.word	0x40007000
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	689b      	ldr	r3, [r3, #8]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d10c      	bne.n	80019fe <HAL_RCC_OscConfig+0x35e>
 80019e4:	4bb6      	ldr	r3, [pc, #728]	@ (8001cc0 <HAL_RCC_OscConfig+0x620>)
 80019e6:	6a1a      	ldr	r2, [r3, #32]
 80019e8:	4bb5      	ldr	r3, [pc, #724]	@ (8001cc0 <HAL_RCC_OscConfig+0x620>)
 80019ea:	2101      	movs	r1, #1
 80019ec:	438a      	bics	r2, r1
 80019ee:	621a      	str	r2, [r3, #32]
 80019f0:	4bb3      	ldr	r3, [pc, #716]	@ (8001cc0 <HAL_RCC_OscConfig+0x620>)
 80019f2:	6a1a      	ldr	r2, [r3, #32]
 80019f4:	4bb2      	ldr	r3, [pc, #712]	@ (8001cc0 <HAL_RCC_OscConfig+0x620>)
 80019f6:	2104      	movs	r1, #4
 80019f8:	438a      	bics	r2, r1
 80019fa:	621a      	str	r2, [r3, #32]
 80019fc:	e01c      	b.n	8001a38 <HAL_RCC_OscConfig+0x398>
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	689b      	ldr	r3, [r3, #8]
 8001a02:	2b05      	cmp	r3, #5
 8001a04:	d10c      	bne.n	8001a20 <HAL_RCC_OscConfig+0x380>
 8001a06:	4bae      	ldr	r3, [pc, #696]	@ (8001cc0 <HAL_RCC_OscConfig+0x620>)
 8001a08:	6a1a      	ldr	r2, [r3, #32]
 8001a0a:	4bad      	ldr	r3, [pc, #692]	@ (8001cc0 <HAL_RCC_OscConfig+0x620>)
 8001a0c:	2104      	movs	r1, #4
 8001a0e:	430a      	orrs	r2, r1
 8001a10:	621a      	str	r2, [r3, #32]
 8001a12:	4bab      	ldr	r3, [pc, #684]	@ (8001cc0 <HAL_RCC_OscConfig+0x620>)
 8001a14:	6a1a      	ldr	r2, [r3, #32]
 8001a16:	4baa      	ldr	r3, [pc, #680]	@ (8001cc0 <HAL_RCC_OscConfig+0x620>)
 8001a18:	2101      	movs	r1, #1
 8001a1a:	430a      	orrs	r2, r1
 8001a1c:	621a      	str	r2, [r3, #32]
 8001a1e:	e00b      	b.n	8001a38 <HAL_RCC_OscConfig+0x398>
 8001a20:	4ba7      	ldr	r3, [pc, #668]	@ (8001cc0 <HAL_RCC_OscConfig+0x620>)
 8001a22:	6a1a      	ldr	r2, [r3, #32]
 8001a24:	4ba6      	ldr	r3, [pc, #664]	@ (8001cc0 <HAL_RCC_OscConfig+0x620>)
 8001a26:	2101      	movs	r1, #1
 8001a28:	438a      	bics	r2, r1
 8001a2a:	621a      	str	r2, [r3, #32]
 8001a2c:	4ba4      	ldr	r3, [pc, #656]	@ (8001cc0 <HAL_RCC_OscConfig+0x620>)
 8001a2e:	6a1a      	ldr	r2, [r3, #32]
 8001a30:	4ba3      	ldr	r3, [pc, #652]	@ (8001cc0 <HAL_RCC_OscConfig+0x620>)
 8001a32:	2104      	movs	r1, #4
 8001a34:	438a      	bics	r2, r1
 8001a36:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	689b      	ldr	r3, [r3, #8]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d014      	beq.n	8001a6a <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a40:	f7ff fb40 	bl	80010c4 <HAL_GetTick>
 8001a44:	0003      	movs	r3, r0
 8001a46:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a48:	e009      	b.n	8001a5e <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a4a:	f7ff fb3b 	bl	80010c4 <HAL_GetTick>
 8001a4e:	0002      	movs	r2, r0
 8001a50:	69bb      	ldr	r3, [r7, #24]
 8001a52:	1ad3      	subs	r3, r2, r3
 8001a54:	4a9b      	ldr	r2, [pc, #620]	@ (8001cc4 <HAL_RCC_OscConfig+0x624>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d901      	bls.n	8001a5e <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8001a5a:	2303      	movs	r3, #3
 8001a5c:	e12b      	b.n	8001cb6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a5e:	4b98      	ldr	r3, [pc, #608]	@ (8001cc0 <HAL_RCC_OscConfig+0x620>)
 8001a60:	6a1b      	ldr	r3, [r3, #32]
 8001a62:	2202      	movs	r2, #2
 8001a64:	4013      	ands	r3, r2
 8001a66:	d0f0      	beq.n	8001a4a <HAL_RCC_OscConfig+0x3aa>
 8001a68:	e013      	b.n	8001a92 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a6a:	f7ff fb2b 	bl	80010c4 <HAL_GetTick>
 8001a6e:	0003      	movs	r3, r0
 8001a70:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a72:	e009      	b.n	8001a88 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a74:	f7ff fb26 	bl	80010c4 <HAL_GetTick>
 8001a78:	0002      	movs	r2, r0
 8001a7a:	69bb      	ldr	r3, [r7, #24]
 8001a7c:	1ad3      	subs	r3, r2, r3
 8001a7e:	4a91      	ldr	r2, [pc, #580]	@ (8001cc4 <HAL_RCC_OscConfig+0x624>)
 8001a80:	4293      	cmp	r3, r2
 8001a82:	d901      	bls.n	8001a88 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8001a84:	2303      	movs	r3, #3
 8001a86:	e116      	b.n	8001cb6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a88:	4b8d      	ldr	r3, [pc, #564]	@ (8001cc0 <HAL_RCC_OscConfig+0x620>)
 8001a8a:	6a1b      	ldr	r3, [r3, #32]
 8001a8c:	2202      	movs	r2, #2
 8001a8e:	4013      	ands	r3, r2
 8001a90:	d1f0      	bne.n	8001a74 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001a92:	231f      	movs	r3, #31
 8001a94:	18fb      	adds	r3, r7, r3
 8001a96:	781b      	ldrb	r3, [r3, #0]
 8001a98:	2b01      	cmp	r3, #1
 8001a9a:	d105      	bne.n	8001aa8 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a9c:	4b88      	ldr	r3, [pc, #544]	@ (8001cc0 <HAL_RCC_OscConfig+0x620>)
 8001a9e:	69da      	ldr	r2, [r3, #28]
 8001aa0:	4b87      	ldr	r3, [pc, #540]	@ (8001cc0 <HAL_RCC_OscConfig+0x620>)
 8001aa2:	4989      	ldr	r1, [pc, #548]	@ (8001cc8 <HAL_RCC_OscConfig+0x628>)
 8001aa4:	400a      	ands	r2, r1
 8001aa6:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	2210      	movs	r2, #16
 8001aae:	4013      	ands	r3, r2
 8001ab0:	d063      	beq.n	8001b7a <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	695b      	ldr	r3, [r3, #20]
 8001ab6:	2b01      	cmp	r3, #1
 8001ab8:	d12a      	bne.n	8001b10 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001aba:	4b81      	ldr	r3, [pc, #516]	@ (8001cc0 <HAL_RCC_OscConfig+0x620>)
 8001abc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001abe:	4b80      	ldr	r3, [pc, #512]	@ (8001cc0 <HAL_RCC_OscConfig+0x620>)
 8001ac0:	2104      	movs	r1, #4
 8001ac2:	430a      	orrs	r2, r1
 8001ac4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001ac6:	4b7e      	ldr	r3, [pc, #504]	@ (8001cc0 <HAL_RCC_OscConfig+0x620>)
 8001ac8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001aca:	4b7d      	ldr	r3, [pc, #500]	@ (8001cc0 <HAL_RCC_OscConfig+0x620>)
 8001acc:	2101      	movs	r1, #1
 8001ace:	430a      	orrs	r2, r1
 8001ad0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ad2:	f7ff faf7 	bl	80010c4 <HAL_GetTick>
 8001ad6:	0003      	movs	r3, r0
 8001ad8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001ada:	e008      	b.n	8001aee <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001adc:	f7ff faf2 	bl	80010c4 <HAL_GetTick>
 8001ae0:	0002      	movs	r2, r0
 8001ae2:	69bb      	ldr	r3, [r7, #24]
 8001ae4:	1ad3      	subs	r3, r2, r3
 8001ae6:	2b02      	cmp	r3, #2
 8001ae8:	d901      	bls.n	8001aee <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8001aea:	2303      	movs	r3, #3
 8001aec:	e0e3      	b.n	8001cb6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001aee:	4b74      	ldr	r3, [pc, #464]	@ (8001cc0 <HAL_RCC_OscConfig+0x620>)
 8001af0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001af2:	2202      	movs	r2, #2
 8001af4:	4013      	ands	r3, r2
 8001af6:	d0f1      	beq.n	8001adc <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001af8:	4b71      	ldr	r3, [pc, #452]	@ (8001cc0 <HAL_RCC_OscConfig+0x620>)
 8001afa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001afc:	22f8      	movs	r2, #248	@ 0xf8
 8001afe:	4393      	bics	r3, r2
 8001b00:	0019      	movs	r1, r3
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	699b      	ldr	r3, [r3, #24]
 8001b06:	00da      	lsls	r2, r3, #3
 8001b08:	4b6d      	ldr	r3, [pc, #436]	@ (8001cc0 <HAL_RCC_OscConfig+0x620>)
 8001b0a:	430a      	orrs	r2, r1
 8001b0c:	635a      	str	r2, [r3, #52]	@ 0x34
 8001b0e:	e034      	b.n	8001b7a <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	695b      	ldr	r3, [r3, #20]
 8001b14:	3305      	adds	r3, #5
 8001b16:	d111      	bne.n	8001b3c <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001b18:	4b69      	ldr	r3, [pc, #420]	@ (8001cc0 <HAL_RCC_OscConfig+0x620>)
 8001b1a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001b1c:	4b68      	ldr	r3, [pc, #416]	@ (8001cc0 <HAL_RCC_OscConfig+0x620>)
 8001b1e:	2104      	movs	r1, #4
 8001b20:	438a      	bics	r2, r1
 8001b22:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001b24:	4b66      	ldr	r3, [pc, #408]	@ (8001cc0 <HAL_RCC_OscConfig+0x620>)
 8001b26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b28:	22f8      	movs	r2, #248	@ 0xf8
 8001b2a:	4393      	bics	r3, r2
 8001b2c:	0019      	movs	r1, r3
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	699b      	ldr	r3, [r3, #24]
 8001b32:	00da      	lsls	r2, r3, #3
 8001b34:	4b62      	ldr	r3, [pc, #392]	@ (8001cc0 <HAL_RCC_OscConfig+0x620>)
 8001b36:	430a      	orrs	r2, r1
 8001b38:	635a      	str	r2, [r3, #52]	@ 0x34
 8001b3a:	e01e      	b.n	8001b7a <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001b3c:	4b60      	ldr	r3, [pc, #384]	@ (8001cc0 <HAL_RCC_OscConfig+0x620>)
 8001b3e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001b40:	4b5f      	ldr	r3, [pc, #380]	@ (8001cc0 <HAL_RCC_OscConfig+0x620>)
 8001b42:	2104      	movs	r1, #4
 8001b44:	430a      	orrs	r2, r1
 8001b46:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001b48:	4b5d      	ldr	r3, [pc, #372]	@ (8001cc0 <HAL_RCC_OscConfig+0x620>)
 8001b4a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001b4c:	4b5c      	ldr	r3, [pc, #368]	@ (8001cc0 <HAL_RCC_OscConfig+0x620>)
 8001b4e:	2101      	movs	r1, #1
 8001b50:	438a      	bics	r2, r1
 8001b52:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b54:	f7ff fab6 	bl	80010c4 <HAL_GetTick>
 8001b58:	0003      	movs	r3, r0
 8001b5a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001b5c:	e008      	b.n	8001b70 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001b5e:	f7ff fab1 	bl	80010c4 <HAL_GetTick>
 8001b62:	0002      	movs	r2, r0
 8001b64:	69bb      	ldr	r3, [r7, #24]
 8001b66:	1ad3      	subs	r3, r2, r3
 8001b68:	2b02      	cmp	r3, #2
 8001b6a:	d901      	bls.n	8001b70 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8001b6c:	2303      	movs	r3, #3
 8001b6e:	e0a2      	b.n	8001cb6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001b70:	4b53      	ldr	r3, [pc, #332]	@ (8001cc0 <HAL_RCC_OscConfig+0x620>)
 8001b72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b74:	2202      	movs	r2, #2
 8001b76:	4013      	ands	r3, r2
 8001b78:	d1f1      	bne.n	8001b5e <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6a1b      	ldr	r3, [r3, #32]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d100      	bne.n	8001b84 <HAL_RCC_OscConfig+0x4e4>
 8001b82:	e097      	b.n	8001cb4 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b84:	4b4e      	ldr	r3, [pc, #312]	@ (8001cc0 <HAL_RCC_OscConfig+0x620>)
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	220c      	movs	r2, #12
 8001b8a:	4013      	ands	r3, r2
 8001b8c:	2b08      	cmp	r3, #8
 8001b8e:	d100      	bne.n	8001b92 <HAL_RCC_OscConfig+0x4f2>
 8001b90:	e06b      	b.n	8001c6a <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6a1b      	ldr	r3, [r3, #32]
 8001b96:	2b02      	cmp	r3, #2
 8001b98:	d14c      	bne.n	8001c34 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b9a:	4b49      	ldr	r3, [pc, #292]	@ (8001cc0 <HAL_RCC_OscConfig+0x620>)
 8001b9c:	681a      	ldr	r2, [r3, #0]
 8001b9e:	4b48      	ldr	r3, [pc, #288]	@ (8001cc0 <HAL_RCC_OscConfig+0x620>)
 8001ba0:	494a      	ldr	r1, [pc, #296]	@ (8001ccc <HAL_RCC_OscConfig+0x62c>)
 8001ba2:	400a      	ands	r2, r1
 8001ba4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ba6:	f7ff fa8d 	bl	80010c4 <HAL_GetTick>
 8001baa:	0003      	movs	r3, r0
 8001bac:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bae:	e008      	b.n	8001bc2 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bb0:	f7ff fa88 	bl	80010c4 <HAL_GetTick>
 8001bb4:	0002      	movs	r2, r0
 8001bb6:	69bb      	ldr	r3, [r7, #24]
 8001bb8:	1ad3      	subs	r3, r2, r3
 8001bba:	2b02      	cmp	r3, #2
 8001bbc:	d901      	bls.n	8001bc2 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8001bbe:	2303      	movs	r3, #3
 8001bc0:	e079      	b.n	8001cb6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bc2:	4b3f      	ldr	r3, [pc, #252]	@ (8001cc0 <HAL_RCC_OscConfig+0x620>)
 8001bc4:	681a      	ldr	r2, [r3, #0]
 8001bc6:	2380      	movs	r3, #128	@ 0x80
 8001bc8:	049b      	lsls	r3, r3, #18
 8001bca:	4013      	ands	r3, r2
 8001bcc:	d1f0      	bne.n	8001bb0 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001bce:	4b3c      	ldr	r3, [pc, #240]	@ (8001cc0 <HAL_RCC_OscConfig+0x620>)
 8001bd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bd2:	220f      	movs	r2, #15
 8001bd4:	4393      	bics	r3, r2
 8001bd6:	0019      	movs	r1, r3
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001bdc:	4b38      	ldr	r3, [pc, #224]	@ (8001cc0 <HAL_RCC_OscConfig+0x620>)
 8001bde:	430a      	orrs	r2, r1
 8001be0:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001be2:	4b37      	ldr	r3, [pc, #220]	@ (8001cc0 <HAL_RCC_OscConfig+0x620>)
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	4a3a      	ldr	r2, [pc, #232]	@ (8001cd0 <HAL_RCC_OscConfig+0x630>)
 8001be8:	4013      	ands	r3, r2
 8001bea:	0019      	movs	r1, r3
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bf4:	431a      	orrs	r2, r3
 8001bf6:	4b32      	ldr	r3, [pc, #200]	@ (8001cc0 <HAL_RCC_OscConfig+0x620>)
 8001bf8:	430a      	orrs	r2, r1
 8001bfa:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001bfc:	4b30      	ldr	r3, [pc, #192]	@ (8001cc0 <HAL_RCC_OscConfig+0x620>)
 8001bfe:	681a      	ldr	r2, [r3, #0]
 8001c00:	4b2f      	ldr	r3, [pc, #188]	@ (8001cc0 <HAL_RCC_OscConfig+0x620>)
 8001c02:	2180      	movs	r1, #128	@ 0x80
 8001c04:	0449      	lsls	r1, r1, #17
 8001c06:	430a      	orrs	r2, r1
 8001c08:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c0a:	f7ff fa5b 	bl	80010c4 <HAL_GetTick>
 8001c0e:	0003      	movs	r3, r0
 8001c10:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c12:	e008      	b.n	8001c26 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c14:	f7ff fa56 	bl	80010c4 <HAL_GetTick>
 8001c18:	0002      	movs	r2, r0
 8001c1a:	69bb      	ldr	r3, [r7, #24]
 8001c1c:	1ad3      	subs	r3, r2, r3
 8001c1e:	2b02      	cmp	r3, #2
 8001c20:	d901      	bls.n	8001c26 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8001c22:	2303      	movs	r3, #3
 8001c24:	e047      	b.n	8001cb6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c26:	4b26      	ldr	r3, [pc, #152]	@ (8001cc0 <HAL_RCC_OscConfig+0x620>)
 8001c28:	681a      	ldr	r2, [r3, #0]
 8001c2a:	2380      	movs	r3, #128	@ 0x80
 8001c2c:	049b      	lsls	r3, r3, #18
 8001c2e:	4013      	ands	r3, r2
 8001c30:	d0f0      	beq.n	8001c14 <HAL_RCC_OscConfig+0x574>
 8001c32:	e03f      	b.n	8001cb4 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c34:	4b22      	ldr	r3, [pc, #136]	@ (8001cc0 <HAL_RCC_OscConfig+0x620>)
 8001c36:	681a      	ldr	r2, [r3, #0]
 8001c38:	4b21      	ldr	r3, [pc, #132]	@ (8001cc0 <HAL_RCC_OscConfig+0x620>)
 8001c3a:	4924      	ldr	r1, [pc, #144]	@ (8001ccc <HAL_RCC_OscConfig+0x62c>)
 8001c3c:	400a      	ands	r2, r1
 8001c3e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c40:	f7ff fa40 	bl	80010c4 <HAL_GetTick>
 8001c44:	0003      	movs	r3, r0
 8001c46:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c48:	e008      	b.n	8001c5c <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c4a:	f7ff fa3b 	bl	80010c4 <HAL_GetTick>
 8001c4e:	0002      	movs	r2, r0
 8001c50:	69bb      	ldr	r3, [r7, #24]
 8001c52:	1ad3      	subs	r3, r2, r3
 8001c54:	2b02      	cmp	r3, #2
 8001c56:	d901      	bls.n	8001c5c <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8001c58:	2303      	movs	r3, #3
 8001c5a:	e02c      	b.n	8001cb6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c5c:	4b18      	ldr	r3, [pc, #96]	@ (8001cc0 <HAL_RCC_OscConfig+0x620>)
 8001c5e:	681a      	ldr	r2, [r3, #0]
 8001c60:	2380      	movs	r3, #128	@ 0x80
 8001c62:	049b      	lsls	r3, r3, #18
 8001c64:	4013      	ands	r3, r2
 8001c66:	d1f0      	bne.n	8001c4a <HAL_RCC_OscConfig+0x5aa>
 8001c68:	e024      	b.n	8001cb4 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6a1b      	ldr	r3, [r3, #32]
 8001c6e:	2b01      	cmp	r3, #1
 8001c70:	d101      	bne.n	8001c76 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8001c72:	2301      	movs	r3, #1
 8001c74:	e01f      	b.n	8001cb6 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001c76:	4b12      	ldr	r3, [pc, #72]	@ (8001cc0 <HAL_RCC_OscConfig+0x620>)
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001c7c:	4b10      	ldr	r3, [pc, #64]	@ (8001cc0 <HAL_RCC_OscConfig+0x620>)
 8001c7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c80:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c82:	697a      	ldr	r2, [r7, #20]
 8001c84:	2380      	movs	r3, #128	@ 0x80
 8001c86:	025b      	lsls	r3, r3, #9
 8001c88:	401a      	ands	r2, r3
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c8e:	429a      	cmp	r2, r3
 8001c90:	d10e      	bne.n	8001cb0 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001c92:	693b      	ldr	r3, [r7, #16]
 8001c94:	220f      	movs	r2, #15
 8001c96:	401a      	ands	r2, r3
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c9c:	429a      	cmp	r2, r3
 8001c9e:	d107      	bne.n	8001cb0 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001ca0:	697a      	ldr	r2, [r7, #20]
 8001ca2:	23f0      	movs	r3, #240	@ 0xf0
 8001ca4:	039b      	lsls	r3, r3, #14
 8001ca6:	401a      	ands	r2, r3
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001cac:	429a      	cmp	r2, r3
 8001cae:	d001      	beq.n	8001cb4 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	e000      	b.n	8001cb6 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8001cb4:	2300      	movs	r3, #0
}
 8001cb6:	0018      	movs	r0, r3
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	b008      	add	sp, #32
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	46c0      	nop			@ (mov r8, r8)
 8001cc0:	40021000 	.word	0x40021000
 8001cc4:	00001388 	.word	0x00001388
 8001cc8:	efffffff 	.word	0xefffffff
 8001ccc:	feffffff 	.word	0xfeffffff
 8001cd0:	ffc2ffff 	.word	0xffc2ffff

08001cd4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b084      	sub	sp, #16
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
 8001cdc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d101      	bne.n	8001ce8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	e0b3      	b.n	8001e50 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ce8:	4b5b      	ldr	r3, [pc, #364]	@ (8001e58 <HAL_RCC_ClockConfig+0x184>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	2201      	movs	r2, #1
 8001cee:	4013      	ands	r3, r2
 8001cf0:	683a      	ldr	r2, [r7, #0]
 8001cf2:	429a      	cmp	r2, r3
 8001cf4:	d911      	bls.n	8001d1a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cf6:	4b58      	ldr	r3, [pc, #352]	@ (8001e58 <HAL_RCC_ClockConfig+0x184>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	4393      	bics	r3, r2
 8001cfe:	0019      	movs	r1, r3
 8001d00:	4b55      	ldr	r3, [pc, #340]	@ (8001e58 <HAL_RCC_ClockConfig+0x184>)
 8001d02:	683a      	ldr	r2, [r7, #0]
 8001d04:	430a      	orrs	r2, r1
 8001d06:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d08:	4b53      	ldr	r3, [pc, #332]	@ (8001e58 <HAL_RCC_ClockConfig+0x184>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	2201      	movs	r2, #1
 8001d0e:	4013      	ands	r3, r2
 8001d10:	683a      	ldr	r2, [r7, #0]
 8001d12:	429a      	cmp	r2, r3
 8001d14:	d001      	beq.n	8001d1a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001d16:	2301      	movs	r3, #1
 8001d18:	e09a      	b.n	8001e50 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	2202      	movs	r2, #2
 8001d20:	4013      	ands	r3, r2
 8001d22:	d015      	beq.n	8001d50 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	2204      	movs	r2, #4
 8001d2a:	4013      	ands	r3, r2
 8001d2c:	d006      	beq.n	8001d3c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001d2e:	4b4b      	ldr	r3, [pc, #300]	@ (8001e5c <HAL_RCC_ClockConfig+0x188>)
 8001d30:	685a      	ldr	r2, [r3, #4]
 8001d32:	4b4a      	ldr	r3, [pc, #296]	@ (8001e5c <HAL_RCC_ClockConfig+0x188>)
 8001d34:	21e0      	movs	r1, #224	@ 0xe0
 8001d36:	00c9      	lsls	r1, r1, #3
 8001d38:	430a      	orrs	r2, r1
 8001d3a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d3c:	4b47      	ldr	r3, [pc, #284]	@ (8001e5c <HAL_RCC_ClockConfig+0x188>)
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	22f0      	movs	r2, #240	@ 0xf0
 8001d42:	4393      	bics	r3, r2
 8001d44:	0019      	movs	r1, r3
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	689a      	ldr	r2, [r3, #8]
 8001d4a:	4b44      	ldr	r3, [pc, #272]	@ (8001e5c <HAL_RCC_ClockConfig+0x188>)
 8001d4c:	430a      	orrs	r2, r1
 8001d4e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	2201      	movs	r2, #1
 8001d56:	4013      	ands	r3, r2
 8001d58:	d040      	beq.n	8001ddc <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	2b01      	cmp	r3, #1
 8001d60:	d107      	bne.n	8001d72 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d62:	4b3e      	ldr	r3, [pc, #248]	@ (8001e5c <HAL_RCC_ClockConfig+0x188>)
 8001d64:	681a      	ldr	r2, [r3, #0]
 8001d66:	2380      	movs	r3, #128	@ 0x80
 8001d68:	029b      	lsls	r3, r3, #10
 8001d6a:	4013      	ands	r3, r2
 8001d6c:	d114      	bne.n	8001d98 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	e06e      	b.n	8001e50 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	2b02      	cmp	r3, #2
 8001d78:	d107      	bne.n	8001d8a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d7a:	4b38      	ldr	r3, [pc, #224]	@ (8001e5c <HAL_RCC_ClockConfig+0x188>)
 8001d7c:	681a      	ldr	r2, [r3, #0]
 8001d7e:	2380      	movs	r3, #128	@ 0x80
 8001d80:	049b      	lsls	r3, r3, #18
 8001d82:	4013      	ands	r3, r2
 8001d84:	d108      	bne.n	8001d98 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001d86:	2301      	movs	r3, #1
 8001d88:	e062      	b.n	8001e50 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d8a:	4b34      	ldr	r3, [pc, #208]	@ (8001e5c <HAL_RCC_ClockConfig+0x188>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	2202      	movs	r2, #2
 8001d90:	4013      	ands	r3, r2
 8001d92:	d101      	bne.n	8001d98 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001d94:	2301      	movs	r3, #1
 8001d96:	e05b      	b.n	8001e50 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d98:	4b30      	ldr	r3, [pc, #192]	@ (8001e5c <HAL_RCC_ClockConfig+0x188>)
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	2203      	movs	r2, #3
 8001d9e:	4393      	bics	r3, r2
 8001da0:	0019      	movs	r1, r3
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	685a      	ldr	r2, [r3, #4]
 8001da6:	4b2d      	ldr	r3, [pc, #180]	@ (8001e5c <HAL_RCC_ClockConfig+0x188>)
 8001da8:	430a      	orrs	r2, r1
 8001daa:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001dac:	f7ff f98a 	bl	80010c4 <HAL_GetTick>
 8001db0:	0003      	movs	r3, r0
 8001db2:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001db4:	e009      	b.n	8001dca <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001db6:	f7ff f985 	bl	80010c4 <HAL_GetTick>
 8001dba:	0002      	movs	r2, r0
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	1ad3      	subs	r3, r2, r3
 8001dc0:	4a27      	ldr	r2, [pc, #156]	@ (8001e60 <HAL_RCC_ClockConfig+0x18c>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d901      	bls.n	8001dca <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8001dc6:	2303      	movs	r3, #3
 8001dc8:	e042      	b.n	8001e50 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dca:	4b24      	ldr	r3, [pc, #144]	@ (8001e5c <HAL_RCC_ClockConfig+0x188>)
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	220c      	movs	r2, #12
 8001dd0:	401a      	ands	r2, r3
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	009b      	lsls	r3, r3, #2
 8001dd8:	429a      	cmp	r2, r3
 8001dda:	d1ec      	bne.n	8001db6 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ddc:	4b1e      	ldr	r3, [pc, #120]	@ (8001e58 <HAL_RCC_ClockConfig+0x184>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	2201      	movs	r2, #1
 8001de2:	4013      	ands	r3, r2
 8001de4:	683a      	ldr	r2, [r7, #0]
 8001de6:	429a      	cmp	r2, r3
 8001de8:	d211      	bcs.n	8001e0e <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dea:	4b1b      	ldr	r3, [pc, #108]	@ (8001e58 <HAL_RCC_ClockConfig+0x184>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	2201      	movs	r2, #1
 8001df0:	4393      	bics	r3, r2
 8001df2:	0019      	movs	r1, r3
 8001df4:	4b18      	ldr	r3, [pc, #96]	@ (8001e58 <HAL_RCC_ClockConfig+0x184>)
 8001df6:	683a      	ldr	r2, [r7, #0]
 8001df8:	430a      	orrs	r2, r1
 8001dfa:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dfc:	4b16      	ldr	r3, [pc, #88]	@ (8001e58 <HAL_RCC_ClockConfig+0x184>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	2201      	movs	r2, #1
 8001e02:	4013      	ands	r3, r2
 8001e04:	683a      	ldr	r2, [r7, #0]
 8001e06:	429a      	cmp	r2, r3
 8001e08:	d001      	beq.n	8001e0e <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	e020      	b.n	8001e50 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	2204      	movs	r2, #4
 8001e14:	4013      	ands	r3, r2
 8001e16:	d009      	beq.n	8001e2c <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001e18:	4b10      	ldr	r3, [pc, #64]	@ (8001e5c <HAL_RCC_ClockConfig+0x188>)
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	4a11      	ldr	r2, [pc, #68]	@ (8001e64 <HAL_RCC_ClockConfig+0x190>)
 8001e1e:	4013      	ands	r3, r2
 8001e20:	0019      	movs	r1, r3
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	68da      	ldr	r2, [r3, #12]
 8001e26:	4b0d      	ldr	r3, [pc, #52]	@ (8001e5c <HAL_RCC_ClockConfig+0x188>)
 8001e28:	430a      	orrs	r2, r1
 8001e2a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001e2c:	f000 f820 	bl	8001e70 <HAL_RCC_GetSysClockFreq>
 8001e30:	0001      	movs	r1, r0
 8001e32:	4b0a      	ldr	r3, [pc, #40]	@ (8001e5c <HAL_RCC_ClockConfig+0x188>)
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	091b      	lsrs	r3, r3, #4
 8001e38:	220f      	movs	r2, #15
 8001e3a:	4013      	ands	r3, r2
 8001e3c:	4a0a      	ldr	r2, [pc, #40]	@ (8001e68 <HAL_RCC_ClockConfig+0x194>)
 8001e3e:	5cd3      	ldrb	r3, [r2, r3]
 8001e40:	000a      	movs	r2, r1
 8001e42:	40da      	lsrs	r2, r3
 8001e44:	4b09      	ldr	r3, [pc, #36]	@ (8001e6c <HAL_RCC_ClockConfig+0x198>)
 8001e46:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001e48:	2003      	movs	r0, #3
 8001e4a:	f7ff f8f5 	bl	8001038 <HAL_InitTick>
  
  return HAL_OK;
 8001e4e:	2300      	movs	r3, #0
}
 8001e50:	0018      	movs	r0, r3
 8001e52:	46bd      	mov	sp, r7
 8001e54:	b004      	add	sp, #16
 8001e56:	bd80      	pop	{r7, pc}
 8001e58:	40022000 	.word	0x40022000
 8001e5c:	40021000 	.word	0x40021000
 8001e60:	00001388 	.word	0x00001388
 8001e64:	fffff8ff 	.word	0xfffff8ff
 8001e68:	08002f98 	.word	0x08002f98
 8001e6c:	20000004 	.word	0x20000004

08001e70 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b086      	sub	sp, #24
 8001e74:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001e76:	2300      	movs	r3, #0
 8001e78:	60fb      	str	r3, [r7, #12]
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	60bb      	str	r3, [r7, #8]
 8001e7e:	2300      	movs	r3, #0
 8001e80:	617b      	str	r3, [r7, #20]
 8001e82:	2300      	movs	r3, #0
 8001e84:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001e86:	2300      	movs	r3, #0
 8001e88:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8001e8a:	4b20      	ldr	r3, [pc, #128]	@ (8001f0c <HAL_RCC_GetSysClockFreq+0x9c>)
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	220c      	movs	r2, #12
 8001e94:	4013      	ands	r3, r2
 8001e96:	2b04      	cmp	r3, #4
 8001e98:	d002      	beq.n	8001ea0 <HAL_RCC_GetSysClockFreq+0x30>
 8001e9a:	2b08      	cmp	r3, #8
 8001e9c:	d003      	beq.n	8001ea6 <HAL_RCC_GetSysClockFreq+0x36>
 8001e9e:	e02c      	b.n	8001efa <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001ea0:	4b1b      	ldr	r3, [pc, #108]	@ (8001f10 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001ea2:	613b      	str	r3, [r7, #16]
      break;
 8001ea4:	e02c      	b.n	8001f00 <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	0c9b      	lsrs	r3, r3, #18
 8001eaa:	220f      	movs	r2, #15
 8001eac:	4013      	ands	r3, r2
 8001eae:	4a19      	ldr	r2, [pc, #100]	@ (8001f14 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001eb0:	5cd3      	ldrb	r3, [r2, r3]
 8001eb2:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001eb4:	4b15      	ldr	r3, [pc, #84]	@ (8001f0c <HAL_RCC_GetSysClockFreq+0x9c>)
 8001eb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001eb8:	220f      	movs	r2, #15
 8001eba:	4013      	ands	r3, r2
 8001ebc:	4a16      	ldr	r2, [pc, #88]	@ (8001f18 <HAL_RCC_GetSysClockFreq+0xa8>)
 8001ebe:	5cd3      	ldrb	r3, [r2, r3]
 8001ec0:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001ec2:	68fa      	ldr	r2, [r7, #12]
 8001ec4:	2380      	movs	r3, #128	@ 0x80
 8001ec6:	025b      	lsls	r3, r3, #9
 8001ec8:	4013      	ands	r3, r2
 8001eca:	d009      	beq.n	8001ee0 <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001ecc:	68b9      	ldr	r1, [r7, #8]
 8001ece:	4810      	ldr	r0, [pc, #64]	@ (8001f10 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001ed0:	f7fe f91a 	bl	8000108 <__udivsi3>
 8001ed4:	0003      	movs	r3, r0
 8001ed6:	001a      	movs	r2, r3
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	4353      	muls	r3, r2
 8001edc:	617b      	str	r3, [r7, #20]
 8001ede:	e009      	b.n	8001ef4 <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001ee0:	6879      	ldr	r1, [r7, #4]
 8001ee2:	000a      	movs	r2, r1
 8001ee4:	0152      	lsls	r2, r2, #5
 8001ee6:	1a52      	subs	r2, r2, r1
 8001ee8:	0193      	lsls	r3, r2, #6
 8001eea:	1a9b      	subs	r3, r3, r2
 8001eec:	00db      	lsls	r3, r3, #3
 8001eee:	185b      	adds	r3, r3, r1
 8001ef0:	021b      	lsls	r3, r3, #8
 8001ef2:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 8001ef4:	697b      	ldr	r3, [r7, #20]
 8001ef6:	613b      	str	r3, [r7, #16]
      break;
 8001ef8:	e002      	b.n	8001f00 <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001efa:	4b05      	ldr	r3, [pc, #20]	@ (8001f10 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001efc:	613b      	str	r3, [r7, #16]
      break;
 8001efe:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001f00:	693b      	ldr	r3, [r7, #16]
}
 8001f02:	0018      	movs	r0, r3
 8001f04:	46bd      	mov	sp, r7
 8001f06:	b006      	add	sp, #24
 8001f08:	bd80      	pop	{r7, pc}
 8001f0a:	46c0      	nop			@ (mov r8, r8)
 8001f0c:	40021000 	.word	0x40021000
 8001f10:	007a1200 	.word	0x007a1200
 8001f14:	08002fa8 	.word	0x08002fa8
 8001f18:	08002fb8 	.word	0x08002fb8

08001f1c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b082      	sub	sp, #8
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d101      	bne.n	8001f2e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	e042      	b.n	8001fb4 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	223d      	movs	r2, #61	@ 0x3d
 8001f32:	5c9b      	ldrb	r3, [r3, r2]
 8001f34:	b2db      	uxtb	r3, r3
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d107      	bne.n	8001f4a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	223c      	movs	r2, #60	@ 0x3c
 8001f3e:	2100      	movs	r1, #0
 8001f40:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	0018      	movs	r0, r3
 8001f46:	f7fe ff75 	bl	8000e34 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	223d      	movs	r2, #61	@ 0x3d
 8001f4e:	2102      	movs	r1, #2
 8001f50:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681a      	ldr	r2, [r3, #0]
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	3304      	adds	r3, #4
 8001f5a:	0019      	movs	r1, r3
 8001f5c:	0010      	movs	r0, r2
 8001f5e:	f000 fc47 	bl	80027f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2246      	movs	r2, #70	@ 0x46
 8001f66:	2101      	movs	r1, #1
 8001f68:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	223e      	movs	r2, #62	@ 0x3e
 8001f6e:	2101      	movs	r1, #1
 8001f70:	5499      	strb	r1, [r3, r2]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	223f      	movs	r2, #63	@ 0x3f
 8001f76:	2101      	movs	r1, #1
 8001f78:	5499      	strb	r1, [r3, r2]
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2240      	movs	r2, #64	@ 0x40
 8001f7e:	2101      	movs	r1, #1
 8001f80:	5499      	strb	r1, [r3, r2]
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2241      	movs	r2, #65	@ 0x41
 8001f86:	2101      	movs	r1, #1
 8001f88:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2242      	movs	r2, #66	@ 0x42
 8001f8e:	2101      	movs	r1, #1
 8001f90:	5499      	strb	r1, [r3, r2]
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2243      	movs	r2, #67	@ 0x43
 8001f96:	2101      	movs	r1, #1
 8001f98:	5499      	strb	r1, [r3, r2]
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2244      	movs	r2, #68	@ 0x44
 8001f9e:	2101      	movs	r1, #1
 8001fa0:	5499      	strb	r1, [r3, r2]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2245      	movs	r2, #69	@ 0x45
 8001fa6:	2101      	movs	r1, #1
 8001fa8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	223d      	movs	r2, #61	@ 0x3d
 8001fae:	2101      	movs	r1, #1
 8001fb0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001fb2:	2300      	movs	r3, #0
}
 8001fb4:	0018      	movs	r0, r3
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	b002      	add	sp, #8
 8001fba:	bd80      	pop	{r7, pc}

08001fbc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b084      	sub	sp, #16
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	223d      	movs	r2, #61	@ 0x3d
 8001fc8:	5c9b      	ldrb	r3, [r3, r2]
 8001fca:	b2db      	uxtb	r3, r3
 8001fcc:	2b01      	cmp	r3, #1
 8001fce:	d001      	beq.n	8001fd4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	e030      	b.n	8002036 <HAL_TIM_Base_Start_IT+0x7a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	223d      	movs	r2, #61	@ 0x3d
 8001fd8:	2102      	movs	r1, #2
 8001fda:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	68da      	ldr	r2, [r3, #12]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	2101      	movs	r1, #1
 8001fe8:	430a      	orrs	r2, r1
 8001fea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4a13      	ldr	r2, [pc, #76]	@ (8002040 <HAL_TIM_Base_Start_IT+0x84>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d004      	beq.n	8002000 <HAL_TIM_Base_Start_IT+0x44>
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4a12      	ldr	r2, [pc, #72]	@ (8002044 <HAL_TIM_Base_Start_IT+0x88>)
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d111      	bne.n	8002024 <HAL_TIM_Base_Start_IT+0x68>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	689b      	ldr	r3, [r3, #8]
 8002006:	2207      	movs	r2, #7
 8002008:	4013      	ands	r3, r2
 800200a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	2b06      	cmp	r3, #6
 8002010:	d010      	beq.n	8002034 <HAL_TIM_Base_Start_IT+0x78>
    {
      __HAL_TIM_ENABLE(htim);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	681a      	ldr	r2, [r3, #0]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	2101      	movs	r1, #1
 800201e:	430a      	orrs	r2, r1
 8002020:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002022:	e007      	b.n	8002034 <HAL_TIM_Base_Start_IT+0x78>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	681a      	ldr	r2, [r3, #0]
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	2101      	movs	r1, #1
 8002030:	430a      	orrs	r2, r1
 8002032:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002034:	2300      	movs	r3, #0
}
 8002036:	0018      	movs	r0, r3
 8002038:	46bd      	mov	sp, r7
 800203a:	b004      	add	sp, #16
 800203c:	bd80      	pop	{r7, pc}
 800203e:	46c0      	nop			@ (mov r8, r8)
 8002040:	40012c00 	.word	0x40012c00
 8002044:	40000400 	.word	0x40000400

08002048 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b082      	sub	sp, #8
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	68da      	ldr	r2, [r3, #12]
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	2101      	movs	r1, #1
 800205c:	438a      	bics	r2, r1
 800205e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	6a1b      	ldr	r3, [r3, #32]
 8002066:	4a0d      	ldr	r2, [pc, #52]	@ (800209c <HAL_TIM_Base_Stop_IT+0x54>)
 8002068:	4013      	ands	r3, r2
 800206a:	d10d      	bne.n	8002088 <HAL_TIM_Base_Stop_IT+0x40>
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	6a1b      	ldr	r3, [r3, #32]
 8002072:	4a0b      	ldr	r2, [pc, #44]	@ (80020a0 <HAL_TIM_Base_Stop_IT+0x58>)
 8002074:	4013      	ands	r3, r2
 8002076:	d107      	bne.n	8002088 <HAL_TIM_Base_Stop_IT+0x40>
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	681a      	ldr	r2, [r3, #0]
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	2101      	movs	r1, #1
 8002084:	438a      	bics	r2, r1
 8002086:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	223d      	movs	r2, #61	@ 0x3d
 800208c:	2101      	movs	r1, #1
 800208e:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8002090:	2300      	movs	r3, #0
}
 8002092:	0018      	movs	r0, r3
 8002094:	46bd      	mov	sp, r7
 8002096:	b002      	add	sp, #8
 8002098:	bd80      	pop	{r7, pc}
 800209a:	46c0      	nop			@ (mov r8, r8)
 800209c:	00001111 	.word	0x00001111
 80020a0:	00000444 	.word	0x00000444

080020a4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b082      	sub	sp, #8
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d101      	bne.n	80020b6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80020b2:	2301      	movs	r3, #1
 80020b4:	e042      	b.n	800213c <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	223d      	movs	r2, #61	@ 0x3d
 80020ba:	5c9b      	ldrb	r3, [r3, r2]
 80020bc:	b2db      	uxtb	r3, r3
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d107      	bne.n	80020d2 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	223c      	movs	r2, #60	@ 0x3c
 80020c6:	2100      	movs	r1, #0
 80020c8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	0018      	movs	r0, r3
 80020ce:	f000 f839 	bl	8002144 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	223d      	movs	r2, #61	@ 0x3d
 80020d6:	2102      	movs	r1, #2
 80020d8:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681a      	ldr	r2, [r3, #0]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	3304      	adds	r3, #4
 80020e2:	0019      	movs	r1, r3
 80020e4:	0010      	movs	r0, r2
 80020e6:	f000 fb83 	bl	80027f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2246      	movs	r2, #70	@ 0x46
 80020ee:	2101      	movs	r1, #1
 80020f0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	223e      	movs	r2, #62	@ 0x3e
 80020f6:	2101      	movs	r1, #1
 80020f8:	5499      	strb	r1, [r3, r2]
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	223f      	movs	r2, #63	@ 0x3f
 80020fe:	2101      	movs	r1, #1
 8002100:	5499      	strb	r1, [r3, r2]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2240      	movs	r2, #64	@ 0x40
 8002106:	2101      	movs	r1, #1
 8002108:	5499      	strb	r1, [r3, r2]
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2241      	movs	r2, #65	@ 0x41
 800210e:	2101      	movs	r1, #1
 8002110:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2242      	movs	r2, #66	@ 0x42
 8002116:	2101      	movs	r1, #1
 8002118:	5499      	strb	r1, [r3, r2]
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2243      	movs	r2, #67	@ 0x43
 800211e:	2101      	movs	r1, #1
 8002120:	5499      	strb	r1, [r3, r2]
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2244      	movs	r2, #68	@ 0x44
 8002126:	2101      	movs	r1, #1
 8002128:	5499      	strb	r1, [r3, r2]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2245      	movs	r2, #69	@ 0x45
 800212e:	2101      	movs	r1, #1
 8002130:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	223d      	movs	r2, #61	@ 0x3d
 8002136:	2101      	movs	r1, #1
 8002138:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800213a:	2300      	movs	r3, #0
}
 800213c:	0018      	movs	r0, r3
 800213e:	46bd      	mov	sp, r7
 8002140:	b002      	add	sp, #8
 8002142:	bd80      	pop	{r7, pc}

08002144 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b082      	sub	sp, #8
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800214c:	46c0      	nop			@ (mov r8, r8)
 800214e:	46bd      	mov	sp, r7
 8002150:	b002      	add	sp, #8
 8002152:	bd80      	pop	{r7, pc}

08002154 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b084      	sub	sp, #16
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
 800215c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d108      	bne.n	8002176 <HAL_TIM_PWM_Start+0x22>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	223e      	movs	r2, #62	@ 0x3e
 8002168:	5c9b      	ldrb	r3, [r3, r2]
 800216a:	b2db      	uxtb	r3, r3
 800216c:	3b01      	subs	r3, #1
 800216e:	1e5a      	subs	r2, r3, #1
 8002170:	4193      	sbcs	r3, r2
 8002172:	b2db      	uxtb	r3, r3
 8002174:	e01f      	b.n	80021b6 <HAL_TIM_PWM_Start+0x62>
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	2b04      	cmp	r3, #4
 800217a:	d108      	bne.n	800218e <HAL_TIM_PWM_Start+0x3a>
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	223f      	movs	r2, #63	@ 0x3f
 8002180:	5c9b      	ldrb	r3, [r3, r2]
 8002182:	b2db      	uxtb	r3, r3
 8002184:	3b01      	subs	r3, #1
 8002186:	1e5a      	subs	r2, r3, #1
 8002188:	4193      	sbcs	r3, r2
 800218a:	b2db      	uxtb	r3, r3
 800218c:	e013      	b.n	80021b6 <HAL_TIM_PWM_Start+0x62>
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	2b08      	cmp	r3, #8
 8002192:	d108      	bne.n	80021a6 <HAL_TIM_PWM_Start+0x52>
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2240      	movs	r2, #64	@ 0x40
 8002198:	5c9b      	ldrb	r3, [r3, r2]
 800219a:	b2db      	uxtb	r3, r3
 800219c:	3b01      	subs	r3, #1
 800219e:	1e5a      	subs	r2, r3, #1
 80021a0:	4193      	sbcs	r3, r2
 80021a2:	b2db      	uxtb	r3, r3
 80021a4:	e007      	b.n	80021b6 <HAL_TIM_PWM_Start+0x62>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2241      	movs	r2, #65	@ 0x41
 80021aa:	5c9b      	ldrb	r3, [r3, r2]
 80021ac:	b2db      	uxtb	r3, r3
 80021ae:	3b01      	subs	r3, #1
 80021b0:	1e5a      	subs	r2, r3, #1
 80021b2:	4193      	sbcs	r3, r2
 80021b4:	b2db      	uxtb	r3, r3
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d001      	beq.n	80021be <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 80021ba:	2301      	movs	r3, #1
 80021bc:	e064      	b.n	8002288 <HAL_TIM_PWM_Start+0x134>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d104      	bne.n	80021ce <HAL_TIM_PWM_Start+0x7a>
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	223e      	movs	r2, #62	@ 0x3e
 80021c8:	2102      	movs	r1, #2
 80021ca:	5499      	strb	r1, [r3, r2]
 80021cc:	e013      	b.n	80021f6 <HAL_TIM_PWM_Start+0xa2>
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	2b04      	cmp	r3, #4
 80021d2:	d104      	bne.n	80021de <HAL_TIM_PWM_Start+0x8a>
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	223f      	movs	r2, #63	@ 0x3f
 80021d8:	2102      	movs	r1, #2
 80021da:	5499      	strb	r1, [r3, r2]
 80021dc:	e00b      	b.n	80021f6 <HAL_TIM_PWM_Start+0xa2>
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	2b08      	cmp	r3, #8
 80021e2:	d104      	bne.n	80021ee <HAL_TIM_PWM_Start+0x9a>
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2240      	movs	r2, #64	@ 0x40
 80021e8:	2102      	movs	r1, #2
 80021ea:	5499      	strb	r1, [r3, r2]
 80021ec:	e003      	b.n	80021f6 <HAL_TIM_PWM_Start+0xa2>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2241      	movs	r2, #65	@ 0x41
 80021f2:	2102      	movs	r1, #2
 80021f4:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	6839      	ldr	r1, [r7, #0]
 80021fc:	2201      	movs	r2, #1
 80021fe:	0018      	movs	r0, r3
 8002200:	f000 fdea 	bl	8002dd8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4a21      	ldr	r2, [pc, #132]	@ (8002290 <HAL_TIM_PWM_Start+0x13c>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d009      	beq.n	8002222 <HAL_TIM_PWM_Start+0xce>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4a20      	ldr	r2, [pc, #128]	@ (8002294 <HAL_TIM_PWM_Start+0x140>)
 8002214:	4293      	cmp	r3, r2
 8002216:	d004      	beq.n	8002222 <HAL_TIM_PWM_Start+0xce>
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4a1e      	ldr	r2, [pc, #120]	@ (8002298 <HAL_TIM_PWM_Start+0x144>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d101      	bne.n	8002226 <HAL_TIM_PWM_Start+0xd2>
 8002222:	2301      	movs	r3, #1
 8002224:	e000      	b.n	8002228 <HAL_TIM_PWM_Start+0xd4>
 8002226:	2300      	movs	r3, #0
 8002228:	2b00      	cmp	r3, #0
 800222a:	d008      	beq.n	800223e <HAL_TIM_PWM_Start+0xea>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	2180      	movs	r1, #128	@ 0x80
 8002238:	0209      	lsls	r1, r1, #8
 800223a:	430a      	orrs	r2, r1
 800223c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4a13      	ldr	r2, [pc, #76]	@ (8002290 <HAL_TIM_PWM_Start+0x13c>)
 8002244:	4293      	cmp	r3, r2
 8002246:	d004      	beq.n	8002252 <HAL_TIM_PWM_Start+0xfe>
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a13      	ldr	r2, [pc, #76]	@ (800229c <HAL_TIM_PWM_Start+0x148>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d111      	bne.n	8002276 <HAL_TIM_PWM_Start+0x122>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	689b      	ldr	r3, [r3, #8]
 8002258:	2207      	movs	r2, #7
 800225a:	4013      	ands	r3, r2
 800225c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	2b06      	cmp	r3, #6
 8002262:	d010      	beq.n	8002286 <HAL_TIM_PWM_Start+0x132>
    {
      __HAL_TIM_ENABLE(htim);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	681a      	ldr	r2, [r3, #0]
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	2101      	movs	r1, #1
 8002270:	430a      	orrs	r2, r1
 8002272:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002274:	e007      	b.n	8002286 <HAL_TIM_PWM_Start+0x132>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	681a      	ldr	r2, [r3, #0]
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	2101      	movs	r1, #1
 8002282:	430a      	orrs	r2, r1
 8002284:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002286:	2300      	movs	r3, #0
}
 8002288:	0018      	movs	r0, r3
 800228a:	46bd      	mov	sp, r7
 800228c:	b004      	add	sp, #16
 800228e:	bd80      	pop	{r7, pc}
 8002290:	40012c00 	.word	0x40012c00
 8002294:	40014400 	.word	0x40014400
 8002298:	40014800 	.word	0x40014800
 800229c:	40000400 	.word	0x40000400

080022a0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b084      	sub	sp, #16
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	68db      	ldr	r3, [r3, #12]
 80022ae:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	691b      	ldr	r3, [r3, #16]
 80022b6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80022b8:	68bb      	ldr	r3, [r7, #8]
 80022ba:	2202      	movs	r2, #2
 80022bc:	4013      	ands	r3, r2
 80022be:	d021      	beq.n	8002304 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	2202      	movs	r2, #2
 80022c4:	4013      	ands	r3, r2
 80022c6:	d01d      	beq.n	8002304 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	2203      	movs	r2, #3
 80022ce:	4252      	negs	r2, r2
 80022d0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2201      	movs	r2, #1
 80022d6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	699b      	ldr	r3, [r3, #24]
 80022de:	2203      	movs	r2, #3
 80022e0:	4013      	ands	r3, r2
 80022e2:	d004      	beq.n	80022ee <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	0018      	movs	r0, r3
 80022e8:	f000 fa6a 	bl	80027c0 <HAL_TIM_IC_CaptureCallback>
 80022ec:	e007      	b.n	80022fe <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	0018      	movs	r0, r3
 80022f2:	f000 fa5d 	bl	80027b0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	0018      	movs	r0, r3
 80022fa:	f000 fa69 	bl	80027d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2200      	movs	r2, #0
 8002302:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002304:	68bb      	ldr	r3, [r7, #8]
 8002306:	2204      	movs	r2, #4
 8002308:	4013      	ands	r3, r2
 800230a:	d022      	beq.n	8002352 <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	2204      	movs	r2, #4
 8002310:	4013      	ands	r3, r2
 8002312:	d01e      	beq.n	8002352 <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	2205      	movs	r2, #5
 800231a:	4252      	negs	r2, r2
 800231c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2202      	movs	r2, #2
 8002322:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	699a      	ldr	r2, [r3, #24]
 800232a:	23c0      	movs	r3, #192	@ 0xc0
 800232c:	009b      	lsls	r3, r3, #2
 800232e:	4013      	ands	r3, r2
 8002330:	d004      	beq.n	800233c <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	0018      	movs	r0, r3
 8002336:	f000 fa43 	bl	80027c0 <HAL_TIM_IC_CaptureCallback>
 800233a:	e007      	b.n	800234c <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	0018      	movs	r0, r3
 8002340:	f000 fa36 	bl	80027b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	0018      	movs	r0, r3
 8002348:	f000 fa42 	bl	80027d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2200      	movs	r2, #0
 8002350:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002352:	68bb      	ldr	r3, [r7, #8]
 8002354:	2208      	movs	r2, #8
 8002356:	4013      	ands	r3, r2
 8002358:	d021      	beq.n	800239e <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	2208      	movs	r2, #8
 800235e:	4013      	ands	r3, r2
 8002360:	d01d      	beq.n	800239e <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	2209      	movs	r2, #9
 8002368:	4252      	negs	r2, r2
 800236a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2204      	movs	r2, #4
 8002370:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	69db      	ldr	r3, [r3, #28]
 8002378:	2203      	movs	r2, #3
 800237a:	4013      	ands	r3, r2
 800237c:	d004      	beq.n	8002388 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	0018      	movs	r0, r3
 8002382:	f000 fa1d 	bl	80027c0 <HAL_TIM_IC_CaptureCallback>
 8002386:	e007      	b.n	8002398 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	0018      	movs	r0, r3
 800238c:	f000 fa10 	bl	80027b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	0018      	movs	r0, r3
 8002394:	f000 fa1c 	bl	80027d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2200      	movs	r2, #0
 800239c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800239e:	68bb      	ldr	r3, [r7, #8]
 80023a0:	2210      	movs	r2, #16
 80023a2:	4013      	ands	r3, r2
 80023a4:	d022      	beq.n	80023ec <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	2210      	movs	r2, #16
 80023aa:	4013      	ands	r3, r2
 80023ac:	d01e      	beq.n	80023ec <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	2211      	movs	r2, #17
 80023b4:	4252      	negs	r2, r2
 80023b6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2208      	movs	r2, #8
 80023bc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	69da      	ldr	r2, [r3, #28]
 80023c4:	23c0      	movs	r3, #192	@ 0xc0
 80023c6:	009b      	lsls	r3, r3, #2
 80023c8:	4013      	ands	r3, r2
 80023ca:	d004      	beq.n	80023d6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	0018      	movs	r0, r3
 80023d0:	f000 f9f6 	bl	80027c0 <HAL_TIM_IC_CaptureCallback>
 80023d4:	e007      	b.n	80023e6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	0018      	movs	r0, r3
 80023da:	f000 f9e9 	bl	80027b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	0018      	movs	r0, r3
 80023e2:	f000 f9f5 	bl	80027d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2200      	movs	r2, #0
 80023ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80023ec:	68bb      	ldr	r3, [r7, #8]
 80023ee:	2201      	movs	r2, #1
 80023f0:	4013      	ands	r3, r2
 80023f2:	d00c      	beq.n	800240e <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	2201      	movs	r2, #1
 80023f8:	4013      	ands	r3, r2
 80023fa:	d008      	beq.n	800240e <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	2202      	movs	r2, #2
 8002402:	4252      	negs	r2, r2
 8002404:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	0018      	movs	r0, r3
 800240a:	f7fe fa83 	bl	8000914 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800240e:	68bb      	ldr	r3, [r7, #8]
 8002410:	2280      	movs	r2, #128	@ 0x80
 8002412:	4013      	ands	r3, r2
 8002414:	d00c      	beq.n	8002430 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	2280      	movs	r2, #128	@ 0x80
 800241a:	4013      	ands	r3, r2
 800241c:	d008      	beq.n	8002430 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	2281      	movs	r2, #129	@ 0x81
 8002424:	4252      	negs	r2, r2
 8002426:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	0018      	movs	r0, r3
 800242c:	f000 fd52 	bl	8002ed4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002430:	68bb      	ldr	r3, [r7, #8]
 8002432:	2240      	movs	r2, #64	@ 0x40
 8002434:	4013      	ands	r3, r2
 8002436:	d00c      	beq.n	8002452 <HAL_TIM_IRQHandler+0x1b2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	2240      	movs	r2, #64	@ 0x40
 800243c:	4013      	ands	r3, r2
 800243e:	d008      	beq.n	8002452 <HAL_TIM_IRQHandler+0x1b2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	2241      	movs	r2, #65	@ 0x41
 8002446:	4252      	negs	r2, r2
 8002448:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	0018      	movs	r0, r3
 800244e:	f000 f9c7 	bl	80027e0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002452:	68bb      	ldr	r3, [r7, #8]
 8002454:	2220      	movs	r2, #32
 8002456:	4013      	ands	r3, r2
 8002458:	d00c      	beq.n	8002474 <HAL_TIM_IRQHandler+0x1d4>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	2220      	movs	r2, #32
 800245e:	4013      	ands	r3, r2
 8002460:	d008      	beq.n	8002474 <HAL_TIM_IRQHandler+0x1d4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	2221      	movs	r2, #33	@ 0x21
 8002468:	4252      	negs	r2, r2
 800246a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	0018      	movs	r0, r3
 8002470:	f000 fd28 	bl	8002ec4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002474:	46c0      	nop			@ (mov r8, r8)
 8002476:	46bd      	mov	sp, r7
 8002478:	b004      	add	sp, #16
 800247a:	bd80      	pop	{r7, pc}

0800247c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b086      	sub	sp, #24
 8002480:	af00      	add	r7, sp, #0
 8002482:	60f8      	str	r0, [r7, #12]
 8002484:	60b9      	str	r1, [r7, #8]
 8002486:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002488:	2317      	movs	r3, #23
 800248a:	18fb      	adds	r3, r7, r3
 800248c:	2200      	movs	r2, #0
 800248e:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	223c      	movs	r2, #60	@ 0x3c
 8002494:	5c9b      	ldrb	r3, [r3, r2]
 8002496:	2b01      	cmp	r3, #1
 8002498:	d101      	bne.n	800249e <HAL_TIM_PWM_ConfigChannel+0x22>
 800249a:	2302      	movs	r3, #2
 800249c:	e0ad      	b.n	80025fa <HAL_TIM_PWM_ConfigChannel+0x17e>
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	223c      	movs	r2, #60	@ 0x3c
 80024a2:	2101      	movs	r1, #1
 80024a4:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2b0c      	cmp	r3, #12
 80024aa:	d100      	bne.n	80024ae <HAL_TIM_PWM_ConfigChannel+0x32>
 80024ac:	e076      	b.n	800259c <HAL_TIM_PWM_ConfigChannel+0x120>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2b0c      	cmp	r3, #12
 80024b2:	d900      	bls.n	80024b6 <HAL_TIM_PWM_ConfigChannel+0x3a>
 80024b4:	e095      	b.n	80025e2 <HAL_TIM_PWM_ConfigChannel+0x166>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2b08      	cmp	r3, #8
 80024ba:	d04e      	beq.n	800255a <HAL_TIM_PWM_ConfigChannel+0xde>
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2b08      	cmp	r3, #8
 80024c0:	d900      	bls.n	80024c4 <HAL_TIM_PWM_ConfigChannel+0x48>
 80024c2:	e08e      	b.n	80025e2 <HAL_TIM_PWM_ConfigChannel+0x166>
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d003      	beq.n	80024d2 <HAL_TIM_PWM_ConfigChannel+0x56>
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2b04      	cmp	r3, #4
 80024ce:	d021      	beq.n	8002514 <HAL_TIM_PWM_ConfigChannel+0x98>
 80024d0:	e087      	b.n	80025e2 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	68ba      	ldr	r2, [r7, #8]
 80024d8:	0011      	movs	r1, r2
 80024da:	0018      	movs	r0, r3
 80024dc:	f000 fa02 	bl	80028e4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	699a      	ldr	r2, [r3, #24]
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	2108      	movs	r1, #8
 80024ec:	430a      	orrs	r2, r1
 80024ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	699a      	ldr	r2, [r3, #24]
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	2104      	movs	r1, #4
 80024fc:	438a      	bics	r2, r1
 80024fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	6999      	ldr	r1, [r3, #24]
 8002506:	68bb      	ldr	r3, [r7, #8]
 8002508:	691a      	ldr	r2, [r3, #16]
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	430a      	orrs	r2, r1
 8002510:	619a      	str	r2, [r3, #24]
      break;
 8002512:	e06b      	b.n	80025ec <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	68ba      	ldr	r2, [r7, #8]
 800251a:	0011      	movs	r1, r2
 800251c:	0018      	movs	r0, r3
 800251e:	f000 fa5f 	bl	80029e0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	699a      	ldr	r2, [r3, #24]
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	2180      	movs	r1, #128	@ 0x80
 800252e:	0109      	lsls	r1, r1, #4
 8002530:	430a      	orrs	r2, r1
 8002532:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	699a      	ldr	r2, [r3, #24]
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4931      	ldr	r1, [pc, #196]	@ (8002604 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8002540:	400a      	ands	r2, r1
 8002542:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	6999      	ldr	r1, [r3, #24]
 800254a:	68bb      	ldr	r3, [r7, #8]
 800254c:	691b      	ldr	r3, [r3, #16]
 800254e:	021a      	lsls	r2, r3, #8
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	430a      	orrs	r2, r1
 8002556:	619a      	str	r2, [r3, #24]
      break;
 8002558:	e048      	b.n	80025ec <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	68ba      	ldr	r2, [r7, #8]
 8002560:	0011      	movs	r1, r2
 8002562:	0018      	movs	r0, r3
 8002564:	f000 faba 	bl	8002adc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	69da      	ldr	r2, [r3, #28]
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	2108      	movs	r1, #8
 8002574:	430a      	orrs	r2, r1
 8002576:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	69da      	ldr	r2, [r3, #28]
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	2104      	movs	r1, #4
 8002584:	438a      	bics	r2, r1
 8002586:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	69d9      	ldr	r1, [r3, #28]
 800258e:	68bb      	ldr	r3, [r7, #8]
 8002590:	691a      	ldr	r2, [r3, #16]
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	430a      	orrs	r2, r1
 8002598:	61da      	str	r2, [r3, #28]
      break;
 800259a:	e027      	b.n	80025ec <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	68ba      	ldr	r2, [r7, #8]
 80025a2:	0011      	movs	r1, r2
 80025a4:	0018      	movs	r0, r3
 80025a6:	f000 fb19 	bl	8002bdc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	69da      	ldr	r2, [r3, #28]
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	2180      	movs	r1, #128	@ 0x80
 80025b6:	0109      	lsls	r1, r1, #4
 80025b8:	430a      	orrs	r2, r1
 80025ba:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	69da      	ldr	r2, [r3, #28]
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	490f      	ldr	r1, [pc, #60]	@ (8002604 <HAL_TIM_PWM_ConfigChannel+0x188>)
 80025c8:	400a      	ands	r2, r1
 80025ca:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	69d9      	ldr	r1, [r3, #28]
 80025d2:	68bb      	ldr	r3, [r7, #8]
 80025d4:	691b      	ldr	r3, [r3, #16]
 80025d6:	021a      	lsls	r2, r3, #8
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	430a      	orrs	r2, r1
 80025de:	61da      	str	r2, [r3, #28]
      break;
 80025e0:	e004      	b.n	80025ec <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 80025e2:	2317      	movs	r3, #23
 80025e4:	18fb      	adds	r3, r7, r3
 80025e6:	2201      	movs	r2, #1
 80025e8:	701a      	strb	r2, [r3, #0]
      break;
 80025ea:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	223c      	movs	r2, #60	@ 0x3c
 80025f0:	2100      	movs	r1, #0
 80025f2:	5499      	strb	r1, [r3, r2]

  return status;
 80025f4:	2317      	movs	r3, #23
 80025f6:	18fb      	adds	r3, r7, r3
 80025f8:	781b      	ldrb	r3, [r3, #0]
}
 80025fa:	0018      	movs	r0, r3
 80025fc:	46bd      	mov	sp, r7
 80025fe:	b006      	add	sp, #24
 8002600:	bd80      	pop	{r7, pc}
 8002602:	46c0      	nop			@ (mov r8, r8)
 8002604:	fffffbff 	.word	0xfffffbff

08002608 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b084      	sub	sp, #16
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
 8002610:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002612:	230f      	movs	r3, #15
 8002614:	18fb      	adds	r3, r7, r3
 8002616:	2200      	movs	r2, #0
 8002618:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	223c      	movs	r2, #60	@ 0x3c
 800261e:	5c9b      	ldrb	r3, [r3, r2]
 8002620:	2b01      	cmp	r3, #1
 8002622:	d101      	bne.n	8002628 <HAL_TIM_ConfigClockSource+0x20>
 8002624:	2302      	movs	r3, #2
 8002626:	e0bc      	b.n	80027a2 <HAL_TIM_ConfigClockSource+0x19a>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	223c      	movs	r2, #60	@ 0x3c
 800262c:	2101      	movs	r1, #1
 800262e:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	223d      	movs	r2, #61	@ 0x3d
 8002634:	2102      	movs	r1, #2
 8002636:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	689b      	ldr	r3, [r3, #8]
 800263e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002640:	68bb      	ldr	r3, [r7, #8]
 8002642:	2277      	movs	r2, #119	@ 0x77
 8002644:	4393      	bics	r3, r2
 8002646:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002648:	68bb      	ldr	r3, [r7, #8]
 800264a:	4a58      	ldr	r2, [pc, #352]	@ (80027ac <HAL_TIM_ConfigClockSource+0x1a4>)
 800264c:	4013      	ands	r3, r2
 800264e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	68ba      	ldr	r2, [r7, #8]
 8002656:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	2280      	movs	r2, #128	@ 0x80
 800265e:	0192      	lsls	r2, r2, #6
 8002660:	4293      	cmp	r3, r2
 8002662:	d040      	beq.n	80026e6 <HAL_TIM_ConfigClockSource+0xde>
 8002664:	2280      	movs	r2, #128	@ 0x80
 8002666:	0192      	lsls	r2, r2, #6
 8002668:	4293      	cmp	r3, r2
 800266a:	d900      	bls.n	800266e <HAL_TIM_ConfigClockSource+0x66>
 800266c:	e088      	b.n	8002780 <HAL_TIM_ConfigClockSource+0x178>
 800266e:	2280      	movs	r2, #128	@ 0x80
 8002670:	0152      	lsls	r2, r2, #5
 8002672:	4293      	cmp	r3, r2
 8002674:	d100      	bne.n	8002678 <HAL_TIM_ConfigClockSource+0x70>
 8002676:	e088      	b.n	800278a <HAL_TIM_ConfigClockSource+0x182>
 8002678:	2280      	movs	r2, #128	@ 0x80
 800267a:	0152      	lsls	r2, r2, #5
 800267c:	4293      	cmp	r3, r2
 800267e:	d900      	bls.n	8002682 <HAL_TIM_ConfigClockSource+0x7a>
 8002680:	e07e      	b.n	8002780 <HAL_TIM_ConfigClockSource+0x178>
 8002682:	2b70      	cmp	r3, #112	@ 0x70
 8002684:	d018      	beq.n	80026b8 <HAL_TIM_ConfigClockSource+0xb0>
 8002686:	d900      	bls.n	800268a <HAL_TIM_ConfigClockSource+0x82>
 8002688:	e07a      	b.n	8002780 <HAL_TIM_ConfigClockSource+0x178>
 800268a:	2b60      	cmp	r3, #96	@ 0x60
 800268c:	d04f      	beq.n	800272e <HAL_TIM_ConfigClockSource+0x126>
 800268e:	d900      	bls.n	8002692 <HAL_TIM_ConfigClockSource+0x8a>
 8002690:	e076      	b.n	8002780 <HAL_TIM_ConfigClockSource+0x178>
 8002692:	2b50      	cmp	r3, #80	@ 0x50
 8002694:	d03b      	beq.n	800270e <HAL_TIM_ConfigClockSource+0x106>
 8002696:	d900      	bls.n	800269a <HAL_TIM_ConfigClockSource+0x92>
 8002698:	e072      	b.n	8002780 <HAL_TIM_ConfigClockSource+0x178>
 800269a:	2b40      	cmp	r3, #64	@ 0x40
 800269c:	d057      	beq.n	800274e <HAL_TIM_ConfigClockSource+0x146>
 800269e:	d900      	bls.n	80026a2 <HAL_TIM_ConfigClockSource+0x9a>
 80026a0:	e06e      	b.n	8002780 <HAL_TIM_ConfigClockSource+0x178>
 80026a2:	2b30      	cmp	r3, #48	@ 0x30
 80026a4:	d063      	beq.n	800276e <HAL_TIM_ConfigClockSource+0x166>
 80026a6:	d86b      	bhi.n	8002780 <HAL_TIM_ConfigClockSource+0x178>
 80026a8:	2b20      	cmp	r3, #32
 80026aa:	d060      	beq.n	800276e <HAL_TIM_ConfigClockSource+0x166>
 80026ac:	d868      	bhi.n	8002780 <HAL_TIM_ConfigClockSource+0x178>
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d05d      	beq.n	800276e <HAL_TIM_ConfigClockSource+0x166>
 80026b2:	2b10      	cmp	r3, #16
 80026b4:	d05b      	beq.n	800276e <HAL_TIM_ConfigClockSource+0x166>
 80026b6:	e063      	b.n	8002780 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80026c8:	f000 fb66 	bl	8002d98 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	689b      	ldr	r3, [r3, #8]
 80026d2:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80026d4:	68bb      	ldr	r3, [r7, #8]
 80026d6:	2277      	movs	r2, #119	@ 0x77
 80026d8:	4313      	orrs	r3, r2
 80026da:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	68ba      	ldr	r2, [r7, #8]
 80026e2:	609a      	str	r2, [r3, #8]
      break;
 80026e4:	e052      	b.n	800278c <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80026f6:	f000 fb4f 	bl	8002d98 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	689a      	ldr	r2, [r3, #8]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	2180      	movs	r1, #128	@ 0x80
 8002706:	01c9      	lsls	r1, r1, #7
 8002708:	430a      	orrs	r2, r1
 800270a:	609a      	str	r2, [r3, #8]
      break;
 800270c:	e03e      	b.n	800278c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800271a:	001a      	movs	r2, r3
 800271c:	f000 fac2 	bl	8002ca4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	2150      	movs	r1, #80	@ 0x50
 8002726:	0018      	movs	r0, r3
 8002728:	f000 fb1c 	bl	8002d64 <TIM_ITRx_SetConfig>
      break;
 800272c:	e02e      	b.n	800278c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800273a:	001a      	movs	r2, r3
 800273c:	f000 fae0 	bl	8002d00 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	2160      	movs	r1, #96	@ 0x60
 8002746:	0018      	movs	r0, r3
 8002748:	f000 fb0c 	bl	8002d64 <TIM_ITRx_SetConfig>
      break;
 800274c:	e01e      	b.n	800278c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800275a:	001a      	movs	r2, r3
 800275c:	f000 faa2 	bl	8002ca4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	2140      	movs	r1, #64	@ 0x40
 8002766:	0018      	movs	r0, r3
 8002768:	f000 fafc 	bl	8002d64 <TIM_ITRx_SetConfig>
      break;
 800276c:	e00e      	b.n	800278c <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681a      	ldr	r2, [r3, #0]
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	0019      	movs	r1, r3
 8002778:	0010      	movs	r0, r2
 800277a:	f000 faf3 	bl	8002d64 <TIM_ITRx_SetConfig>
      break;
 800277e:	e005      	b.n	800278c <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8002780:	230f      	movs	r3, #15
 8002782:	18fb      	adds	r3, r7, r3
 8002784:	2201      	movs	r2, #1
 8002786:	701a      	strb	r2, [r3, #0]
      break;
 8002788:	e000      	b.n	800278c <HAL_TIM_ConfigClockSource+0x184>
      break;
 800278a:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	223d      	movs	r2, #61	@ 0x3d
 8002790:	2101      	movs	r1, #1
 8002792:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	223c      	movs	r2, #60	@ 0x3c
 8002798:	2100      	movs	r1, #0
 800279a:	5499      	strb	r1, [r3, r2]

  return status;
 800279c:	230f      	movs	r3, #15
 800279e:	18fb      	adds	r3, r7, r3
 80027a0:	781b      	ldrb	r3, [r3, #0]
}
 80027a2:	0018      	movs	r0, r3
 80027a4:	46bd      	mov	sp, r7
 80027a6:	b004      	add	sp, #16
 80027a8:	bd80      	pop	{r7, pc}
 80027aa:	46c0      	nop			@ (mov r8, r8)
 80027ac:	ffff00ff 	.word	0xffff00ff

080027b0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b082      	sub	sp, #8
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80027b8:	46c0      	nop			@ (mov r8, r8)
 80027ba:	46bd      	mov	sp, r7
 80027bc:	b002      	add	sp, #8
 80027be:	bd80      	pop	{r7, pc}

080027c0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b082      	sub	sp, #8
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80027c8:	46c0      	nop			@ (mov r8, r8)
 80027ca:	46bd      	mov	sp, r7
 80027cc:	b002      	add	sp, #8
 80027ce:	bd80      	pop	{r7, pc}

080027d0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b082      	sub	sp, #8
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80027d8:	46c0      	nop			@ (mov r8, r8)
 80027da:	46bd      	mov	sp, r7
 80027dc:	b002      	add	sp, #8
 80027de:	bd80      	pop	{r7, pc}

080027e0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b082      	sub	sp, #8
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80027e8:	46c0      	nop			@ (mov r8, r8)
 80027ea:	46bd      	mov	sp, r7
 80027ec:	b002      	add	sp, #8
 80027ee:	bd80      	pop	{r7, pc}

080027f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b084      	sub	sp, #16
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
 80027f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	4a32      	ldr	r2, [pc, #200]	@ (80028cc <TIM_Base_SetConfig+0xdc>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d003      	beq.n	8002810 <TIM_Base_SetConfig+0x20>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	4a31      	ldr	r2, [pc, #196]	@ (80028d0 <TIM_Base_SetConfig+0xe0>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d108      	bne.n	8002822 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	2270      	movs	r2, #112	@ 0x70
 8002814:	4393      	bics	r3, r2
 8002816:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	68fa      	ldr	r2, [r7, #12]
 800281e:	4313      	orrs	r3, r2
 8002820:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	4a29      	ldr	r2, [pc, #164]	@ (80028cc <TIM_Base_SetConfig+0xdc>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d00f      	beq.n	800284a <TIM_Base_SetConfig+0x5a>
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	4a28      	ldr	r2, [pc, #160]	@ (80028d0 <TIM_Base_SetConfig+0xe0>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d00b      	beq.n	800284a <TIM_Base_SetConfig+0x5a>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	4a27      	ldr	r2, [pc, #156]	@ (80028d4 <TIM_Base_SetConfig+0xe4>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d007      	beq.n	800284a <TIM_Base_SetConfig+0x5a>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	4a26      	ldr	r2, [pc, #152]	@ (80028d8 <TIM_Base_SetConfig+0xe8>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d003      	beq.n	800284a <TIM_Base_SetConfig+0x5a>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	4a25      	ldr	r2, [pc, #148]	@ (80028dc <TIM_Base_SetConfig+0xec>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d108      	bne.n	800285c <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	4a24      	ldr	r2, [pc, #144]	@ (80028e0 <TIM_Base_SetConfig+0xf0>)
 800284e:	4013      	ands	r3, r2
 8002850:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	68db      	ldr	r3, [r3, #12]
 8002856:	68fa      	ldr	r2, [r7, #12]
 8002858:	4313      	orrs	r3, r2
 800285a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	2280      	movs	r2, #128	@ 0x80
 8002860:	4393      	bics	r3, r2
 8002862:	001a      	movs	r2, r3
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	695b      	ldr	r3, [r3, #20]
 8002868:	4313      	orrs	r3, r2
 800286a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	68fa      	ldr	r2, [r7, #12]
 8002870:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	689a      	ldr	r2, [r3, #8]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	681a      	ldr	r2, [r3, #0]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	4a11      	ldr	r2, [pc, #68]	@ (80028cc <TIM_Base_SetConfig+0xdc>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d007      	beq.n	800289a <TIM_Base_SetConfig+0xaa>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	4a12      	ldr	r2, [pc, #72]	@ (80028d8 <TIM_Base_SetConfig+0xe8>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d003      	beq.n	800289a <TIM_Base_SetConfig+0xaa>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	4a11      	ldr	r2, [pc, #68]	@ (80028dc <TIM_Base_SetConfig+0xec>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d103      	bne.n	80028a2 <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	691a      	ldr	r2, [r3, #16]
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2201      	movs	r2, #1
 80028a6:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	691b      	ldr	r3, [r3, #16]
 80028ac:	2201      	movs	r2, #1
 80028ae:	4013      	ands	r3, r2
 80028b0:	2b01      	cmp	r3, #1
 80028b2:	d106      	bne.n	80028c2 <TIM_Base_SetConfig+0xd2>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	691b      	ldr	r3, [r3, #16]
 80028b8:	2201      	movs	r2, #1
 80028ba:	4393      	bics	r3, r2
 80028bc:	001a      	movs	r2, r3
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	611a      	str	r2, [r3, #16]
  }
}
 80028c2:	46c0      	nop			@ (mov r8, r8)
 80028c4:	46bd      	mov	sp, r7
 80028c6:	b004      	add	sp, #16
 80028c8:	bd80      	pop	{r7, pc}
 80028ca:	46c0      	nop			@ (mov r8, r8)
 80028cc:	40012c00 	.word	0x40012c00
 80028d0:	40000400 	.word	0x40000400
 80028d4:	40002000 	.word	0x40002000
 80028d8:	40014400 	.word	0x40014400
 80028dc:	40014800 	.word	0x40014800
 80028e0:	fffffcff 	.word	0xfffffcff

080028e4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b086      	sub	sp, #24
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
 80028ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6a1b      	ldr	r3, [r3, #32]
 80028f2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6a1b      	ldr	r3, [r3, #32]
 80028f8:	2201      	movs	r2, #1
 80028fa:	4393      	bics	r3, r2
 80028fc:	001a      	movs	r2, r3
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	699b      	ldr	r3, [r3, #24]
 800290c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	2270      	movs	r2, #112	@ 0x70
 8002912:	4393      	bics	r3, r2
 8002914:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	2203      	movs	r2, #3
 800291a:	4393      	bics	r3, r2
 800291c:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	68fa      	ldr	r2, [r7, #12]
 8002924:	4313      	orrs	r3, r2
 8002926:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002928:	697b      	ldr	r3, [r7, #20]
 800292a:	2202      	movs	r2, #2
 800292c:	4393      	bics	r3, r2
 800292e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	689b      	ldr	r3, [r3, #8]
 8002934:	697a      	ldr	r2, [r7, #20]
 8002936:	4313      	orrs	r3, r2
 8002938:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	4a23      	ldr	r2, [pc, #140]	@ (80029cc <TIM_OC1_SetConfig+0xe8>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d007      	beq.n	8002952 <TIM_OC1_SetConfig+0x6e>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	4a22      	ldr	r2, [pc, #136]	@ (80029d0 <TIM_OC1_SetConfig+0xec>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d003      	beq.n	8002952 <TIM_OC1_SetConfig+0x6e>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	4a21      	ldr	r2, [pc, #132]	@ (80029d4 <TIM_OC1_SetConfig+0xf0>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d10c      	bne.n	800296c <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002952:	697b      	ldr	r3, [r7, #20]
 8002954:	2208      	movs	r2, #8
 8002956:	4393      	bics	r3, r2
 8002958:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	68db      	ldr	r3, [r3, #12]
 800295e:	697a      	ldr	r2, [r7, #20]
 8002960:	4313      	orrs	r3, r2
 8002962:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002964:	697b      	ldr	r3, [r7, #20]
 8002966:	2204      	movs	r2, #4
 8002968:	4393      	bics	r3, r2
 800296a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	4a17      	ldr	r2, [pc, #92]	@ (80029cc <TIM_OC1_SetConfig+0xe8>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d007      	beq.n	8002984 <TIM_OC1_SetConfig+0xa0>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	4a16      	ldr	r2, [pc, #88]	@ (80029d0 <TIM_OC1_SetConfig+0xec>)
 8002978:	4293      	cmp	r3, r2
 800297a:	d003      	beq.n	8002984 <TIM_OC1_SetConfig+0xa0>
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	4a15      	ldr	r2, [pc, #84]	@ (80029d4 <TIM_OC1_SetConfig+0xf0>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d111      	bne.n	80029a8 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002984:	693b      	ldr	r3, [r7, #16]
 8002986:	4a14      	ldr	r2, [pc, #80]	@ (80029d8 <TIM_OC1_SetConfig+0xf4>)
 8002988:	4013      	ands	r3, r2
 800298a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800298c:	693b      	ldr	r3, [r7, #16]
 800298e:	4a13      	ldr	r2, [pc, #76]	@ (80029dc <TIM_OC1_SetConfig+0xf8>)
 8002990:	4013      	ands	r3, r2
 8002992:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	695b      	ldr	r3, [r3, #20]
 8002998:	693a      	ldr	r2, [r7, #16]
 800299a:	4313      	orrs	r3, r2
 800299c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	699b      	ldr	r3, [r3, #24]
 80029a2:	693a      	ldr	r2, [r7, #16]
 80029a4:	4313      	orrs	r3, r2
 80029a6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	693a      	ldr	r2, [r7, #16]
 80029ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	68fa      	ldr	r2, [r7, #12]
 80029b2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	685a      	ldr	r2, [r3, #4]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	697a      	ldr	r2, [r7, #20]
 80029c0:	621a      	str	r2, [r3, #32]
}
 80029c2:	46c0      	nop			@ (mov r8, r8)
 80029c4:	46bd      	mov	sp, r7
 80029c6:	b006      	add	sp, #24
 80029c8:	bd80      	pop	{r7, pc}
 80029ca:	46c0      	nop			@ (mov r8, r8)
 80029cc:	40012c00 	.word	0x40012c00
 80029d0:	40014400 	.word	0x40014400
 80029d4:	40014800 	.word	0x40014800
 80029d8:	fffffeff 	.word	0xfffffeff
 80029dc:	fffffdff 	.word	0xfffffdff

080029e0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b086      	sub	sp, #24
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
 80029e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6a1b      	ldr	r3, [r3, #32]
 80029ee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6a1b      	ldr	r3, [r3, #32]
 80029f4:	2210      	movs	r2, #16
 80029f6:	4393      	bics	r3, r2
 80029f8:	001a      	movs	r2, r3
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	699b      	ldr	r3, [r3, #24]
 8002a08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	4a2c      	ldr	r2, [pc, #176]	@ (8002ac0 <TIM_OC2_SetConfig+0xe0>)
 8002a0e:	4013      	ands	r3, r2
 8002a10:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	4a2b      	ldr	r2, [pc, #172]	@ (8002ac4 <TIM_OC2_SetConfig+0xe4>)
 8002a16:	4013      	ands	r3, r2
 8002a18:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	021b      	lsls	r3, r3, #8
 8002a20:	68fa      	ldr	r2, [r7, #12]
 8002a22:	4313      	orrs	r3, r2
 8002a24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002a26:	697b      	ldr	r3, [r7, #20]
 8002a28:	2220      	movs	r2, #32
 8002a2a:	4393      	bics	r3, r2
 8002a2c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	689b      	ldr	r3, [r3, #8]
 8002a32:	011b      	lsls	r3, r3, #4
 8002a34:	697a      	ldr	r2, [r7, #20]
 8002a36:	4313      	orrs	r3, r2
 8002a38:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	4a22      	ldr	r2, [pc, #136]	@ (8002ac8 <TIM_OC2_SetConfig+0xe8>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d10d      	bne.n	8002a5e <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002a42:	697b      	ldr	r3, [r7, #20]
 8002a44:	2280      	movs	r2, #128	@ 0x80
 8002a46:	4393      	bics	r3, r2
 8002a48:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	68db      	ldr	r3, [r3, #12]
 8002a4e:	011b      	lsls	r3, r3, #4
 8002a50:	697a      	ldr	r2, [r7, #20]
 8002a52:	4313      	orrs	r3, r2
 8002a54:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002a56:	697b      	ldr	r3, [r7, #20]
 8002a58:	2240      	movs	r2, #64	@ 0x40
 8002a5a:	4393      	bics	r3, r2
 8002a5c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	4a19      	ldr	r2, [pc, #100]	@ (8002ac8 <TIM_OC2_SetConfig+0xe8>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d007      	beq.n	8002a76 <TIM_OC2_SetConfig+0x96>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	4a18      	ldr	r2, [pc, #96]	@ (8002acc <TIM_OC2_SetConfig+0xec>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d003      	beq.n	8002a76 <TIM_OC2_SetConfig+0x96>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	4a17      	ldr	r2, [pc, #92]	@ (8002ad0 <TIM_OC2_SetConfig+0xf0>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d113      	bne.n	8002a9e <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002a76:	693b      	ldr	r3, [r7, #16]
 8002a78:	4a16      	ldr	r2, [pc, #88]	@ (8002ad4 <TIM_OC2_SetConfig+0xf4>)
 8002a7a:	4013      	ands	r3, r2
 8002a7c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002a7e:	693b      	ldr	r3, [r7, #16]
 8002a80:	4a15      	ldr	r2, [pc, #84]	@ (8002ad8 <TIM_OC2_SetConfig+0xf8>)
 8002a82:	4013      	ands	r3, r2
 8002a84:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	695b      	ldr	r3, [r3, #20]
 8002a8a:	009b      	lsls	r3, r3, #2
 8002a8c:	693a      	ldr	r2, [r7, #16]
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	699b      	ldr	r3, [r3, #24]
 8002a96:	009b      	lsls	r3, r3, #2
 8002a98:	693a      	ldr	r2, [r7, #16]
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	693a      	ldr	r2, [r7, #16]
 8002aa2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	68fa      	ldr	r2, [r7, #12]
 8002aa8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	685a      	ldr	r2, [r3, #4]
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	697a      	ldr	r2, [r7, #20]
 8002ab6:	621a      	str	r2, [r3, #32]
}
 8002ab8:	46c0      	nop			@ (mov r8, r8)
 8002aba:	46bd      	mov	sp, r7
 8002abc:	b006      	add	sp, #24
 8002abe:	bd80      	pop	{r7, pc}
 8002ac0:	ffff8fff 	.word	0xffff8fff
 8002ac4:	fffffcff 	.word	0xfffffcff
 8002ac8:	40012c00 	.word	0x40012c00
 8002acc:	40014400 	.word	0x40014400
 8002ad0:	40014800 	.word	0x40014800
 8002ad4:	fffffbff 	.word	0xfffffbff
 8002ad8:	fffff7ff 	.word	0xfffff7ff

08002adc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b086      	sub	sp, #24
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
 8002ae4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6a1b      	ldr	r3, [r3, #32]
 8002aea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6a1b      	ldr	r3, [r3, #32]
 8002af0:	4a31      	ldr	r2, [pc, #196]	@ (8002bb8 <TIM_OC3_SetConfig+0xdc>)
 8002af2:	401a      	ands	r2, r3
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	69db      	ldr	r3, [r3, #28]
 8002b02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	2270      	movs	r2, #112	@ 0x70
 8002b08:	4393      	bics	r3, r2
 8002b0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	2203      	movs	r2, #3
 8002b10:	4393      	bics	r3, r2
 8002b12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	68fa      	ldr	r2, [r7, #12]
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002b1e:	697b      	ldr	r3, [r7, #20]
 8002b20:	4a26      	ldr	r2, [pc, #152]	@ (8002bbc <TIM_OC3_SetConfig+0xe0>)
 8002b22:	4013      	ands	r3, r2
 8002b24:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	689b      	ldr	r3, [r3, #8]
 8002b2a:	021b      	lsls	r3, r3, #8
 8002b2c:	697a      	ldr	r2, [r7, #20]
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	4a22      	ldr	r2, [pc, #136]	@ (8002bc0 <TIM_OC3_SetConfig+0xe4>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d10d      	bne.n	8002b56 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002b3a:	697b      	ldr	r3, [r7, #20]
 8002b3c:	4a21      	ldr	r2, [pc, #132]	@ (8002bc4 <TIM_OC3_SetConfig+0xe8>)
 8002b3e:	4013      	ands	r3, r2
 8002b40:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	68db      	ldr	r3, [r3, #12]
 8002b46:	021b      	lsls	r3, r3, #8
 8002b48:	697a      	ldr	r2, [r7, #20]
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002b4e:	697b      	ldr	r3, [r7, #20]
 8002b50:	4a1d      	ldr	r2, [pc, #116]	@ (8002bc8 <TIM_OC3_SetConfig+0xec>)
 8002b52:	4013      	ands	r3, r2
 8002b54:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	4a19      	ldr	r2, [pc, #100]	@ (8002bc0 <TIM_OC3_SetConfig+0xe4>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d007      	beq.n	8002b6e <TIM_OC3_SetConfig+0x92>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	4a1a      	ldr	r2, [pc, #104]	@ (8002bcc <TIM_OC3_SetConfig+0xf0>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d003      	beq.n	8002b6e <TIM_OC3_SetConfig+0x92>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	4a19      	ldr	r2, [pc, #100]	@ (8002bd0 <TIM_OC3_SetConfig+0xf4>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d113      	bne.n	8002b96 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002b6e:	693b      	ldr	r3, [r7, #16]
 8002b70:	4a18      	ldr	r2, [pc, #96]	@ (8002bd4 <TIM_OC3_SetConfig+0xf8>)
 8002b72:	4013      	ands	r3, r2
 8002b74:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002b76:	693b      	ldr	r3, [r7, #16]
 8002b78:	4a17      	ldr	r2, [pc, #92]	@ (8002bd8 <TIM_OC3_SetConfig+0xfc>)
 8002b7a:	4013      	ands	r3, r2
 8002b7c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	695b      	ldr	r3, [r3, #20]
 8002b82:	011b      	lsls	r3, r3, #4
 8002b84:	693a      	ldr	r2, [r7, #16]
 8002b86:	4313      	orrs	r3, r2
 8002b88:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	699b      	ldr	r3, [r3, #24]
 8002b8e:	011b      	lsls	r3, r3, #4
 8002b90:	693a      	ldr	r2, [r7, #16]
 8002b92:	4313      	orrs	r3, r2
 8002b94:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	693a      	ldr	r2, [r7, #16]
 8002b9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	68fa      	ldr	r2, [r7, #12]
 8002ba0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	685a      	ldr	r2, [r3, #4]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	697a      	ldr	r2, [r7, #20]
 8002bae:	621a      	str	r2, [r3, #32]
}
 8002bb0:	46c0      	nop			@ (mov r8, r8)
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	b006      	add	sp, #24
 8002bb6:	bd80      	pop	{r7, pc}
 8002bb8:	fffffeff 	.word	0xfffffeff
 8002bbc:	fffffdff 	.word	0xfffffdff
 8002bc0:	40012c00 	.word	0x40012c00
 8002bc4:	fffff7ff 	.word	0xfffff7ff
 8002bc8:	fffffbff 	.word	0xfffffbff
 8002bcc:	40014400 	.word	0x40014400
 8002bd0:	40014800 	.word	0x40014800
 8002bd4:	ffffefff 	.word	0xffffefff
 8002bd8:	ffffdfff 	.word	0xffffdfff

08002bdc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b086      	sub	sp, #24
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
 8002be4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6a1b      	ldr	r3, [r3, #32]
 8002bea:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6a1b      	ldr	r3, [r3, #32]
 8002bf0:	4a24      	ldr	r2, [pc, #144]	@ (8002c84 <TIM_OC4_SetConfig+0xa8>)
 8002bf2:	401a      	ands	r2, r3
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	69db      	ldr	r3, [r3, #28]
 8002c02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	4a20      	ldr	r2, [pc, #128]	@ (8002c88 <TIM_OC4_SetConfig+0xac>)
 8002c08:	4013      	ands	r3, r2
 8002c0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	4a1f      	ldr	r2, [pc, #124]	@ (8002c8c <TIM_OC4_SetConfig+0xb0>)
 8002c10:	4013      	ands	r3, r2
 8002c12:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	021b      	lsls	r3, r3, #8
 8002c1a:	68fa      	ldr	r2, [r7, #12]
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002c20:	693b      	ldr	r3, [r7, #16]
 8002c22:	4a1b      	ldr	r2, [pc, #108]	@ (8002c90 <TIM_OC4_SetConfig+0xb4>)
 8002c24:	4013      	ands	r3, r2
 8002c26:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	689b      	ldr	r3, [r3, #8]
 8002c2c:	031b      	lsls	r3, r3, #12
 8002c2e:	693a      	ldr	r2, [r7, #16]
 8002c30:	4313      	orrs	r3, r2
 8002c32:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	4a17      	ldr	r2, [pc, #92]	@ (8002c94 <TIM_OC4_SetConfig+0xb8>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d007      	beq.n	8002c4c <TIM_OC4_SetConfig+0x70>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	4a16      	ldr	r2, [pc, #88]	@ (8002c98 <TIM_OC4_SetConfig+0xbc>)
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d003      	beq.n	8002c4c <TIM_OC4_SetConfig+0x70>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	4a15      	ldr	r2, [pc, #84]	@ (8002c9c <TIM_OC4_SetConfig+0xc0>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d109      	bne.n	8002c60 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002c4c:	697b      	ldr	r3, [r7, #20]
 8002c4e:	4a14      	ldr	r2, [pc, #80]	@ (8002ca0 <TIM_OC4_SetConfig+0xc4>)
 8002c50:	4013      	ands	r3, r2
 8002c52:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	695b      	ldr	r3, [r3, #20]
 8002c58:	019b      	lsls	r3, r3, #6
 8002c5a:	697a      	ldr	r2, [r7, #20]
 8002c5c:	4313      	orrs	r3, r2
 8002c5e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	697a      	ldr	r2, [r7, #20]
 8002c64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	68fa      	ldr	r2, [r7, #12]
 8002c6a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	685a      	ldr	r2, [r3, #4]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	693a      	ldr	r2, [r7, #16]
 8002c78:	621a      	str	r2, [r3, #32]
}
 8002c7a:	46c0      	nop			@ (mov r8, r8)
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	b006      	add	sp, #24
 8002c80:	bd80      	pop	{r7, pc}
 8002c82:	46c0      	nop			@ (mov r8, r8)
 8002c84:	ffffefff 	.word	0xffffefff
 8002c88:	ffff8fff 	.word	0xffff8fff
 8002c8c:	fffffcff 	.word	0xfffffcff
 8002c90:	ffffdfff 	.word	0xffffdfff
 8002c94:	40012c00 	.word	0x40012c00
 8002c98:	40014400 	.word	0x40014400
 8002c9c:	40014800 	.word	0x40014800
 8002ca0:	ffffbfff 	.word	0xffffbfff

08002ca4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b086      	sub	sp, #24
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	60f8      	str	r0, [r7, #12]
 8002cac:	60b9      	str	r1, [r7, #8]
 8002cae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	6a1b      	ldr	r3, [r3, #32]
 8002cb4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	6a1b      	ldr	r3, [r3, #32]
 8002cba:	2201      	movs	r2, #1
 8002cbc:	4393      	bics	r3, r2
 8002cbe:	001a      	movs	r2, r3
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	699b      	ldr	r3, [r3, #24]
 8002cc8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002cca:	693b      	ldr	r3, [r7, #16]
 8002ccc:	22f0      	movs	r2, #240	@ 0xf0
 8002cce:	4393      	bics	r3, r2
 8002cd0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	011b      	lsls	r3, r3, #4
 8002cd6:	693a      	ldr	r2, [r7, #16]
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002cdc:	697b      	ldr	r3, [r7, #20]
 8002cde:	220a      	movs	r2, #10
 8002ce0:	4393      	bics	r3, r2
 8002ce2:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002ce4:	697a      	ldr	r2, [r7, #20]
 8002ce6:	68bb      	ldr	r3, [r7, #8]
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	693a      	ldr	r2, [r7, #16]
 8002cf0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	697a      	ldr	r2, [r7, #20]
 8002cf6:	621a      	str	r2, [r3, #32]
}
 8002cf8:	46c0      	nop			@ (mov r8, r8)
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	b006      	add	sp, #24
 8002cfe:	bd80      	pop	{r7, pc}

08002d00 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b086      	sub	sp, #24
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	60f8      	str	r0, [r7, #12]
 8002d08:	60b9      	str	r1, [r7, #8]
 8002d0a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	6a1b      	ldr	r3, [r3, #32]
 8002d10:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	6a1b      	ldr	r3, [r3, #32]
 8002d16:	2210      	movs	r2, #16
 8002d18:	4393      	bics	r3, r2
 8002d1a:	001a      	movs	r2, r3
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	699b      	ldr	r3, [r3, #24]
 8002d24:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002d26:	693b      	ldr	r3, [r7, #16]
 8002d28:	4a0d      	ldr	r2, [pc, #52]	@ (8002d60 <TIM_TI2_ConfigInputStage+0x60>)
 8002d2a:	4013      	ands	r3, r2
 8002d2c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	031b      	lsls	r3, r3, #12
 8002d32:	693a      	ldr	r2, [r7, #16]
 8002d34:	4313      	orrs	r3, r2
 8002d36:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002d38:	697b      	ldr	r3, [r7, #20]
 8002d3a:	22a0      	movs	r2, #160	@ 0xa0
 8002d3c:	4393      	bics	r3, r2
 8002d3e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002d40:	68bb      	ldr	r3, [r7, #8]
 8002d42:	011b      	lsls	r3, r3, #4
 8002d44:	697a      	ldr	r2, [r7, #20]
 8002d46:	4313      	orrs	r3, r2
 8002d48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	693a      	ldr	r2, [r7, #16]
 8002d4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	697a      	ldr	r2, [r7, #20]
 8002d54:	621a      	str	r2, [r3, #32]
}
 8002d56:	46c0      	nop			@ (mov r8, r8)
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	b006      	add	sp, #24
 8002d5c:	bd80      	pop	{r7, pc}
 8002d5e:	46c0      	nop			@ (mov r8, r8)
 8002d60:	ffff0fff 	.word	0xffff0fff

08002d64 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b084      	sub	sp, #16
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
 8002d6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	689b      	ldr	r3, [r3, #8]
 8002d72:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	2270      	movs	r2, #112	@ 0x70
 8002d78:	4393      	bics	r3, r2
 8002d7a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002d7c:	683a      	ldr	r2, [r7, #0]
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	4313      	orrs	r3, r2
 8002d82:	2207      	movs	r2, #7
 8002d84:	4313      	orrs	r3, r2
 8002d86:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	68fa      	ldr	r2, [r7, #12]
 8002d8c:	609a      	str	r2, [r3, #8]
}
 8002d8e:	46c0      	nop			@ (mov r8, r8)
 8002d90:	46bd      	mov	sp, r7
 8002d92:	b004      	add	sp, #16
 8002d94:	bd80      	pop	{r7, pc}
	...

08002d98 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b086      	sub	sp, #24
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	60f8      	str	r0, [r7, #12]
 8002da0:	60b9      	str	r1, [r7, #8]
 8002da2:	607a      	str	r2, [r7, #4]
 8002da4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	689b      	ldr	r3, [r3, #8]
 8002daa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002dac:	697b      	ldr	r3, [r7, #20]
 8002dae:	4a09      	ldr	r2, [pc, #36]	@ (8002dd4 <TIM_ETR_SetConfig+0x3c>)
 8002db0:	4013      	ands	r3, r2
 8002db2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	021a      	lsls	r2, r3, #8
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	431a      	orrs	r2, r3
 8002dbc:	68bb      	ldr	r3, [r7, #8]
 8002dbe:	4313      	orrs	r3, r2
 8002dc0:	697a      	ldr	r2, [r7, #20]
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	697a      	ldr	r2, [r7, #20]
 8002dca:	609a      	str	r2, [r3, #8]
}
 8002dcc:	46c0      	nop			@ (mov r8, r8)
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	b006      	add	sp, #24
 8002dd2:	bd80      	pop	{r7, pc}
 8002dd4:	ffff00ff 	.word	0xffff00ff

08002dd8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b086      	sub	sp, #24
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	60f8      	str	r0, [r7, #12]
 8002de0:	60b9      	str	r1, [r7, #8]
 8002de2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002de4:	68bb      	ldr	r3, [r7, #8]
 8002de6:	221f      	movs	r2, #31
 8002de8:	4013      	ands	r3, r2
 8002dea:	2201      	movs	r2, #1
 8002dec:	409a      	lsls	r2, r3
 8002dee:	0013      	movs	r3, r2
 8002df0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	6a1b      	ldr	r3, [r3, #32]
 8002df6:	697a      	ldr	r2, [r7, #20]
 8002df8:	43d2      	mvns	r2, r2
 8002dfa:	401a      	ands	r2, r3
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	6a1a      	ldr	r2, [r3, #32]
 8002e04:	68bb      	ldr	r3, [r7, #8]
 8002e06:	211f      	movs	r1, #31
 8002e08:	400b      	ands	r3, r1
 8002e0a:	6879      	ldr	r1, [r7, #4]
 8002e0c:	4099      	lsls	r1, r3
 8002e0e:	000b      	movs	r3, r1
 8002e10:	431a      	orrs	r2, r3
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	621a      	str	r2, [r3, #32]
}
 8002e16:	46c0      	nop			@ (mov r8, r8)
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	b006      	add	sp, #24
 8002e1c:	bd80      	pop	{r7, pc}
	...

08002e20 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b084      	sub	sp, #16
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
 8002e28:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	223c      	movs	r2, #60	@ 0x3c
 8002e2e:	5c9b      	ldrb	r3, [r3, r2]
 8002e30:	2b01      	cmp	r3, #1
 8002e32:	d101      	bne.n	8002e38 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002e34:	2302      	movs	r3, #2
 8002e36:	e03c      	b.n	8002eb2 <HAL_TIMEx_MasterConfigSynchronization+0x92>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	223c      	movs	r2, #60	@ 0x3c
 8002e3c:	2101      	movs	r1, #1
 8002e3e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	223d      	movs	r2, #61	@ 0x3d
 8002e44:	2102      	movs	r1, #2
 8002e46:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	689b      	ldr	r3, [r3, #8]
 8002e56:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	2270      	movs	r2, #112	@ 0x70
 8002e5c:	4393      	bics	r3, r2
 8002e5e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	68fa      	ldr	r2, [r7, #12]
 8002e66:	4313      	orrs	r3, r2
 8002e68:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	68fa      	ldr	r2, [r7, #12]
 8002e70:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a11      	ldr	r2, [pc, #68]	@ (8002ebc <HAL_TIMEx_MasterConfigSynchronization+0x9c>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d004      	beq.n	8002e86 <HAL_TIMEx_MasterConfigSynchronization+0x66>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a0f      	ldr	r2, [pc, #60]	@ (8002ec0 <HAL_TIMEx_MasterConfigSynchronization+0xa0>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d10c      	bne.n	8002ea0 <HAL_TIMEx_MasterConfigSynchronization+0x80>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002e86:	68bb      	ldr	r3, [r7, #8]
 8002e88:	2280      	movs	r2, #128	@ 0x80
 8002e8a:	4393      	bics	r3, r2
 8002e8c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	68ba      	ldr	r2, [r7, #8]
 8002e94:	4313      	orrs	r3, r2
 8002e96:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	68ba      	ldr	r2, [r7, #8]
 8002e9e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	223d      	movs	r2, #61	@ 0x3d
 8002ea4:	2101      	movs	r1, #1
 8002ea6:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	223c      	movs	r2, #60	@ 0x3c
 8002eac:	2100      	movs	r1, #0
 8002eae:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002eb0:	2300      	movs	r3, #0
}
 8002eb2:	0018      	movs	r0, r3
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	b004      	add	sp, #16
 8002eb8:	bd80      	pop	{r7, pc}
 8002eba:	46c0      	nop			@ (mov r8, r8)
 8002ebc:	40012c00 	.word	0x40012c00
 8002ec0:	40000400 	.word	0x40000400

08002ec4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b082      	sub	sp, #8
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002ecc:	46c0      	nop			@ (mov r8, r8)
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	b002      	add	sp, #8
 8002ed2:	bd80      	pop	{r7, pc}

08002ed4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b082      	sub	sp, #8
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002edc:	46c0      	nop			@ (mov r8, r8)
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	b002      	add	sp, #8
 8002ee2:	bd80      	pop	{r7, pc}

08002ee4 <memset>:
 8002ee4:	0003      	movs	r3, r0
 8002ee6:	1882      	adds	r2, r0, r2
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d100      	bne.n	8002eee <memset+0xa>
 8002eec:	4770      	bx	lr
 8002eee:	7019      	strb	r1, [r3, #0]
 8002ef0:	3301      	adds	r3, #1
 8002ef2:	e7f9      	b.n	8002ee8 <memset+0x4>

08002ef4 <__libc_init_array>:
 8002ef4:	b570      	push	{r4, r5, r6, lr}
 8002ef6:	2600      	movs	r6, #0
 8002ef8:	4c0c      	ldr	r4, [pc, #48]	@ (8002f2c <__libc_init_array+0x38>)
 8002efa:	4d0d      	ldr	r5, [pc, #52]	@ (8002f30 <__libc_init_array+0x3c>)
 8002efc:	1b64      	subs	r4, r4, r5
 8002efe:	10a4      	asrs	r4, r4, #2
 8002f00:	42a6      	cmp	r6, r4
 8002f02:	d109      	bne.n	8002f18 <__libc_init_array+0x24>
 8002f04:	2600      	movs	r6, #0
 8002f06:	f000 f819 	bl	8002f3c <_init>
 8002f0a:	4c0a      	ldr	r4, [pc, #40]	@ (8002f34 <__libc_init_array+0x40>)
 8002f0c:	4d0a      	ldr	r5, [pc, #40]	@ (8002f38 <__libc_init_array+0x44>)
 8002f0e:	1b64      	subs	r4, r4, r5
 8002f10:	10a4      	asrs	r4, r4, #2
 8002f12:	42a6      	cmp	r6, r4
 8002f14:	d105      	bne.n	8002f22 <__libc_init_array+0x2e>
 8002f16:	bd70      	pop	{r4, r5, r6, pc}
 8002f18:	00b3      	lsls	r3, r6, #2
 8002f1a:	58eb      	ldr	r3, [r5, r3]
 8002f1c:	4798      	blx	r3
 8002f1e:	3601      	adds	r6, #1
 8002f20:	e7ee      	b.n	8002f00 <__libc_init_array+0xc>
 8002f22:	00b3      	lsls	r3, r6, #2
 8002f24:	58eb      	ldr	r3, [r5, r3]
 8002f26:	4798      	blx	r3
 8002f28:	3601      	adds	r6, #1
 8002f2a:	e7f2      	b.n	8002f12 <__libc_init_array+0x1e>
 8002f2c:	08002fc8 	.word	0x08002fc8
 8002f30:	08002fc8 	.word	0x08002fc8
 8002f34:	08002fcc 	.word	0x08002fcc
 8002f38:	08002fc8 	.word	0x08002fc8

08002f3c <_init>:
 8002f3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f3e:	46c0      	nop			@ (mov r8, r8)
 8002f40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f42:	bc08      	pop	{r3}
 8002f44:	469e      	mov	lr, r3
 8002f46:	4770      	bx	lr

08002f48 <_fini>:
 8002f48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f4a:	46c0      	nop			@ (mov r8, r8)
 8002f4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f4e:	bc08      	pop	{r3}
 8002f50:	469e      	mov	lr, r3
 8002f52:	4770      	bx	lr
